// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseKeeperInstallationType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta                  `pulumi:"metadata"`
	Spec     *ClickHouseKeeperInstallationSpec   `pulumi:"spec"`
	Status   *ClickHouseKeeperInstallationStatus `pulumi:"status"`
}

// ClickHouseKeeperInstallationTypeInput is an input type that accepts ClickHouseKeeperInstallationTypeArgs and ClickHouseKeeperInstallationTypeOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationTypeInput` via:
//
//	ClickHouseKeeperInstallationTypeArgs{...}
type ClickHouseKeeperInstallationTypeInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationTypeOutput() ClickHouseKeeperInstallationTypeOutput
	ToClickHouseKeeperInstallationTypeOutputWithContext(context.Context) ClickHouseKeeperInstallationTypeOutput
}

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseKeeperInstallationTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput                  `pulumi:"metadata"`
	Spec     ClickHouseKeeperInstallationSpecPtrInput   `pulumi:"spec"`
	Status   ClickHouseKeeperInstallationStatusPtrInput `pulumi:"status"`
}

func (ClickHouseKeeperInstallationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationType)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationTypeArgs) ToClickHouseKeeperInstallationTypeOutput() ClickHouseKeeperInstallationTypeOutput {
	return i.ToClickHouseKeeperInstallationTypeOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationTypeArgs) ToClickHouseKeeperInstallationTypeOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationTypeOutput)
}

// ClickHouseKeeperInstallationTypeArrayInput is an input type that accepts ClickHouseKeeperInstallationTypeArray and ClickHouseKeeperInstallationTypeArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationTypeArrayInput` via:
//
//	ClickHouseKeeperInstallationTypeArray{ ClickHouseKeeperInstallationTypeArgs{...} }
type ClickHouseKeeperInstallationTypeArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationTypeArrayOutput() ClickHouseKeeperInstallationTypeArrayOutput
	ToClickHouseKeeperInstallationTypeArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationTypeArrayOutput
}

type ClickHouseKeeperInstallationTypeArray []ClickHouseKeeperInstallationTypeInput

func (ClickHouseKeeperInstallationTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationType)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationTypeArray) ToClickHouseKeeperInstallationTypeArrayOutput() ClickHouseKeeperInstallationTypeArrayOutput {
	return i.ToClickHouseKeeperInstallationTypeArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationTypeArray) ToClickHouseKeeperInstallationTypeArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationTypeArrayOutput)
}

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseKeeperInstallationTypeOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationType)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationTypeOutput) ToClickHouseKeeperInstallationTypeOutput() ClickHouseKeeperInstallationTypeOutput {
	return o
}

func (o ClickHouseKeeperInstallationTypeOutput) ToClickHouseKeeperInstallationTypeOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClickHouseKeeperInstallationTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseKeeperInstallationTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseKeeperInstallationTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ClickHouseKeeperInstallationTypeOutput) Spec() ClickHouseKeeperInstallationSpecPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationType) *ClickHouseKeeperInstallationSpec { return v.Spec }).(ClickHouseKeeperInstallationSpecPtrOutput)
}

func (o ClickHouseKeeperInstallationTypeOutput) Status() ClickHouseKeeperInstallationStatusPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationType) *ClickHouseKeeperInstallationStatus { return v.Status }).(ClickHouseKeeperInstallationStatusPtrOutput)
}

type ClickHouseKeeperInstallationTypeArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationType)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationTypeArrayOutput) ToClickHouseKeeperInstallationTypeArrayOutput() ClickHouseKeeperInstallationTypeArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationTypeArrayOutput) ToClickHouseKeeperInstallationTypeArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationTypeArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationTypeArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationType {
		return vs[0].([]ClickHouseKeeperInstallationType)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationTypeOutput)
}

// ClickHouseKeeperInstallationList is a list of ClickHouseKeeperInstallation
type ClickHouseKeeperInstallationListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of clickhousekeeperinstallations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ClickHouseKeeperInstallationType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ClickHouseKeeperInstallationListTypeInput is an input type that accepts ClickHouseKeeperInstallationListTypeArgs and ClickHouseKeeperInstallationListTypeOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationListTypeInput` via:
//
//	ClickHouseKeeperInstallationListTypeArgs{...}
type ClickHouseKeeperInstallationListTypeInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationListTypeOutput() ClickHouseKeeperInstallationListTypeOutput
	ToClickHouseKeeperInstallationListTypeOutputWithContext(context.Context) ClickHouseKeeperInstallationListTypeOutput
}

// ClickHouseKeeperInstallationList is a list of ClickHouseKeeperInstallation
type ClickHouseKeeperInstallationListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of clickhousekeeperinstallations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ClickHouseKeeperInstallationTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ClickHouseKeeperInstallationListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationListType)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationListTypeArgs) ToClickHouseKeeperInstallationListTypeOutput() ClickHouseKeeperInstallationListTypeOutput {
	return i.ToClickHouseKeeperInstallationListTypeOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationListTypeArgs) ToClickHouseKeeperInstallationListTypeOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationListTypeOutput)
}

// ClickHouseKeeperInstallationList is a list of ClickHouseKeeperInstallation
type ClickHouseKeeperInstallationListTypeOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationListType)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationListTypeOutput) ToClickHouseKeeperInstallationListTypeOutput() ClickHouseKeeperInstallationListTypeOutput {
	return o
}

func (o ClickHouseKeeperInstallationListTypeOutput) ToClickHouseKeeperInstallationListTypeOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClickHouseKeeperInstallationListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of clickhousekeeperinstallations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ClickHouseKeeperInstallationListTypeOutput) Items() ClickHouseKeeperInstallationTypeArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationListType) []ClickHouseKeeperInstallationType { return v.Items }).(ClickHouseKeeperInstallationTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseKeeperInstallationListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseKeeperInstallationListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseKeeperInstallationPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch                  `pulumi:"metadata"`
	Spec     *ClickHouseKeeperInstallationSpecPatch   `pulumi:"spec"`
	Status   *ClickHouseKeeperInstallationStatusPatch `pulumi:"status"`
}

// ClickHouseKeeperInstallationPatchTypeInput is an input type that accepts ClickHouseKeeperInstallationPatchTypeArgs and ClickHouseKeeperInstallationPatchTypeOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationPatchTypeInput` via:
//
//	ClickHouseKeeperInstallationPatchTypeArgs{...}
type ClickHouseKeeperInstallationPatchTypeInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationPatchTypeOutput() ClickHouseKeeperInstallationPatchTypeOutput
	ToClickHouseKeeperInstallationPatchTypeOutputWithContext(context.Context) ClickHouseKeeperInstallationPatchTypeOutput
}

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseKeeperInstallationPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput                  `pulumi:"metadata"`
	Spec     ClickHouseKeeperInstallationSpecPatchPtrInput   `pulumi:"spec"`
	Status   ClickHouseKeeperInstallationStatusPatchPtrInput `pulumi:"status"`
}

func (ClickHouseKeeperInstallationPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationPatchType)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationPatchTypeArgs) ToClickHouseKeeperInstallationPatchTypeOutput() ClickHouseKeeperInstallationPatchTypeOutput {
	return i.ToClickHouseKeeperInstallationPatchTypeOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationPatchTypeArgs) ToClickHouseKeeperInstallationPatchTypeOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationPatchTypeOutput)
}

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseKeeperInstallationPatchTypeOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationPatchType)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationPatchTypeOutput) ToClickHouseKeeperInstallationPatchTypeOutput() ClickHouseKeeperInstallationPatchTypeOutput {
	return o
}

func (o ClickHouseKeeperInstallationPatchTypeOutput) ToClickHouseKeeperInstallationPatchTypeOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClickHouseKeeperInstallationPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseKeeperInstallationPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseKeeperInstallationPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationPatchTypeOutput) Spec() ClickHouseKeeperInstallationSpecPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationPatchType) *ClickHouseKeeperInstallationSpecPatch { return v.Spec }).(ClickHouseKeeperInstallationSpecPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationPatchTypeOutput) Status() ClickHouseKeeperInstallationStatusPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationPatchType) *ClickHouseKeeperInstallationStatusPatch {
		return v.Status
	}).(ClickHouseKeeperInstallationStatusPatchPtrOutput)
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseKeeperInstallationSpec struct {
	Configuration *ClickHouseKeeperInstallationSpecConfiguration `pulumi:"configuration"`
	Defaults      *ClickHouseKeeperInstallationSpecDefaults      `pulumi:"defaults"`
	// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
	// Typical use scenario - custom cluster domain in Kubernetes cluster
	// Example: %s.svc.my.test
	NamespaceDomainPattern *string                                      `pulumi:"namespaceDomainPattern"`
	Reconciling            *ClickHouseKeeperInstallationSpecReconciling `pulumi:"reconciling"`
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Stop *string `pulumi:"stop"`
	// Suspend reconciliation of resources managed by a ClickHouse Keeper.
	// Works as the following:
	//  - When `suspend` is `true` operator stops reconciling all resources.
	//  - When `suspend` is `false` or not set, operator reconciles all resources.
	Suspend *string `pulumi:"suspend"`
	// Allows to define custom taskID for CHI update and watch status of this update execution.
	// Displayed in all .status.taskID* fields.
	// By default (if not filled) every update of CHI manifest will generate random taskID
	TaskID    *string                                    `pulumi:"taskID"`
	Templates *ClickHouseKeeperInstallationSpecTemplates `pulumi:"templates"`
}

// ClickHouseKeeperInstallationSpecInput is an input type that accepts ClickHouseKeeperInstallationSpecArgs and ClickHouseKeeperInstallationSpecOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecInput` via:
//
//	ClickHouseKeeperInstallationSpecArgs{...}
type ClickHouseKeeperInstallationSpecInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecOutput() ClickHouseKeeperInstallationSpecOutput
	ToClickHouseKeeperInstallationSpecOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecOutput
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseKeeperInstallationSpecArgs struct {
	Configuration ClickHouseKeeperInstallationSpecConfigurationPtrInput `pulumi:"configuration"`
	Defaults      ClickHouseKeeperInstallationSpecDefaultsPtrInput      `pulumi:"defaults"`
	// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
	// Typical use scenario - custom cluster domain in Kubernetes cluster
	// Example: %s.svc.my.test
	NamespaceDomainPattern pulumi.StringPtrInput                               `pulumi:"namespaceDomainPattern"`
	Reconciling            ClickHouseKeeperInstallationSpecReconcilingPtrInput `pulumi:"reconciling"`
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Stop pulumi.StringPtrInput `pulumi:"stop"`
	// Suspend reconciliation of resources managed by a ClickHouse Keeper.
	// Works as the following:
	//  - When `suspend` is `true` operator stops reconciling all resources.
	//  - When `suspend` is `false` or not set, operator reconciles all resources.
	Suspend pulumi.StringPtrInput `pulumi:"suspend"`
	// Allows to define custom taskID for CHI update and watch status of this update execution.
	// Displayed in all .status.taskID* fields.
	// By default (if not filled) every update of CHI manifest will generate random taskID
	TaskID    pulumi.StringPtrInput                             `pulumi:"taskID"`
	Templates ClickHouseKeeperInstallationSpecTemplatesPtrInput `pulumi:"templates"`
}

func (ClickHouseKeeperInstallationSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpec)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecArgs) ToClickHouseKeeperInstallationSpecOutput() ClickHouseKeeperInstallationSpecOutput {
	return i.ToClickHouseKeeperInstallationSpecOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecArgs) ToClickHouseKeeperInstallationSpecOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecOutput)
}

func (i ClickHouseKeeperInstallationSpecArgs) ToClickHouseKeeperInstallationSpecPtrOutput() ClickHouseKeeperInstallationSpecPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecArgs) ToClickHouseKeeperInstallationSpecPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecOutput).ToClickHouseKeeperInstallationSpecPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecArgs, ClickHouseKeeperInstallationSpecPtr and ClickHouseKeeperInstallationSpecPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecPtrOutput() ClickHouseKeeperInstallationSpecPtrOutput
	ToClickHouseKeeperInstallationSpecPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecPtrOutput
}

type clickHouseKeeperInstallationSpecPtrType ClickHouseKeeperInstallationSpecArgs

func ClickHouseKeeperInstallationSpecPtr(v *ClickHouseKeeperInstallationSpecArgs) ClickHouseKeeperInstallationSpecPtrInput {
	return (*clickHouseKeeperInstallationSpecPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpec)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecPtrType) ToClickHouseKeeperInstallationSpecPtrOutput() ClickHouseKeeperInstallationSpecPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecPtrType) ToClickHouseKeeperInstallationSpecPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecPtrOutput)
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseKeeperInstallationSpecOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpec)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecOutput) ToClickHouseKeeperInstallationSpecOutput() ClickHouseKeeperInstallationSpecOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecOutput) ToClickHouseKeeperInstallationSpecOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecOutput) ToClickHouseKeeperInstallationSpecPtrOutput() ClickHouseKeeperInstallationSpecPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecOutput) ToClickHouseKeeperInstallationSpecPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpec) *ClickHouseKeeperInstallationSpec {
		return &v
	}).(ClickHouseKeeperInstallationSpecPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecOutput) Configuration() ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpec) *ClickHouseKeeperInstallationSpecConfiguration {
		return v.Configuration
	}).(ClickHouseKeeperInstallationSpecConfigurationPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecOutput) Defaults() ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpec) *ClickHouseKeeperInstallationSpecDefaults { return v.Defaults }).(ClickHouseKeeperInstallationSpecDefaultsPtrOutput)
}

// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
// Typical use scenario - custom cluster domain in Kubernetes cluster
// Example: %s.svc.my.test
func (o ClickHouseKeeperInstallationSpecOutput) NamespaceDomainPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpec) *string { return v.NamespaceDomainPattern }).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecOutput) Reconciling() ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpec) *ClickHouseKeeperInstallationSpecReconciling {
		return v.Reconciling
	}).(ClickHouseKeeperInstallationSpecReconcilingPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseKeeperInstallationSpecOutput) Stop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpec) *string { return v.Stop }).(pulumi.StringPtrOutput)
}

// Suspend reconciliation of resources managed by a ClickHouse Keeper.
// Works as the following:
//   - When `suspend` is `true` operator stops reconciling all resources.
//   - When `suspend` is `false` or not set, operator reconciles all resources.
func (o ClickHouseKeeperInstallationSpecOutput) Suspend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpec) *string { return v.Suspend }).(pulumi.StringPtrOutput)
}

// Allows to define custom taskID for CHI update and watch status of this update execution.
// Displayed in all .status.taskID* fields.
// By default (if not filled) every update of CHI manifest will generate random taskID
func (o ClickHouseKeeperInstallationSpecOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpec) *string { return v.TaskID }).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecOutput) Templates() ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpec) *ClickHouseKeeperInstallationSpecTemplates {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecTemplatesPtrOutput)
}

type ClickHouseKeeperInstallationSpecPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpec)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecPtrOutput) ToClickHouseKeeperInstallationSpecPtrOutput() ClickHouseKeeperInstallationSpecPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecPtrOutput) ToClickHouseKeeperInstallationSpecPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecPtrOutput) Elem() ClickHouseKeeperInstallationSpecOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpec) ClickHouseKeeperInstallationSpec {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpec
		return ret
	}).(ClickHouseKeeperInstallationSpecOutput)
}

func (o ClickHouseKeeperInstallationSpecPtrOutput) Configuration() ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpec) *ClickHouseKeeperInstallationSpecConfiguration {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ClickHouseKeeperInstallationSpecConfigurationPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPtrOutput) Defaults() ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpec) *ClickHouseKeeperInstallationSpecDefaults {
		if v == nil {
			return nil
		}
		return v.Defaults
	}).(ClickHouseKeeperInstallationSpecDefaultsPtrOutput)
}

// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
// Typical use scenario - custom cluster domain in Kubernetes cluster
// Example: %s.svc.my.test
func (o ClickHouseKeeperInstallationSpecPtrOutput) NamespaceDomainPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceDomainPattern
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPtrOutput) Reconciling() ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpec) *ClickHouseKeeperInstallationSpecReconciling {
		if v == nil {
			return nil
		}
		return v.Reconciling
	}).(ClickHouseKeeperInstallationSpecReconcilingPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseKeeperInstallationSpecPtrOutput) Stop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.Stop
	}).(pulumi.StringPtrOutput)
}

// Suspend reconciliation of resources managed by a ClickHouse Keeper.
// Works as the following:
//   - When `suspend` is `true` operator stops reconciling all resources.
//   - When `suspend` is `false` or not set, operator reconciles all resources.
func (o ClickHouseKeeperInstallationSpecPtrOutput) Suspend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.StringPtrOutput)
}

// Allows to define custom taskID for CHI update and watch status of this update execution.
// Displayed in all .status.taskID* fields.
// By default (if not filled) every update of CHI manifest will generate random taskID
func (o ClickHouseKeeperInstallationSpecPtrOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpec) *string {
		if v == nil {
			return nil
		}
		return v.TaskID
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPtrOutput) Templates() ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpec) *ClickHouseKeeperInstallationSpecTemplates {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecTemplatesPtrOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseKeeperInstallationSpecConfiguration struct {
	// describes clusters layout and allows change settings on cluster-level and replica-level
	Clusters []ClickHouseKeeperInstallationSpecConfigurationClusters `pulumi:"clusters"`
	// allows define content of any setting
	Files map[string]interface{} `pulumi:"files"`
	// allows configure multiple aspects and behavior for `clickhouse-keeper` instance
	Settings map[string]interface{} `pulumi:"settings"`
}

// ClickHouseKeeperInstallationSpecConfigurationInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationArgs and ClickHouseKeeperInstallationSpecConfigurationOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationOutput() ClickHouseKeeperInstallationSpecConfigurationOutput
	ToClickHouseKeeperInstallationSpecConfigurationOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationOutput
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseKeeperInstallationSpecConfigurationArgs struct {
	// describes clusters layout and allows change settings on cluster-level and replica-level
	Clusters ClickHouseKeeperInstallationSpecConfigurationClustersArrayInput `pulumi:"clusters"`
	// allows define content of any setting
	Files pulumi.MapInput `pulumi:"files"`
	// allows configure multiple aspects and behavior for `clickhouse-keeper` instance
	Settings pulumi.MapInput `pulumi:"settings"`
}

func (ClickHouseKeeperInstallationSpecConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfiguration)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationArgs) ToClickHouseKeeperInstallationSpecConfigurationOutput() ClickHouseKeeperInstallationSpecConfigurationOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationArgs) ToClickHouseKeeperInstallationSpecConfigurationOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationArgs) ToClickHouseKeeperInstallationSpecConfigurationPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationArgs) ToClickHouseKeeperInstallationSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationOutput).ToClickHouseKeeperInstallationSpecConfigurationPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationArgs, ClickHouseKeeperInstallationSpecConfigurationPtr and ClickHouseKeeperInstallationSpecConfigurationPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationPtrType ClickHouseKeeperInstallationSpecConfigurationArgs

func ClickHouseKeeperInstallationSpecConfigurationPtr(v *ClickHouseKeeperInstallationSpecConfigurationArgs) ClickHouseKeeperInstallationSpecConfigurationPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfiguration)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationPtrType) ToClickHouseKeeperInstallationSpecConfigurationPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationPtrType) ToClickHouseKeeperInstallationSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationPtrOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseKeeperInstallationSpecConfigurationOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfiguration)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationOutput) ToClickHouseKeeperInstallationSpecConfigurationOutput() ClickHouseKeeperInstallationSpecConfigurationOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationOutput) ToClickHouseKeeperInstallationSpecConfigurationOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationOutput) ToClickHouseKeeperInstallationSpecConfigurationPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationOutput) ToClickHouseKeeperInstallationSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfiguration) *ClickHouseKeeperInstallationSpecConfiguration {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationPtrOutput)
}

// describes clusters layout and allows change settings on cluster-level and replica-level
func (o ClickHouseKeeperInstallationSpecConfigurationOutput) Clusters() ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfiguration) []ClickHouseKeeperInstallationSpecConfigurationClusters {
		return v.Clusters
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput)
}

// allows define content of any setting
func (o ClickHouseKeeperInstallationSpecConfigurationOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfiguration) map[string]interface{} { return v.Files }).(pulumi.MapOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-keeper` instance
func (o ClickHouseKeeperInstallationSpecConfigurationOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfiguration) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfiguration)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfiguration) ClickHouseKeeperInstallationSpecConfiguration {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfiguration
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationOutput)
}

// describes clusters layout and allows change settings on cluster-level and replica-level
func (o ClickHouseKeeperInstallationSpecConfigurationPtrOutput) Clusters() ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfiguration) []ClickHouseKeeperInstallationSpecConfigurationClusters {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput)
}

// allows define content of any setting
func (o ClickHouseKeeperInstallationSpecConfigurationPtrOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.MapOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-keeper` instance
func (o ClickHouseKeeperInstallationSpecConfigurationPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClusters struct {
	// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`
	Files  map[string]interface{}                                       `pulumi:"files"`
	Layout *ClickHouseKeeperInstallationSpecConfigurationClustersLayout `pulumi:"layout"`
	// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
	Name *string `pulumi:"name"`
	// Specifies whether the Pod Disruption Budget (PDB) should be managed.
	// During the next installation, if PDB management is enabled, the operator will
	// attempt to retrieve any existing PDB. If none is found, it will create a new one
	// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
	// will remain intact, and the reconciliation loop will not be executed. By default,
	// PDB management is enabled.
	PdbManaged *string `pulumi:"pdbManaged"`
	// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
	// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	PdbMaxUnavailable *int `pulumi:"pdbMaxUnavailable"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  map[string]interface{}                                          `pulumi:"settings"`
	Templates *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates `pulumi:"templates"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersArgs and ClickHouseKeeperInstallationSpecConfigurationClustersOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersOutput() ClickHouseKeeperInstallationSpecConfigurationClustersOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersArgs struct {
	// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`
	Files  pulumi.MapInput                                                     `pulumi:"files"`
	Layout ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrInput `pulumi:"layout"`
	// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether the Pod Disruption Budget (PDB) should be managed.
	// During the next installation, if PDB management is enabled, the operator will
	// attempt to retrieve any existing PDB. If none is found, it will create a new one
	// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
	// will remain intact, and the reconciliation loop will not be executed. By default,
	// PDB management is enabled.
	PdbManaged pulumi.StringPtrInput `pulumi:"pdbManaged"`
	// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
	// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	PdbMaxUnavailable pulumi.IntPtrInput `pulumi:"pdbMaxUnavailable"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  pulumi.MapInput                                                        `pulumi:"settings"`
	Templates ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrInput `pulumi:"templates"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClusters)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersOutput() ClickHouseKeeperInstallationSpecConfigurationClustersOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersOutput)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersArray and ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersArray{ ClickHouseKeeperInstallationSpecConfigurationClustersArgs{...} }
type ClickHouseKeeperInstallationSpecConfigurationClustersArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersArray []ClickHouseKeeperInstallationSpecConfigurationClustersInput

func (ClickHouseKeeperInstallationSpecConfigurationClustersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClusters)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersArray) ToClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersArray) ToClickHouseKeeperInstallationSpecConfigurationClustersArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClusters)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersOutput() ClickHouseKeeperInstallationSpecConfigurationClustersOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClusters) map[string]interface{} { return v.Files }).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersOutput) Layout() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClusters) *ClickHouseKeeperInstallationSpecConfigurationClustersLayout {
		return v.Layout
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput)
}

// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
func (o ClickHouseKeeperInstallationSpecConfigurationClustersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClusters) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether the Pod Disruption Budget (PDB) should be managed.
// During the next installation, if PDB management is enabled, the operator will
// attempt to retrieve any existing PDB. If none is found, it will create a new one
// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
// will remain intact, and the reconciliation loop will not be executed. By default,
// PDB management is enabled.
func (o ClickHouseKeeperInstallationSpecConfigurationClustersOutput) PdbManaged() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClusters) *string { return v.PdbManaged }).(pulumi.StringPtrOutput)
}

// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ClickHouseKeeperInstallationSpecConfigurationClustersOutput) PdbMaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClusters) *int { return v.PdbMaxUnavailable }).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecConfigurationClustersOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClusters) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersOutput) Templates() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClusters) *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClusters)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecConfigurationClustersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecConfigurationClusters {
		return vs[0].([]ClickHouseKeeperInstallationSpecConfigurationClusters)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseKeeperInstallationSpecConfigurationClustersLayout struct {
	// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
	Replicas []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas `pulumi:"replicas"`
	// how much replicas in each shards for current cluster will run in Kubernetes,
	// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// every shard contains 1 replica by default"
	ReplicasCount *int `pulumi:"replicasCount"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs struct {
	// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
	Replicas ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayInput `pulumi:"replicas"`
	// how much replicas in each shards for current cluster will run in Kubernetes,
	// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// every shard contains 1 replica by default"
	ReplicasCount pulumi.IntPtrInput `pulumi:"replicasCount"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayout)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput).ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs, ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtr and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrType ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs

func ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtr(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayout)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayout)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfigurationClustersLayout) *ClickHouseKeeperInstallationSpecConfigurationClustersLayout {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput)
}

// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput) Replicas() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayout) []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas {
		return v.Replicas
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput)
}

// how much replicas in each shards for current cluster will run in Kubernetes,
// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// every shard contains 1 replica by default"
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayout) *int { return v.ReplicasCount }).(pulumi.IntPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayout)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayout) ClickHouseKeeperInstallationSpecConfigurationClustersLayout {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfigurationClustersLayout
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput)
}

// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput) Replicas() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayout) []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput)
}

// how much replicas in each shards for current cluster will run in Kubernetes,
// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// every shard contains 1 replica by default"
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayout) *int {
		if v == nil {
			return nil
		}
		return v.ReplicasCount
	}).(pulumi.IntPtrOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch struct {
	// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
	Replicas []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch `pulumi:"replicas"`
	// how much replicas in each shards for current cluster will run in Kubernetes,
	// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// every shard contains 1 replica by default"
	ReplicasCount *int `pulumi:"replicasCount"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs struct {
	// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
	Replicas ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayInput `pulumi:"replicas"`
	// how much replicas in each shards for current cluster will run in Kubernetes,
	// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
	// every shard contains 1 replica by default"
	ReplicasCount pulumi.IntPtrInput `pulumi:"replicasCount"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput).ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs, ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtr and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrType ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs

func ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtr(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput)
}

// describe current cluster layout, how much shards in cluster, how much replica in shard
// allows override settings on each shard and replica separatelly
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput)
}

// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput) Replicas() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch) []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch {
		return v.Replicas
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput)
}

// how much replicas in each shards for current cluster will run in Kubernetes,
// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// every shard contains 1 replica by default"
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch) *int { return v.ReplicasCount }).(pulumi.IntPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput)
}

// optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput) Replicas() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch) []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput)
}

// how much replicas in each shards for current cluster will run in Kubernetes,
// each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
// every shard contains 1 replica by default"
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput) ReplicasCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch) *int {
		if v == nil {
			return nil
		}
		return v.ReplicasCount
	}).(pulumi.IntPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas struct {
	// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files map[string]interface{} `pulumi:"files"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Shards []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards `pulumi:"shards"`
	// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
	ShardsCount *int                                                                          `pulumi:"shardsCount"`
	Templates   *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates `pulumi:"templates"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArgs struct {
	// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files pulumi.MapInput `pulumi:"files"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Shards ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput `pulumi:"shards"`
	// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
	ShardsCount pulumi.IntPtrInput                                                                   `pulumi:"shardsCount"`
	Templates   ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput `pulumi:"templates"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArray and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArray{ ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArgs{...} }
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArray []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasInput

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArray) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArray) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, by default replica name is generated, but you can override it and setup custom name
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput) Shards() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas) []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards {
		return v.Shards
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput)
}

// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput) ShardsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas) *int { return v.ShardsCount }).(pulumi.IntPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput) Templates() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas {
		return vs[0].([]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicas)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch struct {
	// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files map[string]interface{} `pulumi:"files"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name *string `pulumi:"name"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings map[string]interface{} `pulumi:"settings"`
	// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Shards []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch `pulumi:"shards"`
	// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
	ShardsCount *int                                                                               `pulumi:"shardsCount"`
	Templates   *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch `pulumi:"templates"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArgs struct {
	// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files pulumi.MapInput `pulumi:"files"`
	// optional, by default replica name is generated, but you can override it and setup custom name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings pulumi.MapInput `pulumi:"settings"`
	// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Shards ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayInput `pulumi:"shards"`
	// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
	ShardsCount pulumi.IntPtrInput                                                                        `pulumi:"shardsCount"`
	Templates   ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrInput `pulumi:"templates"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArray and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArray{ ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArgs{...} }
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArray []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchInput

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArray) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArray) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, by default replica name is generated, but you can override it and setup custom name
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

// optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput) Shards() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch) []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch {
		return v.Shards
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput)
}

// optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput) ShardsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch) *int {
		return v.ShardsCount
	}).(pulumi.IntPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput) Templates() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch {
		return vs[0].([]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatch)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards struct {
	// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files map[string]interface{} `pulumi:"files"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name     *string `pulumi:"name"`
	RaftPort *int    `pulumi:"raftPort"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  map[string]interface{}                                                              `pulumi:"settings"`
	Templates *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates `pulumi:"templates"`
	ZkPort    *int                                                                                `pulumi:"zkPort"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArgs struct {
	// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files pulumi.MapInput `pulumi:"files"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name     pulumi.StringPtrInput `pulumi:"name"`
	RaftPort pulumi.IntPtrInput    `pulumi:"raftPort"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  pulumi.MapInput                                                                            `pulumi:"settings"`
	Templates ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput `pulumi:"templates"`
	ZkPort    pulumi.IntPtrInput                                                                         `pulumi:"zkPort"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArray and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArray{ ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArgs{...} }
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArray []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsInput

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArray) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArray) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, by default shard name is generated, but you can override it and setup custom name
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) RaftPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards) *int {
		return v.RaftPort
	}).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) Templates() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput) ZkPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards) *int {
		return v.ZkPort
	}).(pulumi.IntPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards {
		return vs[0].([]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShards)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch struct {
	// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files map[string]interface{} `pulumi:"files"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name     *string `pulumi:"name"`
	RaftPort *int    `pulumi:"raftPort"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  map[string]interface{}                                                                   `pulumi:"settings"`
	Templates *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch `pulumi:"templates"`
	ZkPort    *int                                                                                     `pulumi:"zkPort"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArgs struct {
	// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
	Files pulumi.MapInput `pulumi:"files"`
	// optional, by default shard name is generated, but you can override it and setup custom name
	Name     pulumi.StringPtrInput `pulumi:"name"`
	RaftPort pulumi.IntPtrInput    `pulumi:"raftPort"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  pulumi.MapInput                                                                                 `pulumi:"settings"`
	Templates ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrInput `pulumi:"templates"`
	ZkPort    pulumi.IntPtrInput                                                                              `pulumi:"zkPort"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArray and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArray{ ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArgs{...} }
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArray []ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchInput

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArray) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArray) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// optional, by default shard name is generated, but you can override it and setup custom name
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput) RaftPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch) *int {
		return v.RaftPort
	}).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput) Templates() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput) ZkPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch) *int {
		return v.ZkPort
	}).(pulumi.IntPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch {
		return vs[0].([]ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatch)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput).ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs, ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtr and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs

func ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtr(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput).ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs, ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtr and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrType ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs

func ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtr(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput).ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs, ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtr and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs

func ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtr(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput).ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs, ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtr and ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrType ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs

func ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtr(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
// override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersPatch struct {
	// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`
	Files  map[string]interface{}                                            `pulumi:"files"`
	Layout *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch `pulumi:"layout"`
	// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
	Name *string `pulumi:"name"`
	// Specifies whether the Pod Disruption Budget (PDB) should be managed.
	// During the next installation, if PDB management is enabled, the operator will
	// attempt to retrieve any existing PDB. If none is found, it will create a new one
	// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
	// will remain intact, and the reconciliation loop will not be executed. By default,
	// PDB management is enabled.
	PdbManaged *string `pulumi:"pdbManaged"`
	// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
	// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	PdbMaxUnavailable *int `pulumi:"pdbMaxUnavailable"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  map[string]interface{}                                               `pulumi:"settings"`
	Templates *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch `pulumi:"templates"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersPatchArgs and ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersPatchArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersPatchArgs struct {
	// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	// override top-level `chi.spec.configuration.files`
	Files  pulumi.MapInput                                                          `pulumi:"files"`
	Layout ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrInput `pulumi:"layout"`
	// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies whether the Pod Disruption Budget (PDB) should be managed.
	// During the next installation, if PDB management is enabled, the operator will
	// attempt to retrieve any existing PDB. If none is found, it will create a new one
	// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
	// will remain intact, and the reconciliation loop will not be executed. By default,
	// PDB management is enabled.
	PdbManaged pulumi.StringPtrInput `pulumi:"pdbManaged"`
	// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
	// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	PdbMaxUnavailable pulumi.IntPtrInput `pulumi:"pdbMaxUnavailable"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
	// override top-level `chi.spec.configuration.settings`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  pulumi.MapInput                                                             `pulumi:"settings"`
	Templates ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrInput `pulumi:"templates"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersPatchArray and ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersPatchArray{ ClickHouseKeeperInstallationSpecConfigurationClustersPatchArgs{...} }
type ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput
}

type ClickHouseKeeperInstallationSpecConfigurationClustersPatchArray []ClickHouseKeeperInstallationSpecConfigurationClustersPatchInput

func (ClickHouseKeeperInstallationSpecConfigurationClustersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersPatchArray) ToClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersPatchArray) ToClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput {
	return o
}

// optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
// override top-level `chi.spec.configuration.files`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersPatch) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) Layout() ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersPatch) *ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatch {
		return v.Layout
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput)
}

// cluster name, used to identify set of servers and wide used during generate names of related Kubernetes resources
func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies whether the Pod Disruption Budget (PDB) should be managed.
// During the next installation, if PDB management is enabled, the operator will
// attempt to retrieve any existing PDB. If none is found, it will create a new one
// and initiate a reconciliation loop. If PDB management is disabled, the existing PDB
// will remain intact, and the reconciliation loop will not be executed. By default,
// PDB management is enabled.
func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) PdbManaged() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersPatch) *string { return v.PdbManaged }).(pulumi.StringPtrOutput)
}

// Pod eviction is allowed if at most "pdbMaxUnavailable" pods are unavailable after the eviction,
// i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) PdbMaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersPatch) *int { return v.PdbMaxUnavailable }).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
// override top-level `chi.spec.configuration.settings`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersPatch) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput) Templates() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersPatch) *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecConfigurationClustersPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput() ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecConfigurationClustersPatch {
		return vs[0].([]ClickHouseKeeperInstallationSpecConfigurationClustersPatch)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs and ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput).ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs, ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtr and ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrType ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs

func ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtr(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string { return v.HostTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string { return v.PodTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) ClickHouseKeeperInstallationSpecConfigurationClustersTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfigurationClustersTemplates
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs and ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput).ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs, ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtr and ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrType ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs

func ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtr(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
// override top-level `chi.spec.configuration.templates`
type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseKeeperInstallationSpecConfigurationPatch struct {
	// describes clusters layout and allows change settings on cluster-level and replica-level
	Clusters []ClickHouseKeeperInstallationSpecConfigurationClustersPatch `pulumi:"clusters"`
	// allows define content of any setting
	Files map[string]interface{} `pulumi:"files"`
	// allows configure multiple aspects and behavior for `clickhouse-keeper` instance
	Settings map[string]interface{} `pulumi:"settings"`
}

// ClickHouseKeeperInstallationSpecConfigurationPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationPatchArgs and ClickHouseKeeperInstallationSpecConfigurationPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecConfigurationPatchArgs{...}
type ClickHouseKeeperInstallationSpecConfigurationPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationPatchOutput() ClickHouseKeeperInstallationSpecConfigurationPatchOutput
	ToClickHouseKeeperInstallationSpecConfigurationPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationPatchOutput
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseKeeperInstallationSpecConfigurationPatchArgs struct {
	// describes clusters layout and allows change settings on cluster-level and replica-level
	Clusters ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayInput `pulumi:"clusters"`
	// allows define content of any setting
	Files pulumi.MapInput `pulumi:"files"`
	// allows configure multiple aspects and behavior for `clickhouse-keeper` instance
	Settings pulumi.MapInput `pulumi:"settings"`
}

func (ClickHouseKeeperInstallationSpecConfigurationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecConfigurationPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationPatchOutput() ClickHouseKeeperInstallationSpecConfigurationPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecConfigurationPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecConfigurationPatchArgs) ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationPatchOutput).ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecConfigurationPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecConfigurationPatchArgs, ClickHouseKeeperInstallationSpecConfigurationPatchPtr and ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecConfigurationPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecConfigurationPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecConfigurationPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput
	ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput
}

type clickHouseKeeperInstallationSpecConfigurationPatchPtrType ClickHouseKeeperInstallationSpecConfigurationPatchArgs

func ClickHouseKeeperInstallationSpecConfigurationPatchPtr(v *ClickHouseKeeperInstallationSpecConfigurationPatchArgs) ClickHouseKeeperInstallationSpecConfigurationPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecConfigurationPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecConfigurationPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecConfigurationPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecConfigurationPatchPtrType) ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
type ClickHouseKeeperInstallationSpecConfigurationPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationPatchOutput() ClickHouseKeeperInstallationSpecConfigurationPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecConfigurationPatchOutput) ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecConfigurationPatch) *ClickHouseKeeperInstallationSpecConfigurationPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput)
}

// describes clusters layout and allows change settings on cluster-level and replica-level
func (o ClickHouseKeeperInstallationSpecConfigurationPatchOutput) Clusters() ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationPatch) []ClickHouseKeeperInstallationSpecConfigurationClustersPatch {
		return v.Clusters
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput)
}

// allows define content of any setting
func (o ClickHouseKeeperInstallationSpecConfigurationPatchOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationPatch) map[string]interface{} { return v.Files }).(pulumi.MapOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-keeper` instance
func (o ClickHouseKeeperInstallationSpecConfigurationPatchOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecConfigurationPatch) map[string]interface{} { return v.Settings }).(pulumi.MapOutput)
}

type ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecConfigurationPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput() ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput) ToClickHouseKeeperInstallationSpecConfigurationPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecConfigurationPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationPatch) ClickHouseKeeperInstallationSpecConfigurationPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecConfigurationPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecConfigurationPatchOutput)
}

// describes clusters layout and allows change settings on cluster-level and replica-level
func (o ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput) Clusters() ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationPatch) []ClickHouseKeeperInstallationSpecConfigurationClustersPatch {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput)
}

// allows define content of any setting
func (o ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.MapOutput)
}

// allows configure multiple aspects and behavior for `clickhouse-keeper` instance
func (o ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecConfigurationPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseKeeperInstallationSpecDefaults struct {
	DistributedDDL *ClickHouseKeeperInstallationSpecDefaultsDistributedDDL `pulumi:"distributedDDL"`
	// define should replicas be specified by FQDN in `<host></host>`.
	// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
	// "no" by default
	ReplicasUseFQDN   *string                                                    `pulumi:"replicasUseFQDN"`
	StorageManagement *ClickHouseKeeperInstallationSpecDefaultsStorageManagement `pulumi:"storageManagement"`
	Templates         *ClickHouseKeeperInstallationSpecDefaultsTemplates         `pulumi:"templates"`
}

// ClickHouseKeeperInstallationSpecDefaultsInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsArgs and ClickHouseKeeperInstallationSpecDefaultsOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsInput` via:
//
//	ClickHouseKeeperInstallationSpecDefaultsArgs{...}
type ClickHouseKeeperInstallationSpecDefaultsInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsOutput() ClickHouseKeeperInstallationSpecDefaultsOutput
	ToClickHouseKeeperInstallationSpecDefaultsOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsOutput
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseKeeperInstallationSpecDefaultsArgs struct {
	DistributedDDL ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrInput `pulumi:"distributedDDL"`
	// define should replicas be specified by FQDN in `<host></host>`.
	// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
	// "no" by default
	ReplicasUseFQDN   pulumi.StringPtrInput                                             `pulumi:"replicasUseFQDN"`
	StorageManagement ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrInput `pulumi:"storageManagement"`
	Templates         ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrInput         `pulumi:"templates"`
}

func (ClickHouseKeeperInstallationSpecDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaults)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecDefaultsArgs) ToClickHouseKeeperInstallationSpecDefaultsOutput() ClickHouseKeeperInstallationSpecDefaultsOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsArgs) ToClickHouseKeeperInstallationSpecDefaultsOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsOutput)
}

func (i ClickHouseKeeperInstallationSpecDefaultsArgs) ToClickHouseKeeperInstallationSpecDefaultsPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsArgs) ToClickHouseKeeperInstallationSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsOutput).ToClickHouseKeeperInstallationSpecDefaultsPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecDefaultsPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsArgs, ClickHouseKeeperInstallationSpecDefaultsPtr and ClickHouseKeeperInstallationSpecDefaultsPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecDefaultsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecDefaultsPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPtrOutput
	ToClickHouseKeeperInstallationSpecDefaultsPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsPtrOutput
}

type clickHouseKeeperInstallationSpecDefaultsPtrType ClickHouseKeeperInstallationSpecDefaultsArgs

func ClickHouseKeeperInstallationSpecDefaultsPtr(v *ClickHouseKeeperInstallationSpecDefaultsArgs) ClickHouseKeeperInstallationSpecDefaultsPtrInput {
	return (*clickHouseKeeperInstallationSpecDefaultsPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaults)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecDefaultsPtrType) ToClickHouseKeeperInstallationSpecDefaultsPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecDefaultsPtrType) ToClickHouseKeeperInstallationSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsPtrOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseKeeperInstallationSpecDefaultsOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaults)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsOutput) ToClickHouseKeeperInstallationSpecDefaultsOutput() ClickHouseKeeperInstallationSpecDefaultsOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsOutput) ToClickHouseKeeperInstallationSpecDefaultsOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsOutput) ToClickHouseKeeperInstallationSpecDefaultsPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecDefaultsPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecDefaultsOutput) ToClickHouseKeeperInstallationSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecDefaults) *ClickHouseKeeperInstallationSpecDefaults {
		return &v
	}).(ClickHouseKeeperInstallationSpecDefaultsPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsOutput) DistributedDDL() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaults) *ClickHouseKeeperInstallationSpecDefaultsDistributedDDL {
		return v.DistributedDDL
	}).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput)
}

// define should replicas be specified by FQDN in `<host></host>`.
// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
// "no" by default
func (o ClickHouseKeeperInstallationSpecDefaultsOutput) ReplicasUseFQDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaults) *string { return v.ReplicasUseFQDN }).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsOutput) StorageManagement() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaults) *ClickHouseKeeperInstallationSpecDefaultsStorageManagement {
		return v.StorageManagement
	}).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsOutput) Templates() ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaults) *ClickHouseKeeperInstallationSpecDefaultsTemplates {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput)
}

type ClickHouseKeeperInstallationSpecDefaultsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaults)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsPtrOutput) Elem() ClickHouseKeeperInstallationSpecDefaultsOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaults) ClickHouseKeeperInstallationSpecDefaults {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecDefaults
		return ret
	}).(ClickHouseKeeperInstallationSpecDefaultsOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsPtrOutput) DistributedDDL() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaults) *ClickHouseKeeperInstallationSpecDefaultsDistributedDDL {
		if v == nil {
			return nil
		}
		return v.DistributedDDL
	}).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput)
}

// define should replicas be specified by FQDN in `<host></host>`.
// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
// "no" by default
func (o ClickHouseKeeperInstallationSpecDefaultsPtrOutput) ReplicasUseFQDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaults) *string {
		if v == nil {
			return nil
		}
		return v.ReplicasUseFQDN
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsPtrOutput) StorageManagement() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaults) *ClickHouseKeeperInstallationSpecDefaultsStorageManagement {
		if v == nil {
			return nil
		}
		return v.StorageManagement
	}).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsPtrOutput) Templates() ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaults) *ClickHouseKeeperInstallationSpecDefaultsTemplates {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDL struct {
	// Settings from this profile will be used to execute DDL queries
	Profile *string `pulumi:"profile"`
}

// ClickHouseKeeperInstallationSpecDefaultsDistributedDDLInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs and ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsDistributedDDLInput` via:
//
//	ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs{...}
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput
	ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs struct {
	// Settings from this profile will be used to execute DDL queries
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsDistributedDDL)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput)
}

func (i ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput).ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs, ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtr and ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput
	ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput
}

type clickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrType ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs

func ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtr(v *ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrInput {
	return (*clickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsDistributedDDL)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrType) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrType) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsDistributedDDL)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecDefaultsDistributedDDL) *ClickHouseKeeperInstallationSpecDefaultsDistributedDDL {
		return &v
	}).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput)
}

// Settings from this profile will be used to execute DDL queries
func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsDistributedDDL) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsDistributedDDL)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput) Elem() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsDistributedDDL) ClickHouseKeeperInstallationSpecDefaultsDistributedDDL {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecDefaultsDistributedDDL
		return ret
	}).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput)
}

// Settings from this profile will be used to execute DDL queries
func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsDistributedDDL) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch struct {
	// Settings from this profile will be used to execute DDL queries
	Profile *string `pulumi:"profile"`
}

// ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs and ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs{...}
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput
	ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs struct {
	// Settings from this profile will be used to execute DDL queries
	Profile pulumi.StringPtrInput `pulumi:"profile"`
}

func (ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput).ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs, ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtr and ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput
	ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput
}

type clickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrType ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs

func ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtr(v *ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrType) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrType) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput)
}

// allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
// More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch) *ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput)
}

// Settings from this profile will be used to execute DDL queries
func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch) ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput)
}

// Settings from this profile will be used to execute DDL queries
func (o ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseKeeperInstallationSpecDefaultsPatch struct {
	DistributedDDL *ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch `pulumi:"distributedDDL"`
	// define should replicas be specified by FQDN in `<host></host>`.
	// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
	// "no" by default
	ReplicasUseFQDN   *string                                                         `pulumi:"replicasUseFQDN"`
	StorageManagement *ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch `pulumi:"storageManagement"`
	Templates         *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch         `pulumi:"templates"`
}

// ClickHouseKeeperInstallationSpecDefaultsPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsPatchArgs and ClickHouseKeeperInstallationSpecDefaultsPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecDefaultsPatchArgs{...}
type ClickHouseKeeperInstallationSpecDefaultsPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsPatchOutput() ClickHouseKeeperInstallationSpecDefaultsPatchOutput
	ToClickHouseKeeperInstallationSpecDefaultsPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsPatchOutput
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseKeeperInstallationSpecDefaultsPatchArgs struct {
	DistributedDDL ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrInput `pulumi:"distributedDDL"`
	// define should replicas be specified by FQDN in `<host></host>`.
	// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
	// "no" by default
	ReplicasUseFQDN   pulumi.StringPtrInput                                                  `pulumi:"replicasUseFQDN"`
	StorageManagement ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrInput `pulumi:"storageManagement"`
	Templates         ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrInput         `pulumi:"templates"`
}

func (ClickHouseKeeperInstallationSpecDefaultsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecDefaultsPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsPatchOutput() ClickHouseKeeperInstallationSpecDefaultsPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecDefaultsPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsPatchOutput).ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecDefaultsPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsPatchArgs, ClickHouseKeeperInstallationSpecDefaultsPatchPtr and ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecDefaultsPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecDefaultsPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput
	ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput
}

type clickHouseKeeperInstallationSpecDefaultsPatchPtrType ClickHouseKeeperInstallationSpecDefaultsPatchArgs

func ClickHouseKeeperInstallationSpecDefaultsPatchPtr(v *ClickHouseKeeperInstallationSpecDefaultsPatchArgs) ClickHouseKeeperInstallationSpecDefaultsPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecDefaultsPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecDefaultsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecDefaultsPatchPtrType) ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecDefaultsPatchPtrType) ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput)
}

// define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
type ClickHouseKeeperInstallationSpecDefaultsPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsPatchOutput() ClickHouseKeeperInstallationSpecDefaultsPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecDefaultsPatch) *ClickHouseKeeperInstallationSpecDefaultsPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchOutput) DistributedDDL() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsPatch) *ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch {
		return v.DistributedDDL
	}).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput)
}

// define should replicas be specified by FQDN in `<host></host>`.
// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
// "no" by default
func (o ClickHouseKeeperInstallationSpecDefaultsPatchOutput) ReplicasUseFQDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsPatch) *string { return v.ReplicasUseFQDN }).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchOutput) StorageManagement() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsPatch) *ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch {
		return v.StorageManagement
	}).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchOutput) Templates() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsPatch) *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput)
}

type ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecDefaultsPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsPatch) ClickHouseKeeperInstallationSpecDefaultsPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecDefaultsPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecDefaultsPatchOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput) DistributedDDL() ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsPatch) *ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatch {
		if v == nil {
			return nil
		}
		return v.DistributedDDL
	}).(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput)
}

// define should replicas be specified by FQDN in `<host></host>`.
// In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
// "no" by default
func (o ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput) ReplicasUseFQDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReplicasUseFQDN
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput) StorageManagement() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsPatch) *ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch {
		if v == nil {
			return nil
		}
		return v.StorageManagement
	}).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput) Templates() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsPatch) *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput)
}

// default storage management options
type ClickHouseKeeperInstallationSpecDefaultsStorageManagement struct {
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner *string `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// ClickHouseKeeperInstallationSpecDefaultsStorageManagementInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs and ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsStorageManagementInput` via:
//
//	ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs{...}
type ClickHouseKeeperInstallationSpecDefaultsStorageManagementInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput
	ToClickHouseKeeperInstallationSpecDefaultsStorageManagementOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput
}

// default storage management options
type ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs struct {
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsStorageManagement)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsStorageManagementOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput)
}

func (i ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput).ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs, ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtr and ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput
	ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput
}

type clickHouseKeeperInstallationSpecDefaultsStorageManagementPtrType ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs

func ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtr(v *ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrInput {
	return (*clickHouseKeeperInstallationSpecDefaultsStorageManagementPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecDefaultsStorageManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsStorageManagement)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecDefaultsStorageManagementPtrType) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecDefaultsStorageManagementPtrType) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput)
}

// default storage management options
type ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsStorageManagement)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecDefaultsStorageManagement) *ClickHouseKeeperInstallationSpecDefaultsStorageManagement {
		return &v
	}).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsStorageManagement) *string { return v.Provisioner }).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsStorageManagement) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsStorageManagement)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput) Elem() ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsStorageManagement) ClickHouseKeeperInstallationSpecDefaultsStorageManagement {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecDefaultsStorageManagement
		return ret
	}).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsStorageManagement) *string {
		if v == nil {
			return nil
		}
		return v.Provisioner
	}).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsStorageManagement) *string {
		if v == nil {
			return nil
		}
		return v.ReclaimPolicy
	}).(pulumi.StringPtrOutput)
}

// default storage management options
type ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch struct {
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner *string `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
}

// ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs and ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs{...}
type ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput
	ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput
}

// default storage management options
type ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs struct {
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
}

func (ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput).ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs, ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtr and ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput
	ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput
}

type clickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrType ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs

func ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtr(v *ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrType) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrType) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput)
}

// default storage management options
type ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch) *ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch) *string { return v.Provisioner }).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch) ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch) *string {
		if v == nil {
			return nil
		}
		return v.Provisioner
	}).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReclaimPolicy
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseKeeperInstallationSpecDefaultsTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecDefaultsTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs and ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecDefaultsTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsTemplatesOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput
	ToClickHouseKeeperInstallationSpecDefaultsTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs) ToClickHouseKeeperInstallationSpecDefaultsTemplatesOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs) ToClickHouseKeeperInstallationSpecDefaultsTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput)
}

func (i ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput).ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs, ClickHouseKeeperInstallationSpecDefaultsTemplatesPtr and ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput
	ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput
}

type clickHouseKeeperInstallationSpecDefaultsTemplatesPtrType ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs

func ClickHouseKeeperInstallationSpecDefaultsTemplatesPtr(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs) ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrInput {
	return (*clickHouseKeeperInstallationSpecDefaultsTemplatesPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecDefaultsTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsTemplates)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecDefaultsTemplatesPtrType) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecDefaultsTemplatesPtrType) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecDefaultsTemplates) *ClickHouseKeeperInstallationSpecDefaultsTemplates {
		return &v
	}).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) *string { return v.ClusterServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) *string { return v.DataVolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) *string { return v.HostTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) *string { return v.LogVolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) *string { return v.PodTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) *string { return v.ReplicaServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) *string { return v.ServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) []string { return v.ServiceTemplates }).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) *string { return v.ShardServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplates) *string { return v.VolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) Elem() ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) ClickHouseKeeperInstallationSpecDefaultsTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecDefaultsTemplates
		return ret
	}).(ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs and ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput).ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs, ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtr and ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput
	ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput
}

type clickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrType ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs

func ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtr(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput)
}

// optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
type ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string { return v.HostTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string { return v.PodTemplate }).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string { return v.ServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) []string { return v.ServiceTemplates }).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string { return v.ShardServiceTemplate }).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string { return v.VolumeClaimTemplate }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecDefaultsTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseKeeperInstallationSpecPatch struct {
	Configuration *ClickHouseKeeperInstallationSpecConfigurationPatch `pulumi:"configuration"`
	Defaults      *ClickHouseKeeperInstallationSpecDefaultsPatch      `pulumi:"defaults"`
	// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
	// Typical use scenario - custom cluster domain in Kubernetes cluster
	// Example: %s.svc.my.test
	NamespaceDomainPattern *string                                           `pulumi:"namespaceDomainPattern"`
	Reconciling            *ClickHouseKeeperInstallationSpecReconcilingPatch `pulumi:"reconciling"`
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Stop *string `pulumi:"stop"`
	// Suspend reconciliation of resources managed by a ClickHouse Keeper.
	// Works as the following:
	//  - When `suspend` is `true` operator stops reconciling all resources.
	//  - When `suspend` is `false` or not set, operator reconciles all resources.
	Suspend *string `pulumi:"suspend"`
	// Allows to define custom taskID for CHI update and watch status of this update execution.
	// Displayed in all .status.taskID* fields.
	// By default (if not filled) every update of CHI manifest will generate random taskID
	TaskID    *string                                         `pulumi:"taskID"`
	Templates *ClickHouseKeeperInstallationSpecTemplatesPatch `pulumi:"templates"`
}

// ClickHouseKeeperInstallationSpecPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecPatchArgs and ClickHouseKeeperInstallationSpecPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecPatchArgs{...}
type ClickHouseKeeperInstallationSpecPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecPatchOutput() ClickHouseKeeperInstallationSpecPatchOutput
	ToClickHouseKeeperInstallationSpecPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecPatchOutput
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseKeeperInstallationSpecPatchArgs struct {
	Configuration ClickHouseKeeperInstallationSpecConfigurationPatchPtrInput `pulumi:"configuration"`
	Defaults      ClickHouseKeeperInstallationSpecDefaultsPatchPtrInput      `pulumi:"defaults"`
	// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
	// Typical use scenario - custom cluster domain in Kubernetes cluster
	// Example: %s.svc.my.test
	NamespaceDomainPattern pulumi.StringPtrInput                                    `pulumi:"namespaceDomainPattern"`
	Reconciling            ClickHouseKeeperInstallationSpecReconcilingPatchPtrInput `pulumi:"reconciling"`
	// Allows to stop all ClickHouse clusters defined in a CHI.
	// Works as the following:
	//  - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
	//  - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
	Stop pulumi.StringPtrInput `pulumi:"stop"`
	// Suspend reconciliation of resources managed by a ClickHouse Keeper.
	// Works as the following:
	//  - When `suspend` is `true` operator stops reconciling all resources.
	//  - When `suspend` is `false` or not set, operator reconciles all resources.
	Suspend pulumi.StringPtrInput `pulumi:"suspend"`
	// Allows to define custom taskID for CHI update and watch status of this update execution.
	// Displayed in all .status.taskID* fields.
	// By default (if not filled) every update of CHI manifest will generate random taskID
	TaskID    pulumi.StringPtrInput                                  `pulumi:"taskID"`
	Templates ClickHouseKeeperInstallationSpecTemplatesPatchPtrInput `pulumi:"templates"`
}

func (ClickHouseKeeperInstallationSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecPatchArgs) ToClickHouseKeeperInstallationSpecPatchOutput() ClickHouseKeeperInstallationSpecPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecPatchArgs) ToClickHouseKeeperInstallationSpecPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecPatchArgs) ToClickHouseKeeperInstallationSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecPatchArgs) ToClickHouseKeeperInstallationSpecPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecPatchOutput).ToClickHouseKeeperInstallationSpecPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecPatchArgs, ClickHouseKeeperInstallationSpecPatchPtr and ClickHouseKeeperInstallationSpecPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecPatchPtrOutput
	ToClickHouseKeeperInstallationSpecPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecPatchPtrOutput
}

type clickHouseKeeperInstallationSpecPatchPtrType ClickHouseKeeperInstallationSpecPatchArgs

func ClickHouseKeeperInstallationSpecPatchPtr(v *ClickHouseKeeperInstallationSpecPatchArgs) ClickHouseKeeperInstallationSpecPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecPatchPtrType) ToClickHouseKeeperInstallationSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecPatchPtrType) ToClickHouseKeeperInstallationSpecPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecPatchPtrOutput)
}

// Specification of the desired behavior of one or more ClickHouse clusters
// More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
type ClickHouseKeeperInstallationSpecPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecPatchOutput) ToClickHouseKeeperInstallationSpecPatchOutput() ClickHouseKeeperInstallationSpecPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecPatchOutput) ToClickHouseKeeperInstallationSpecPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecPatchOutput) ToClickHouseKeeperInstallationSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecPatchOutput) ToClickHouseKeeperInstallationSpecPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecPatch) *ClickHouseKeeperInstallationSpecPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPatchOutput) Configuration() ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecPatch) *ClickHouseKeeperInstallationSpecConfigurationPatch {
		return v.Configuration
	}).(ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPatchOutput) Defaults() ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecPatch) *ClickHouseKeeperInstallationSpecDefaultsPatch {
		return v.Defaults
	}).(ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput)
}

// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
// Typical use scenario - custom cluster domain in Kubernetes cluster
// Example: %s.svc.my.test
func (o ClickHouseKeeperInstallationSpecPatchOutput) NamespaceDomainPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecPatch) *string { return v.NamespaceDomainPattern }).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPatchOutput) Reconciling() ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecPatch) *ClickHouseKeeperInstallationSpecReconcilingPatch {
		return v.Reconciling
	}).(ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseKeeperInstallationSpecPatchOutput) Stop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecPatch) *string { return v.Stop }).(pulumi.StringPtrOutput)
}

// Suspend reconciliation of resources managed by a ClickHouse Keeper.
// Works as the following:
//   - When `suspend` is `true` operator stops reconciling all resources.
//   - When `suspend` is `false` or not set, operator reconciles all resources.
func (o ClickHouseKeeperInstallationSpecPatchOutput) Suspend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecPatch) *string { return v.Suspend }).(pulumi.StringPtrOutput)
}

// Allows to define custom taskID for CHI update and watch status of this update execution.
// Displayed in all .status.taskID* fields.
// By default (if not filled) every update of CHI manifest will generate random taskID
func (o ClickHouseKeeperInstallationSpecPatchOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecPatch) *string { return v.TaskID }).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPatchOutput) Templates() ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecPatch) *ClickHouseKeeperInstallationSpecTemplatesPatch {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput)
}

type ClickHouseKeeperInstallationSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) ToClickHouseKeeperInstallationSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) ToClickHouseKeeperInstallationSpecPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecPatch) ClickHouseKeeperInstallationSpecPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecPatchOutput)
}

func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) Configuration() ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecPatch) *ClickHouseKeeperInstallationSpecConfigurationPatch {
		if v == nil {
			return nil
		}
		return v.Configuration
	}).(ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) Defaults() ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecPatch) *ClickHouseKeeperInstallationSpecDefaultsPatch {
		if v == nil {
			return nil
		}
		return v.Defaults
	}).(ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput)
}

// Custom domain pattern which will be used for DNS names of `Service` or `Pod`.
// Typical use scenario - custom cluster domain in Kubernetes cluster
// Example: %s.svc.my.test
func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) NamespaceDomainPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.NamespaceDomainPattern
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) Reconciling() ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecPatch) *ClickHouseKeeperInstallationSpecReconcilingPatch {
		if v == nil {
			return nil
		}
		return v.Reconciling
	}).(ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput)
}

// Allows to stop all ClickHouse clusters defined in a CHI.
// Works as the following:
//   - When `stop` is `1` operator sets `Replicas: 0` in each StatefulSet. Thie leads to having all `Pods` and `Service` deleted. All PVCs are kept intact.
//   - When `stop` is `0` operator sets `Replicas: 1` and `Pod`s and `Service`s will created again and all retained PVCs will be attached to `Pod`s.
func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) Stop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Stop
	}).(pulumi.StringPtrOutput)
}

// Suspend reconciliation of resources managed by a ClickHouse Keeper.
// Works as the following:
//   - When `suspend` is `true` operator stops reconciling all resources.
//   - When `suspend` is `false` or not set, operator reconciles all resources.
func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) Suspend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Suspend
	}).(pulumi.StringPtrOutput)
}

// Allows to define custom taskID for CHI update and watch status of this update execution.
// Displayed in all .status.taskID* fields.
// By default (if not filled) every update of CHI manifest will generate random taskID
func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TaskID
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecPatchPtrOutput) Templates() ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecPatch) *ClickHouseKeeperInstallationSpecTemplatesPatch {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseKeeperInstallationSpecReconciling struct {
	Cleanup *ClickHouseKeeperInstallationSpecReconcilingCleanup `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout *int `pulumi:"configMapPropagationTimeout"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy *string `pulumi:"policy"`
}

// ClickHouseKeeperInstallationSpecReconcilingInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingArgs and ClickHouseKeeperInstallationSpecReconcilingOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingInput` via:
//
//	ClickHouseKeeperInstallationSpecReconcilingArgs{...}
type ClickHouseKeeperInstallationSpecReconcilingInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingOutput() ClickHouseKeeperInstallationSpecReconcilingOutput
	ToClickHouseKeeperInstallationSpecReconcilingOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingOutput
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseKeeperInstallationSpecReconcilingArgs struct {
	Cleanup ClickHouseKeeperInstallationSpecReconcilingCleanupPtrInput `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout pulumi.IntPtrInput `pulumi:"configMapPropagationTimeout"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (ClickHouseKeeperInstallationSpecReconcilingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconciling)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecReconcilingArgs) ToClickHouseKeeperInstallationSpecReconcilingOutput() ClickHouseKeeperInstallationSpecReconcilingOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingArgs) ToClickHouseKeeperInstallationSpecReconcilingOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingOutput)
}

func (i ClickHouseKeeperInstallationSpecReconcilingArgs) ToClickHouseKeeperInstallationSpecReconcilingPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingArgs) ToClickHouseKeeperInstallationSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingOutput).ToClickHouseKeeperInstallationSpecReconcilingPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecReconcilingPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingArgs, ClickHouseKeeperInstallationSpecReconcilingPtr and ClickHouseKeeperInstallationSpecReconcilingPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecReconcilingArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecReconcilingPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPtrOutput
	ToClickHouseKeeperInstallationSpecReconcilingPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingPtrOutput
}

type clickHouseKeeperInstallationSpecReconcilingPtrType ClickHouseKeeperInstallationSpecReconcilingArgs

func ClickHouseKeeperInstallationSpecReconcilingPtr(v *ClickHouseKeeperInstallationSpecReconcilingArgs) ClickHouseKeeperInstallationSpecReconcilingPtrInput {
	return (*clickHouseKeeperInstallationSpecReconcilingPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecReconcilingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconciling)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecReconcilingPtrType) ToClickHouseKeeperInstallationSpecReconcilingPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecReconcilingPtrType) ToClickHouseKeeperInstallationSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseKeeperInstallationSpecReconcilingOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconciling)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingOutput) ToClickHouseKeeperInstallationSpecReconcilingOutput() ClickHouseKeeperInstallationSpecReconcilingOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingOutput) ToClickHouseKeeperInstallationSpecReconcilingOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingOutput) ToClickHouseKeeperInstallationSpecReconcilingPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecReconcilingPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecReconcilingOutput) ToClickHouseKeeperInstallationSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecReconciling) *ClickHouseKeeperInstallationSpecReconciling {
		return &v
	}).(ClickHouseKeeperInstallationSpecReconcilingPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingOutput) Cleanup() ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconciling) *ClickHouseKeeperInstallationSpecReconcilingCleanup {
		return v.Cleanup
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseKeeperInstallationSpecReconcilingOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconciling) *int { return v.ConfigMapPropagationTimeout }).(pulumi.IntPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseKeeperInstallationSpecReconcilingOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconciling) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecReconcilingPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconciling)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingPtrOutput) Elem() ClickHouseKeeperInstallationSpecReconcilingOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconciling) ClickHouseKeeperInstallationSpecReconciling {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecReconciling
		return ret
	}).(ClickHouseKeeperInstallationSpecReconcilingOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingPtrOutput) Cleanup() ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconciling) *ClickHouseKeeperInstallationSpecReconcilingCleanup {
		if v == nil {
			return nil
		}
		return v.Cleanup
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseKeeperInstallationSpecReconcilingPtrOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconciling) *int {
		if v == nil {
			return nil
		}
		return v.ConfigMapPropagationTimeout
	}).(pulumi.IntPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseKeeperInstallationSpecReconcilingPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconciling) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseKeeperInstallationSpecReconcilingCleanup struct {
	ReconcileFailedObjects *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects `pulumi:"reconcileFailedObjects"`
	UnknownObjects         *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects         `pulumi:"unknownObjects"`
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupArgs and ClickHouseKeeperInstallationSpecReconcilingCleanupOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupInput` via:
//
//	ClickHouseKeeperInstallationSpecReconcilingCleanupArgs{...}
type ClickHouseKeeperInstallationSpecReconcilingCleanupInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupOutput
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseKeeperInstallationSpecReconcilingCleanupArgs struct {
	ReconcileFailedObjects ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput `pulumi:"reconcileFailedObjects"`
	UnknownObjects         ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrInput         `pulumi:"unknownObjects"`
}

func (ClickHouseKeeperInstallationSpecReconcilingCleanupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanup)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupOutput)
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupOutput).ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupArgs, ClickHouseKeeperInstallationSpecReconcilingCleanupPtr and ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecReconcilingCleanupArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecReconcilingCleanupPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput
}

type clickHouseKeeperInstallationSpecReconcilingCleanupPtrType ClickHouseKeeperInstallationSpecReconcilingCleanupArgs

func ClickHouseKeeperInstallationSpecReconcilingCleanupPtr(v *ClickHouseKeeperInstallationSpecReconcilingCleanupArgs) ClickHouseKeeperInstallationSpecReconcilingCleanupPtrInput {
	return (*clickHouseKeeperInstallationSpecReconcilingCleanupPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecReconcilingCleanupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanup)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseKeeperInstallationSpecReconcilingCleanupOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanup)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecReconcilingCleanup) *ClickHouseKeeperInstallationSpecReconcilingCleanup {
		return &v
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupOutput) ReconcileFailedObjects() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanup) *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects {
		return v.ReconcileFailedObjects
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupOutput) UnknownObjects() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanup) *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects {
		return v.UnknownObjects
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

type ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanup)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput) Elem() ClickHouseKeeperInstallationSpecReconcilingCleanupOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanup) ClickHouseKeeperInstallationSpecReconcilingCleanup {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecReconcilingCleanup
		return ret
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput) ReconcileFailedObjects() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanup) *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects {
		if v == nil {
			return nil
		}
		return v.ReconcileFailedObjects
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput) UnknownObjects() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanup) *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects {
		if v == nil {
			return nil
		}
		return v.UnknownObjects
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseKeeperInstallationSpecReconcilingCleanupPatch struct {
	ReconcileFailedObjects *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch `pulumi:"reconcileFailedObjects"`
	UnknownObjects         *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch         `pulumi:"unknownObjects"`
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs and ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs{...}
type ClickHouseKeeperInstallationSpecReconcilingCleanupPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs struct {
	ReconcileFailedObjects ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrInput `pulumi:"reconcileFailedObjects"`
	UnknownObjects         ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrInput         `pulumi:"unknownObjects"`
}

func (ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput).ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs, ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtr and ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput
}

type clickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrType ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs

func ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtr(v *ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs) ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput)
}

// Optional, defines behavior for cleanup Kubernetes resources during reconcile cycle
type ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecReconcilingCleanupPatch) *ClickHouseKeeperInstallationSpecReconcilingCleanupPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput) ReconcileFailedObjects() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupPatch) *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch {
		return v.ReconcileFailedObjects
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput) UnknownObjects() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupPatch) *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch {
		return v.UnknownObjects
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput)
}

type ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupPatch) ClickHouseKeeperInstallationSpecReconcilingCleanupPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecReconcilingCleanupPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput) ReconcileFailedObjects() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupPatch) *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch {
		if v == nil {
			return nil
		}
		return v.ReconcileFailedObjects
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput) UnknownObjects() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupPatch) *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch {
		if v == nil {
			return nil
		}
		return v.UnknownObjects
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service *string `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs and ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsInput` via:
//
//	ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs{...}
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput)
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput).ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs, ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtr and ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput
}

type clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs

func ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtr(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput {
	return (*clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects {
		return &v
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) Elem() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects
		return ret
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service *string `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs and ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs{...}
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs struct {
	// Behavior policy for failed ConfigMap, `Retain` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for failed PVC, `Retain` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for failed Service, `Retain` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for failed StatefulSet, `Retain` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput).ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs, ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtr and ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput
}

type clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrType ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs

func ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtr(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput)
}

// Describes what clickhouse-operator should do with Kubernetes resources which are failed during reconcile.
// Default behavior is `Retain`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) *string {
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) *string {
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) *string {
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) *string {
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput)
}

// Behavior policy for failed ConfigMap, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed PVC, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed Service, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for failed StatefulSet, `Retain` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatch) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service *string `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs and ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsInput` via:
//
//	ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs{...}
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput)
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput).ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs, ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtr and ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput
}

type clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrType ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs

func ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtr(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrInput {
	return (*clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects {
		return &v
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) *string { return v.ConfigMap }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) *string { return v.StatefulSet }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) Elem() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects
		return ret
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjects) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap *string `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc *string `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service *string `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet *string `pulumi:"statefulSet"`
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs and ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs{...}
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs struct {
	// Behavior policy for unknown ConfigMap, `Delete` by default
	ConfigMap pulumi.StringPtrInput `pulumi:"configMap"`
	// Behavior policy for unknown PVC, `Delete` by default
	Pvc pulumi.StringPtrInput `pulumi:"pvc"`
	// Behavior policy for unknown Service, `Delete` by default
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Behavior policy for unknown StatefulSet, `Delete` by default
	StatefulSet pulumi.StringPtrInput `pulumi:"statefulSet"`
}

func (ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput).ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs, ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtr and ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput
	ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput
}

type clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrType ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs

func ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtr(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrType) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput)
}

// Describes what clickhouse-operator should do with found Kubernetes resources which should be managed by clickhouse-operator,
// but do not have `ownerReference` to any currently managed `ClickHouseInstallation` resource.
// Default behavior is `Delete`"
type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) *string {
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) *string { return v.Pvc }).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) *string {
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) *string {
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput)
}

// Behavior policy for unknown ConfigMap, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput) ConfigMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown PVC, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput) Pvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Pvc
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown Service, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Behavior policy for unknown StatefulSet, `Delete` by default
func (o ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput) StatefulSet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatch) *string {
		if v == nil {
			return nil
		}
		return v.StatefulSet
	}).(pulumi.StringPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseKeeperInstallationSpecReconcilingPatch struct {
	Cleanup *ClickHouseKeeperInstallationSpecReconcilingCleanupPatch `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout *int `pulumi:"configMapPropagationTimeout"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy *string `pulumi:"policy"`
}

// ClickHouseKeeperInstallationSpecReconcilingPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingPatchArgs and ClickHouseKeeperInstallationSpecReconcilingPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecReconcilingPatchArgs{...}
type ClickHouseKeeperInstallationSpecReconcilingPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingPatchOutput() ClickHouseKeeperInstallationSpecReconcilingPatchOutput
	ToClickHouseKeeperInstallationSpecReconcilingPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingPatchOutput
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseKeeperInstallationSpecReconcilingPatchArgs struct {
	Cleanup ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrInput `pulumi:"cleanup"`
	// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
	// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
	ConfigMapPropagationTimeout pulumi.IntPtrInput `pulumi:"configMapPropagationTimeout"`
	// DISCUSSED TO BE DEPRECATED
	// Syntax sugar
	// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
	// Possible values:
	//  - wait - should wait to exclude host, complete queries and include host back into the cluster
	//  - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (ClickHouseKeeperInstallationSpecReconcilingPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecReconcilingPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingPatchOutput() ClickHouseKeeperInstallationSpecReconcilingPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecReconcilingPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecReconcilingPatchArgs) ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingPatchOutput).ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecReconcilingPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecReconcilingPatchArgs, ClickHouseKeeperInstallationSpecReconcilingPatchPtr and ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecReconcilingPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecReconcilingPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecReconcilingPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput
	ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput
}

type clickHouseKeeperInstallationSpecReconcilingPatchPtrType ClickHouseKeeperInstallationSpecReconcilingPatchArgs

func ClickHouseKeeperInstallationSpecReconcilingPatchPtr(v *ClickHouseKeeperInstallationSpecReconcilingPatchArgs) ClickHouseKeeperInstallationSpecReconcilingPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecReconcilingPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecReconcilingPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecReconcilingPatchPtrType) ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecReconcilingPatchPtrType) ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput)
}

// Optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
type ClickHouseKeeperInstallationSpecReconcilingPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingPatchOutput() ClickHouseKeeperInstallationSpecReconcilingPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecReconcilingPatchOutput) ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecReconcilingPatch) *ClickHouseKeeperInstallationSpecReconcilingPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingPatchOutput) Cleanup() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingPatch) *ClickHouseKeeperInstallationSpecReconcilingCleanupPatch {
		return v.Cleanup
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseKeeperInstallationSpecReconcilingPatchOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingPatch) *int { return v.ConfigMapPropagationTimeout }).(pulumi.IntPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseKeeperInstallationSpecReconcilingPatchOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecReconcilingPatch) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecReconcilingPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput() ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput) ToClickHouseKeeperInstallationSpecReconcilingPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecReconcilingPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingPatch) ClickHouseKeeperInstallationSpecReconcilingPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecReconcilingPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecReconcilingPatchOutput)
}

func (o ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput) Cleanup() ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingPatch) *ClickHouseKeeperInstallationSpecReconcilingCleanupPatch {
		if v == nil {
			return nil
		}
		return v.Cleanup
	}).(ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput)
}

// Timeout in seconds for `clickhouse-operator` to wait for modified `ConfigMap` to propagate into the `Pod`
// More details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
func (o ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput) ConfigMapPropagationTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingPatch) *int {
		if v == nil {
			return nil
		}
		return v.ConfigMapPropagationTimeout
	}).(pulumi.IntPtrOutput)
}

// DISCUSSED TO BE DEPRECATED
// Syntax sugar
// Overrides all three 'reconcile.host.wait.{exclude, queries, include}' values from the operator's config
// Possible values:
//   - wait - should wait to exclude host, complete queries and include host back into the cluster
//   - nowait - should NOT wait to exclude host, complete queries and include host back into the cluster
func (o ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecReconcilingPatch) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseKeeperInstallationSpecTemplates struct {
	// hostTemplate will use during apply to generate `clickhose-server` config files
	HostTemplates []ClickHouseKeeperInstallationSpecTemplatesHostTemplates `pulumi:"hostTemplates"`
	// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
	// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
	PodTemplates []ClickHouseKeeperInstallationSpecTemplatesPodTemplates `pulumi:"podTemplates"`
	// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
	ServiceTemplates []ClickHouseKeeperInstallationSpecTemplatesServiceTemplates `pulumi:"serviceTemplates"`
	// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
	VolumeClaimTemplates []ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates `pulumi:"volumeClaimTemplates"`
}

// ClickHouseKeeperInstallationSpecTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesArgs and ClickHouseKeeperInstallationSpecTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesOutput
	ToClickHouseKeeperInstallationSpecTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesOutput
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseKeeperInstallationSpecTemplatesArgs struct {
	// hostTemplate will use during apply to generate `clickhose-server` config files
	HostTemplates ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayInput `pulumi:"hostTemplates"`
	// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
	// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
	PodTemplates ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayInput `pulumi:"podTemplates"`
	// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
	ServiceTemplates ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayInput `pulumi:"serviceTemplates"`
	// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
	VolumeClaimTemplates ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayInput `pulumi:"volumeClaimTemplates"`
}

func (ClickHouseKeeperInstallationSpecTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesOutput)
}

func (i ClickHouseKeeperInstallationSpecTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesOutput).ToClickHouseKeeperInstallationSpecTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecTemplatesPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesArgs, ClickHouseKeeperInstallationSpecTemplatesPtr and ClickHouseKeeperInstallationSpecTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPtrOutput
	ToClickHouseKeeperInstallationSpecTemplatesPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPtrOutput
}

type clickHouseKeeperInstallationSpecTemplatesPtrType ClickHouseKeeperInstallationSpecTemplatesArgs

func ClickHouseKeeperInstallationSpecTemplatesPtr(v *ClickHouseKeeperInstallationSpecTemplatesArgs) ClickHouseKeeperInstallationSpecTemplatesPtrInput {
	return (*clickHouseKeeperInstallationSpecTemplatesPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplates)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecTemplatesPtrType) ToClickHouseKeeperInstallationSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecTemplatesPtrType) ToClickHouseKeeperInstallationSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseKeeperInstallationSpecTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecTemplates) *ClickHouseKeeperInstallationSpecTemplates {
		return &v
	}).(ClickHouseKeeperInstallationSpecTemplatesPtrOutput)
}

// hostTemplate will use during apply to generate `clickhose-server` config files
func (o ClickHouseKeeperInstallationSpecTemplatesOutput) HostTemplates() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplates) []ClickHouseKeeperInstallationSpecTemplatesHostTemplates {
		return v.HostTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput)
}

// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
func (o ClickHouseKeeperInstallationSpecTemplatesOutput) PodTemplates() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplates) []ClickHouseKeeperInstallationSpecTemplatesPodTemplates {
		return v.PodTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput)
}

// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
func (o ClickHouseKeeperInstallationSpecTemplatesOutput) ServiceTemplates() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplates) []ClickHouseKeeperInstallationSpecTemplatesServiceTemplates {
		return v.ServiceTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput)
}

// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
func (o ClickHouseKeeperInstallationSpecTemplatesOutput) VolumeClaimTemplates() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplates) []ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates {
		return v.VolumeClaimTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPtrOutput) Elem() ClickHouseKeeperInstallationSpecTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplates) ClickHouseKeeperInstallationSpecTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecTemplates
		return ret
	}).(ClickHouseKeeperInstallationSpecTemplatesOutput)
}

// hostTemplate will use during apply to generate `clickhose-server` config files
func (o ClickHouseKeeperInstallationSpecTemplatesPtrOutput) HostTemplates() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplates) []ClickHouseKeeperInstallationSpecTemplatesHostTemplates {
		if v == nil {
			return nil
		}
		return v.HostTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput)
}

// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
func (o ClickHouseKeeperInstallationSpecTemplatesPtrOutput) PodTemplates() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplates) []ClickHouseKeeperInstallationSpecTemplatesPodTemplates {
		if v == nil {
			return nil
		}
		return v.PodTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput)
}

// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
func (o ClickHouseKeeperInstallationSpecTemplatesPtrOutput) ServiceTemplates() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplates) []ClickHouseKeeperInstallationSpecTemplatesServiceTemplates {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput)
}

// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
func (o ClickHouseKeeperInstallationSpecTemplatesPtrOutput) VolumeClaimTemplates() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplates) []ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplates struct {
	// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
	Name *string `pulumi:"name"`
	// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
	PortDistribution []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution `pulumi:"portDistribution"`
	Spec             *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec              `pulumi:"spec"`
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArgs and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArgs struct {
	// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
	PortDistribution ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput `pulumi:"portDistribution"`
	Spec             ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrInput               `pulumi:"spec"`
}

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArray and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArray{ ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArray []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesInput

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesHostTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArray) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArray) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput {
	return o
}

// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput) PortDistribution() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplates) []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution {
		return v.PortDistribution
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput) Spec() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplates) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec {
		return v.Spec
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesHostTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesHostTemplates {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesHostTemplates)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch struct {
	// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
	Name *string `pulumi:"name"`
	// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
	PortDistribution []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch `pulumi:"portDistribution"`
	Spec             *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch              `pulumi:"spec"`
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArgs and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArgs struct {
	// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
	PortDistribution ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayInput `pulumi:"portDistribution"`
	Spec             ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrInput               `pulumi:"spec"`
}

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArray and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArray{ ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArray []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchInput

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArray) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArray) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput {
	return o
}

// template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput) PortDistribution() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch {
		return v.PortDistribution
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput) Spec() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch {
		return v.Spec
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution struct {
	// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
	Type *string `pulumi:"type"`
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArgs and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArgs struct {
	// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArray and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArray{ ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArray []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionInput

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArray) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArray) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return o
}

// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistribution)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch struct {
	// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
	Type *string `pulumi:"type"`
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArgs and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArgs struct {
	// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArray and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArray{ ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArray []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchInput

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArray) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArray) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput {
	return o
}

// type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch) *string {
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatch)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec struct {
	// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	Files map[string]interface{} `pulumi:"files"`
	// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
	Name     *string `pulumi:"name"`
	RaftPort *int    `pulumi:"raftPort"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  map[string]interface{}                                               `pulumi:"settings"`
	Templates *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates `pulumi:"templates"`
	ZkPort    *int                                                                 `pulumi:"zkPort"`
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs struct {
	// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	Files pulumi.MapInput `pulumi:"files"`
	// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	RaftPort pulumi.IntPtrInput    `pulumi:"raftPort"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  pulumi.MapInput                                                             `pulumi:"settings"`
	Templates ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput `pulumi:"templates"`
	ZkPort    pulumi.IntPtrInput                                                          `pulumi:"zkPort"`
}

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput)
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput).ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs, ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtr and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput
}

type clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrType ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs

func ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtr(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrInput {
	return (*clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrType) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrType) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec {
		return &v
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput)
}

// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) RaftPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) *int { return v.RaftPort }).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) Templates() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput) ZkPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) *int { return v.ZkPort }).(pulumi.IntPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Elem() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec
		return ret
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput)
}

// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.MapOutput)
}

// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) RaftPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.RaftPort
	}).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) Templates() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput) ZkPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpec) *int {
		if v == nil {
			return nil
		}
		return v.ZkPort
	}).(pulumi.IntPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch struct {
	// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	Files map[string]interface{} `pulumi:"files"`
	// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
	Name     *string `pulumi:"name"`
	RaftPort *int    `pulumi:"raftPort"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  map[string]interface{}                                                    `pulumi:"settings"`
	Templates *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch `pulumi:"templates"`
	ZkPort    *int                                                                      `pulumi:"zkPort"`
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs struct {
	// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
	Files pulumi.MapInput `pulumi:"files"`
	// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	RaftPort pulumi.IntPtrInput    `pulumi:"raftPort"`
	// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
	// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
	Settings  pulumi.MapInput                                                                  `pulumi:"settings"`
	Templates ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrInput `pulumi:"templates"`
	ZkPort    pulumi.IntPtrInput                                                               `pulumi:"zkPort"`
}

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput).ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs, ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtr and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput
}

type clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrType ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs

func ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtr(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrType) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrType) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput)
}

// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) map[string]interface{} {
		return v.Files
	}).(pulumi.MapOutput)
}

// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) RaftPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) *int { return v.RaftPort }).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) map[string]interface{} {
		return v.Settings
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) Templates() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch {
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput) ZkPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) *int { return v.ZkPort }).(pulumi.IntPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput)
}

// optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) Files() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Files
	}).(pulumi.MapOutput)
}

// by default, hostname will generate, but this allows define custom name for each `clickhouse-server`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) RaftPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.RaftPort
	}).(pulumi.IntPtrOutput)
}

// optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
// More details: https://clickhouse.tech/docs/en/operations/settings/settings/
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) Settings() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) Templates() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch {
		if v == nil {
			return nil
		}
		return v.Templates
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput) ZkPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.ZkPort
	}).(pulumi.IntPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput)
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput).ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs, ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtr and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput
}

type clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs

func ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtr(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput {
	return (*clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrType) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates {
		return &v
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) Elem() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates
		return ret
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplates) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate *string `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate *string `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate *string `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate *string `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate *string `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate *string `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate *string `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates []string `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate *string `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate *string `pulumi:"volumeClaimTemplate"`
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs struct {
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
	ClusterServiceTemplate pulumi.StringPtrInput `pulumi:"clusterServiceTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	DataVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"dataVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
	HostTemplate pulumi.StringPtrInput `pulumi:"hostTemplate"`
	// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	LogVolumeClaimTemplate pulumi.StringPtrInput `pulumi:"logVolumeClaimTemplate"`
	// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	PodTemplate pulumi.StringPtrInput `pulumi:"podTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
	ReplicaServiceTemplate pulumi.StringPtrInput `pulumi:"replicaServiceTemplate"`
	// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplate pulumi.StringPtrInput `pulumi:"serviceTemplate"`
	// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
	ServiceTemplates pulumi.StringArrayInput `pulumi:"serviceTemplates"`
	// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
	ShardServiceTemplate pulumi.StringPtrInput `pulumi:"shardServiceTemplate"`
	// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
	VolumeClaimTemplate pulumi.StringPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput).ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs, ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtr and ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput
	ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput
}

type clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrType ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs

func ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtr(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput)
}

// be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) []string {
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) ClusterServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClusterServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) DataVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.DataVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) HostTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.HostTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) LogVolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.LogVolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) PodTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) ReplicaServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates. used for customization of the `Service` resource, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) ServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, template names from chi.spec.templates.serviceTemplates. used for customization of the `Service` resources, created by `clickhouse-operator` to cover all clusters in whole `chi` resource
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) ServiceTemplates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) []string {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(pulumi.StringArrayOutput)
}

// optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) ShardServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.ShardServiceTemplate
	}).(pulumi.StringPtrOutput)
}

// optional, alias for dataVolumeClaimTemplate, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
func (o ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput) VolumeClaimTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(pulumi.StringPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseKeeperInstallationSpecTemplatesPatch struct {
	// hostTemplate will use during apply to generate `clickhose-server` config files
	HostTemplates []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch `pulumi:"hostTemplates"`
	// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
	// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
	PodTemplates []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch `pulumi:"podTemplates"`
	// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
	ServiceTemplates []ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch `pulumi:"serviceTemplates"`
	// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
	VolumeClaimTemplates []ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch `pulumi:"volumeClaimTemplates"`
}

// ClickHouseKeeperInstallationSpecTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPatchArgs and ClickHouseKeeperInstallationSpecTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPatchOutput
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseKeeperInstallationSpecTemplatesPatchArgs struct {
	// hostTemplate will use during apply to generate `clickhose-server` config files
	HostTemplates ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayInput `pulumi:"hostTemplates"`
	// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
	// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
	PodTemplates ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayInput `pulumi:"podTemplates"`
	// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
	ServiceTemplates ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayInput `pulumi:"serviceTemplates"`
	// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
	VolumeClaimTemplates ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayInput `pulumi:"volumeClaimTemplates"`
}

func (ClickHouseKeeperInstallationSpecTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPatchOutput)
}

func (i ClickHouseKeeperInstallationSpecTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPatchOutput).ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecTemplatesPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPatchArgs, ClickHouseKeeperInstallationSpecTemplatesPatchPtr and ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecTemplatesPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecTemplatesPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput
	ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput
}

type clickHouseKeeperInstallationSpecTemplatesPatchPtrType ClickHouseKeeperInstallationSpecTemplatesPatchArgs

func ClickHouseKeeperInstallationSpecTemplatesPatchPtr(v *ClickHouseKeeperInstallationSpecTemplatesPatchArgs) ClickHouseKeeperInstallationSpecTemplatesPatchPtrInput {
	return (*clickHouseKeeperInstallationSpecTemplatesPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecTemplatesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecTemplatesPatchPtrType) ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput)
}

// allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
type ClickHouseKeeperInstallationSpecTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecTemplatesPatch) *ClickHouseKeeperInstallationSpecTemplatesPatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput)
}

// hostTemplate will use during apply to generate `clickhose-server` config files
func (o ClickHouseKeeperInstallationSpecTemplatesPatchOutput) HostTemplates() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch {
		return v.HostTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput)
}

// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
func (o ClickHouseKeeperInstallationSpecTemplatesPatchOutput) PodTemplates() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch {
		return v.PodTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput)
}

// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
func (o ClickHouseKeeperInstallationSpecTemplatesPatchOutput) ServiceTemplates() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch {
		return v.ServiceTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput)
}

// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
func (o ClickHouseKeeperInstallationSpecTemplatesPatchOutput) VolumeClaimTemplates() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch {
		return v.VolumeClaimTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecTemplatesPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPatch) ClickHouseKeeperInstallationSpecTemplatesPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecTemplatesPatch
		return ret
	}).(ClickHouseKeeperInstallationSpecTemplatesPatchOutput)
}

// hostTemplate will use during apply to generate `clickhose-server` config files
func (o ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput) HostTemplates() ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatch {
		if v == nil {
			return nil
		}
		return v.HostTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput)
}

// podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
// More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
func (o ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput) PodTemplates() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch {
		if v == nil {
			return nil
		}
		return v.PodTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput)
}

// allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
func (o ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput) ServiceTemplates() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch {
		if v == nil {
			return nil
		}
		return v.ServiceTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput)
}

// allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
func (o ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput) VolumeClaimTemplates() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplates
	}).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplates struct {
	// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Distribution *string `pulumi:"distribution"`
	// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
	GenerateName *string `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Pod
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
	Name *string `pulumi:"name"`
	// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
	PodDistribution []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution `pulumi:"podDistribution"`
	// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
	Spec map[string]interface{}                                     `pulumi:"spec"`
	Zone *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone `pulumi:"zone"`
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArgs and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArgs struct {
	// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Distribution pulumi.StringPtrInput `pulumi:"distribution"`
	// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Pod
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
	PodDistribution ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput `pulumi:"podDistribution"`
	// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
	Spec pulumi.MapInput                                                   `pulumi:"spec"`
	Zone ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrInput `pulumi:"zone"`
}

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArray and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArray{ ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArray []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesInput

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesPodTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArray) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArray) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput {
	return o
}

// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) Distribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplates) *string { return v.Distribution }).(pulumi.StringPtrOutput)
}

// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplates) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// allows pass standard object's metadata from template to Pod
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplates) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) PodDistribution() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplates) []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution {
		return v.PodDistribution
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput)
}

// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplates) map[string]interface{} { return v.Spec }).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput) Zone() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplates) *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone {
		return v.Zone
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesPodTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesPodTemplates {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesPodTemplates)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch struct {
	// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Distribution *string `pulumi:"distribution"`
	// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
	GenerateName *string `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Pod
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
	Name *string `pulumi:"name"`
	// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
	PodDistribution []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch `pulumi:"podDistribution"`
	// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
	Spec map[string]interface{}                                          `pulumi:"spec"`
	Zone *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch `pulumi:"zone"`
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArgs and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArgs struct {
	// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
	Distribution pulumi.StringPtrInput `pulumi:"distribution"`
	// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Pod
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
	PodDistribution ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayInput `pulumi:"podDistribution"`
	// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
	Spec pulumi.MapInput                                                        `pulumi:"spec"`
	Zone ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrInput `pulumi:"zone"`
}

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArray and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArray{ ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArray []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchInput

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArray) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArray) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput {
	return o
}

// DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) Distribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch) *string { return v.Distribution }).(pulumi.StringPtrOutput)
}

// allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about available template variables
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// allows pass standard object's metadata from template to Pod
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) PodDistribution() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch) []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch {
		return v.PodDistribution
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput)
}

// allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch) map[string]interface{} {
		return v.Spec
	}).(pulumi.MapOutput)
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput) Zone() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch) *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch {
		return v.Zone
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatch)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution struct {
	// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
	Number *int `pulumi:"number"`
	// scope for apply each podDistribution
	Scope *string `pulumi:"scope"`
	// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
	// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
	TopologyKey *string `pulumi:"topologyKey"`
	// you can define multiple affinity policy types
	Type *string `pulumi:"type"`
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArgs and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArgs struct {
	// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
	Number pulumi.IntPtrInput `pulumi:"number"`
	// scope for apply each podDistribution
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
	// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// you can define multiple affinity policy types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArray and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArray{ ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArray []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionInput

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArray) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArray) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return o
}

// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// scope for apply each podDistribution
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

// you can define multiple affinity policy types
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistribution)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch struct {
	// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
	Number *int `pulumi:"number"`
	// scope for apply each podDistribution
	Scope *string `pulumi:"scope"`
	// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
	// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
	TopologyKey *string `pulumi:"topologyKey"`
	// you can define multiple affinity policy types
	Type *string `pulumi:"type"`
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArgs and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArgs struct {
	// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
	Number pulumi.IntPtrInput `pulumi:"number"`
	// scope for apply each podDistribution
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
	// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// you can define multiple affinity policy types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArray and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArray{ ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArray []ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchInput

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArray) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArray) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput {
	return o
}

// define, how much ClickHouse Pods could be inside selected scope with selected distribution type
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch) *int {
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// scope for apply each podDistribution
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch) *string {
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`,
// more info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity"
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch) *string {
		return v.TopologyKey
	}).(pulumi.StringPtrOutput)
}

// you can define multiple affinity policy types
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch) *string {
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatch)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone struct {
	// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
	Key *string `pulumi:"key"`
	// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
	Values []string `pulumi:"values"`
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs struct {
	// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
	Key pulumi.StringPtrInput `pulumi:"key"`
	// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput)
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput).ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs, ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtr and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput
}

type clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrType ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs

func ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtr(v *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrInput {
	return (*clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrType)(v)
}

func (*clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrType) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrType) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone) *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone {
		return &v
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput) Elem() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone
		return ret
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZone) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch struct {
	// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
	Key *string `pulumi:"key"`
	// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
	Values []string `pulumi:"values"`
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs struct {
	// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
	Key pulumi.StringPtrInput `pulumi:"key"`
	// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput)
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput).ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs, ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtr and ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput
	ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput
}

type clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrType ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs

func ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtr(v *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrInput {
	return (*clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrType)(v)
}

func (*clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrType) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrType) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput)
}

// allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput {
	return o.ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch) *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch {
		return &v
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput) ToClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput) Elem() ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch) ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch
		return ret
	}).(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// optional, if defined, allows select kubernetes nodes by label with `value` in `values`
func (o ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatch) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplates struct {
	// allows define format for generated `Service` name,
	// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
	// for details about available template variables"
	GenerateName *string `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Service
	// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside
	// chi-level `chi.spec.defaults.templates.serviceTemplate`
	// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
	Name *string `pulumi:"name"`
	// describe behavior of generated Service
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Spec map[string]interface{} `pulumi:"spec"`
}

// ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArgs and ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput
	ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArgs struct {
	// allows define format for generated `Service` name,
	// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
	// for details about available template variables"
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Service
	// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside
	// chi-level `chi.spec.defaults.templates.serviceTemplate`
	// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// describe behavior of generated Service
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Spec pulumi.MapInput `pulumi:"spec"`
}

func (ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArray and ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArray{ ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArray []ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesInput

func (ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArray) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArray) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput {
	return o
}

// allows define format for generated `Service` name,
// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
// for details about available template variables"
func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesServiceTemplates) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// allows pass standard object's metadata from template to Service
// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesServiceTemplates) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside
// chi-level `chi.spec.defaults.templates.serviceTemplate`
// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesServiceTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// describe behavior of generated Service
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesServiceTemplates) map[string]interface{} {
		return v.Spec
	}).(pulumi.MapOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesServiceTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesServiceTemplates {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesServiceTemplates)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch struct {
	// allows define format for generated `Service` name,
	// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
	// for details about available template variables"
	GenerateName *string `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Service
	// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside
	// chi-level `chi.spec.defaults.templates.serviceTemplate`
	// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
	Name *string `pulumi:"name"`
	// describe behavior of generated Service
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Spec map[string]interface{} `pulumi:"spec"`
}

// ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArgs and ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArgs struct {
	// allows define format for generated `Service` name,
	// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
	// for details about available template variables"
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// allows pass standard object's metadata from template to Service
	// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside
	// chi-level `chi.spec.defaults.templates.serviceTemplate`
	// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// describe behavior of generated Service
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Spec pulumi.MapInput `pulumi:"spec"`
}

func (ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArray and ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArray{ ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArray []ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchInput

func (ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArray) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArray) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput {
	return o
}

// allows define format for generated `Service` name,
// look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates
// for details about available template variables"
func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// allows pass standard object's metadata from template to Service
// Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside
// chi-level `chi.spec.defaults.templates.serviceTemplate`
// cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// describe behavior of generated Service
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch) map[string]interface{} {
		return v.Spec
	}).(pulumi.MapOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatch)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates struct {
	// allows to pass standard object's metadata from template to PVC
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside
	// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
	// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
	Name *string `pulumi:"name"`
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner *string `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
	// allows define all aspects of `PVC` resource
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
	Spec map[string]interface{} `pulumi:"spec"`
}

// ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArgs and ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput
	ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArgs struct {
	// allows to pass standard object's metadata from template to PVC
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside
	// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
	// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
	// allows define all aspects of `PVC` resource
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
	Spec pulumi.MapInput `pulumi:"spec"`
}

func (ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArgs) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArray and ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArray{ ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArray []ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesInput

func (ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArray) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArray) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return o
}

// allows to pass standard object's metadata from template to PVC
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside
// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates) *string { return v.Provisioner }).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates) *string { return v.ReclaimPolicy }).(pulumi.StringPtrOutput)
}

// allows define all aspects of `PVC` resource
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates) map[string]interface{} {
		return v.Spec
	}).(pulumi.MapOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplates)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch struct {
	// allows to pass standard object's metadata from template to PVC
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata map[string]interface{} `pulumi:"metadata"`
	// template name, could use to link inside
	// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
	// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
	Name *string `pulumi:"name"`
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner *string `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy *string `pulumi:"reclaimPolicy"`
	// allows define all aspects of `PVC` resource
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
	Spec map[string]interface{} `pulumi:"spec"`
}

// ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArgs and ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArgs{...}
type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput
	ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArgs struct {
	// allows to pass standard object's metadata from template to PVC
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata pulumi.MapInput `pulumi:"metadata"`
	// template name, could use to link inside
	// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
	// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
	// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
	// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
	Name pulumi.StringPtrInput `pulumi:"name"`
	// defines `PVC` provisioner - be it StatefulSet or the Operator
	Provisioner pulumi.StringPtrInput `pulumi:"provisioner"`
	// defines behavior of `PVC` deletion.
	// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
	ReclaimPolicy pulumi.StringPtrInput `pulumi:"reclaimPolicy"`
	// allows define all aspects of `PVC` resource
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
	Spec pulumi.MapInput `pulumi:"spec"`
}

func (ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArgs) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput)
}

// ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayInput is an input type that accepts ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArray and ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayInput` via:
//
//	ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArray{ ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArgs{...} }
type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput
	ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutputWithContext(context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArray []ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchInput

func (ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArray) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput {
	return i.ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArray) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput {
	return o
}

// allows to pass standard object's metadata from template to PVC
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput) Metadata() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch) map[string]interface{} {
		return v.Metadata
	}).(pulumi.MapOutput)
}

// template name, could use to link inside
// top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
// cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
// shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
// replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// defines `PVC` provisioner - be it StatefulSet or the Operator
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput) Provisioner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch) *string {
		return v.Provisioner
	}).(pulumi.StringPtrOutput)
}

// defines behavior of `PVC` deletion.
// `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput) ReclaimPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch) *string {
		return v.ReclaimPolicy
	}).(pulumi.StringPtrOutput)
}

// allows define all aspects of `PVC` resource
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput) Spec() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch) map[string]interface{} {
		return v.Spec
	}).(pulumi.MapOutput)
}

type ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput() ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput) ToClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput {
	return o
}

func (o ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch {
		return vs[0].([]ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatch)[vs[1].(int)]
	}).(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput)
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseKeeperInstallationStatus struct {
	// Action
	Action *string `pulumi:"action"`
	// Actions
	Actions []string `pulumi:"actions"`
	// Operator git commit SHA
	ChopCommit *string `pulumi:"chop-commit"`
	// Operator build date
	ChopDate *string `pulumi:"chop-date"`
	// IP address of the operator's pod which managed this resource
	ChopIp *string `pulumi:"chop-ip"`
	// Operator version
	ChopVersion *string `pulumi:"chop-version"`
	// Clusters count
	Clusters *int `pulumi:"clusters"`
	// Endpoint
	Endpoint *string `pulumi:"endpoint"`
	// All endpoints
	Endpoints []string `pulumi:"endpoints"`
	// Last error
	Error *string `pulumi:"error"`
	// Errors
	Errors []string `pulumi:"errors"`
	// Pods FQDNs
	Fqdns []string `pulumi:"fqdns"`
	// Generation
	Generation *int `pulumi:"generation"`
	// Hosts count
	Hosts *int `pulumi:"hosts"`
	// Added Hosts count
	HostsAdded *int `pulumi:"hostsAdded"`
	// Completed Hosts count
	HostsCompleted *int `pulumi:"hostsCompleted"`
	// About to delete Hosts count
	HostsDelete *int `pulumi:"hostsDelete"`
	// Deleted Hosts count
	HostsDeleted *int `pulumi:"hostsDeleted"`
	// Unchanged Hosts count
	HostsUnchanged *int `pulumi:"hostsUnchanged"`
	// Updated Hosts count
	HostsUpdated *int `pulumi:"hostsUpdated"`
	// List of hosts with replica caught up
	HostsWithReplicaCaughtUp []string `pulumi:"hostsWithReplicaCaughtUp"`
	// List of hosts with tables created by the operator
	HostsWithTablesCreated []string `pulumi:"hostsWithTablesCreated"`
	// Normalized resource requested
	Normalized map[string]interface{} `pulumi:"normalized"`
	// Normalized resource completed
	NormalizedCompleted map[string]interface{} `pulumi:"normalizedCompleted"`
	// Pod IPs
	PodIps []string `pulumi:"pod-ips"`
	// Pods
	Pods []string `pulumi:"pods"`
	// Replicas count
	Replicas *int `pulumi:"replicas"`
	// Shards count
	Shards *int `pulumi:"shards"`
	// Status
	Status *string `pulumi:"status"`
	// Current task id
	TaskID *string `pulumi:"taskID"`
	// Completed task ids
	TaskIDsCompleted []string `pulumi:"taskIDsCompleted"`
	// Started task ids
	TaskIDsStarted []string `pulumi:"taskIDsStarted"`
	// List of templates used to build this CHI
	UsedTemplates map[string]interface{} `pulumi:"usedTemplates"`
}

// ClickHouseKeeperInstallationStatusInput is an input type that accepts ClickHouseKeeperInstallationStatusArgs and ClickHouseKeeperInstallationStatusOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationStatusInput` via:
//
//	ClickHouseKeeperInstallationStatusArgs{...}
type ClickHouseKeeperInstallationStatusInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationStatusOutput() ClickHouseKeeperInstallationStatusOutput
	ToClickHouseKeeperInstallationStatusOutputWithContext(context.Context) ClickHouseKeeperInstallationStatusOutput
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseKeeperInstallationStatusArgs struct {
	// Action
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Actions
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Operator git commit SHA
	ChopCommit pulumi.StringPtrInput `pulumi:"chop-commit"`
	// Operator build date
	ChopDate pulumi.StringPtrInput `pulumi:"chop-date"`
	// IP address of the operator's pod which managed this resource
	ChopIp pulumi.StringPtrInput `pulumi:"chop-ip"`
	// Operator version
	ChopVersion pulumi.StringPtrInput `pulumi:"chop-version"`
	// Clusters count
	Clusters pulumi.IntPtrInput `pulumi:"clusters"`
	// Endpoint
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// All endpoints
	Endpoints pulumi.StringArrayInput `pulumi:"endpoints"`
	// Last error
	Error pulumi.StringPtrInput `pulumi:"error"`
	// Errors
	Errors pulumi.StringArrayInput `pulumi:"errors"`
	// Pods FQDNs
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// Generation
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// Hosts count
	Hosts pulumi.IntPtrInput `pulumi:"hosts"`
	// Added Hosts count
	HostsAdded pulumi.IntPtrInput `pulumi:"hostsAdded"`
	// Completed Hosts count
	HostsCompleted pulumi.IntPtrInput `pulumi:"hostsCompleted"`
	// About to delete Hosts count
	HostsDelete pulumi.IntPtrInput `pulumi:"hostsDelete"`
	// Deleted Hosts count
	HostsDeleted pulumi.IntPtrInput `pulumi:"hostsDeleted"`
	// Unchanged Hosts count
	HostsUnchanged pulumi.IntPtrInput `pulumi:"hostsUnchanged"`
	// Updated Hosts count
	HostsUpdated pulumi.IntPtrInput `pulumi:"hostsUpdated"`
	// List of hosts with replica caught up
	HostsWithReplicaCaughtUp pulumi.StringArrayInput `pulumi:"hostsWithReplicaCaughtUp"`
	// List of hosts with tables created by the operator
	HostsWithTablesCreated pulumi.StringArrayInput `pulumi:"hostsWithTablesCreated"`
	// Normalized resource requested
	Normalized pulumi.MapInput `pulumi:"normalized"`
	// Normalized resource completed
	NormalizedCompleted pulumi.MapInput `pulumi:"normalizedCompleted"`
	// Pod IPs
	PodIps pulumi.StringArrayInput `pulumi:"pod-ips"`
	// Pods
	Pods pulumi.StringArrayInput `pulumi:"pods"`
	// Replicas count
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Shards count
	Shards pulumi.IntPtrInput `pulumi:"shards"`
	// Status
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Current task id
	TaskID pulumi.StringPtrInput `pulumi:"taskID"`
	// Completed task ids
	TaskIDsCompleted pulumi.StringArrayInput `pulumi:"taskIDsCompleted"`
	// Started task ids
	TaskIDsStarted pulumi.StringArrayInput `pulumi:"taskIDsStarted"`
	// List of templates used to build this CHI
	UsedTemplates pulumi.MapInput `pulumi:"usedTemplates"`
}

func (ClickHouseKeeperInstallationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationStatus)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationStatusArgs) ToClickHouseKeeperInstallationStatusOutput() ClickHouseKeeperInstallationStatusOutput {
	return i.ToClickHouseKeeperInstallationStatusOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationStatusArgs) ToClickHouseKeeperInstallationStatusOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationStatusOutput)
}

func (i ClickHouseKeeperInstallationStatusArgs) ToClickHouseKeeperInstallationStatusPtrOutput() ClickHouseKeeperInstallationStatusPtrOutput {
	return i.ToClickHouseKeeperInstallationStatusPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationStatusArgs) ToClickHouseKeeperInstallationStatusPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationStatusOutput).ToClickHouseKeeperInstallationStatusPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationStatusPtrInput is an input type that accepts ClickHouseKeeperInstallationStatusArgs, ClickHouseKeeperInstallationStatusPtr and ClickHouseKeeperInstallationStatusPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationStatusPtrInput` via:
//
//	        ClickHouseKeeperInstallationStatusArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationStatusPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationStatusPtrOutput() ClickHouseKeeperInstallationStatusPtrOutput
	ToClickHouseKeeperInstallationStatusPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationStatusPtrOutput
}

type clickHouseKeeperInstallationStatusPtrType ClickHouseKeeperInstallationStatusArgs

func ClickHouseKeeperInstallationStatusPtr(v *ClickHouseKeeperInstallationStatusArgs) ClickHouseKeeperInstallationStatusPtrInput {
	return (*clickHouseKeeperInstallationStatusPtrType)(v)
}

func (*clickHouseKeeperInstallationStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationStatus)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationStatusPtrType) ToClickHouseKeeperInstallationStatusPtrOutput() ClickHouseKeeperInstallationStatusPtrOutput {
	return i.ToClickHouseKeeperInstallationStatusPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationStatusPtrType) ToClickHouseKeeperInstallationStatusPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationStatusPtrOutput)
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseKeeperInstallationStatusOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationStatus)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationStatusOutput) ToClickHouseKeeperInstallationStatusOutput() ClickHouseKeeperInstallationStatusOutput {
	return o
}

func (o ClickHouseKeeperInstallationStatusOutput) ToClickHouseKeeperInstallationStatusOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusOutput {
	return o
}

func (o ClickHouseKeeperInstallationStatusOutput) ToClickHouseKeeperInstallationStatusPtrOutput() ClickHouseKeeperInstallationStatusPtrOutput {
	return o.ToClickHouseKeeperInstallationStatusPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationStatusOutput) ToClickHouseKeeperInstallationStatusPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationStatus) *ClickHouseKeeperInstallationStatus {
		return &v
	}).(ClickHouseKeeperInstallationStatusPtrOutput)
}

// Action
func (o ClickHouseKeeperInstallationStatusOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Actions
func (o ClickHouseKeeperInstallationStatusOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Operator git commit SHA
func (o ClickHouseKeeperInstallationStatusOutput) ChopCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *string { return v.ChopCommit }).(pulumi.StringPtrOutput)
}

// Operator build date
func (o ClickHouseKeeperInstallationStatusOutput) ChopDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *string { return v.ChopDate }).(pulumi.StringPtrOutput)
}

// IP address of the operator's pod which managed this resource
func (o ClickHouseKeeperInstallationStatusOutput) ChopIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *string { return v.ChopIp }).(pulumi.StringPtrOutput)
}

// Operator version
func (o ClickHouseKeeperInstallationStatusOutput) ChopVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *string { return v.ChopVersion }).(pulumi.StringPtrOutput)
}

// Clusters count
func (o ClickHouseKeeperInstallationStatusOutput) Clusters() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.Clusters }).(pulumi.IntPtrOutput)
}

// Endpoint
func (o ClickHouseKeeperInstallationStatusOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// All endpoints
func (o ClickHouseKeeperInstallationStatusOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

// Last error
func (o ClickHouseKeeperInstallationStatusOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Errors
func (o ClickHouseKeeperInstallationStatusOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

// Pods FQDNs
func (o ClickHouseKeeperInstallationStatusOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// Generation
func (o ClickHouseKeeperInstallationStatusOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// Hosts count
func (o ClickHouseKeeperInstallationStatusOutput) Hosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.Hosts }).(pulumi.IntPtrOutput)
}

// Added Hosts count
func (o ClickHouseKeeperInstallationStatusOutput) HostsAdded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.HostsAdded }).(pulumi.IntPtrOutput)
}

// Completed Hosts count
func (o ClickHouseKeeperInstallationStatusOutput) HostsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.HostsCompleted }).(pulumi.IntPtrOutput)
}

// About to delete Hosts count
func (o ClickHouseKeeperInstallationStatusOutput) HostsDelete() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.HostsDelete }).(pulumi.IntPtrOutput)
}

// Deleted Hosts count
func (o ClickHouseKeeperInstallationStatusOutput) HostsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.HostsDeleted }).(pulumi.IntPtrOutput)
}

// Unchanged Hosts count
func (o ClickHouseKeeperInstallationStatusOutput) HostsUnchanged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.HostsUnchanged }).(pulumi.IntPtrOutput)
}

// Updated Hosts count
func (o ClickHouseKeeperInstallationStatusOutput) HostsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.HostsUpdated }).(pulumi.IntPtrOutput)
}

// List of hosts with replica caught up
func (o ClickHouseKeeperInstallationStatusOutput) HostsWithReplicaCaughtUp() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.HostsWithReplicaCaughtUp }).(pulumi.StringArrayOutput)
}

// List of hosts with tables created by the operator
func (o ClickHouseKeeperInstallationStatusOutput) HostsWithTablesCreated() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.HostsWithTablesCreated }).(pulumi.StringArrayOutput)
}

// Normalized resource requested
func (o ClickHouseKeeperInstallationStatusOutput) Normalized() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) map[string]interface{} { return v.Normalized }).(pulumi.MapOutput)
}

// Normalized resource completed
func (o ClickHouseKeeperInstallationStatusOutput) NormalizedCompleted() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) map[string]interface{} { return v.NormalizedCompleted }).(pulumi.MapOutput)
}

// Pod IPs
func (o ClickHouseKeeperInstallationStatusOutput) PodIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.PodIps }).(pulumi.StringArrayOutput)
}

// Pods
func (o ClickHouseKeeperInstallationStatusOutput) Pods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.Pods }).(pulumi.StringArrayOutput)
}

// Replicas count
func (o ClickHouseKeeperInstallationStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Shards count
func (o ClickHouseKeeperInstallationStatusOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *int { return v.Shards }).(pulumi.IntPtrOutput)
}

// Status
func (o ClickHouseKeeperInstallationStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Current task id
func (o ClickHouseKeeperInstallationStatusOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) *string { return v.TaskID }).(pulumi.StringPtrOutput)
}

// Completed task ids
func (o ClickHouseKeeperInstallationStatusOutput) TaskIDsCompleted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.TaskIDsCompleted }).(pulumi.StringArrayOutput)
}

// Started task ids
func (o ClickHouseKeeperInstallationStatusOutput) TaskIDsStarted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) []string { return v.TaskIDsStarted }).(pulumi.StringArrayOutput)
}

// List of templates used to build this CHI
func (o ClickHouseKeeperInstallationStatusOutput) UsedTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatus) map[string]interface{} { return v.UsedTemplates }).(pulumi.MapOutput)
}

type ClickHouseKeeperInstallationStatusPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationStatus)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationStatusPtrOutput) ToClickHouseKeeperInstallationStatusPtrOutput() ClickHouseKeeperInstallationStatusPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationStatusPtrOutput) ToClickHouseKeeperInstallationStatusPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationStatusPtrOutput) Elem() ClickHouseKeeperInstallationStatusOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) ClickHouseKeeperInstallationStatus {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationStatus
		return ret
	}).(ClickHouseKeeperInstallationStatusOutput)
}

// Action
func (o ClickHouseKeeperInstallationStatusPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Actions
func (o ClickHouseKeeperInstallationStatusPtrOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(pulumi.StringArrayOutput)
}

// Operator git commit SHA
func (o ClickHouseKeeperInstallationStatusPtrOutput) ChopCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopCommit
	}).(pulumi.StringPtrOutput)
}

// Operator build date
func (o ClickHouseKeeperInstallationStatusPtrOutput) ChopDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopDate
	}).(pulumi.StringPtrOutput)
}

// IP address of the operator's pod which managed this resource
func (o ClickHouseKeeperInstallationStatusPtrOutput) ChopIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopIp
	}).(pulumi.StringPtrOutput)
}

// Operator version
func (o ClickHouseKeeperInstallationStatusPtrOutput) ChopVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.ChopVersion
	}).(pulumi.StringPtrOutput)
}

// Clusters count
func (o ClickHouseKeeperInstallationStatusPtrOutput) Clusters() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(pulumi.IntPtrOutput)
}

// Endpoint
func (o ClickHouseKeeperInstallationStatusPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// All endpoints
func (o ClickHouseKeeperInstallationStatusPtrOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(pulumi.StringArrayOutput)
}

// Last error
func (o ClickHouseKeeperInstallationStatusPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// Errors
func (o ClickHouseKeeperInstallationStatusPtrOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.StringArrayOutput)
}

// Pods FQDNs
func (o ClickHouseKeeperInstallationStatusPtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// Generation
func (o ClickHouseKeeperInstallationStatusPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// Hosts count
func (o ClickHouseKeeperInstallationStatusPtrOutput) Hosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.IntPtrOutput)
}

// Added Hosts count
func (o ClickHouseKeeperInstallationStatusPtrOutput) HostsAdded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsAdded
	}).(pulumi.IntPtrOutput)
}

// Completed Hosts count
func (o ClickHouseKeeperInstallationStatusPtrOutput) HostsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsCompleted
	}).(pulumi.IntPtrOutput)
}

// About to delete Hosts count
func (o ClickHouseKeeperInstallationStatusPtrOutput) HostsDelete() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsDelete
	}).(pulumi.IntPtrOutput)
}

// Deleted Hosts count
func (o ClickHouseKeeperInstallationStatusPtrOutput) HostsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsDeleted
	}).(pulumi.IntPtrOutput)
}

// Unchanged Hosts count
func (o ClickHouseKeeperInstallationStatusPtrOutput) HostsUnchanged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsUnchanged
	}).(pulumi.IntPtrOutput)
}

// Updated Hosts count
func (o ClickHouseKeeperInstallationStatusPtrOutput) HostsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.HostsUpdated
	}).(pulumi.IntPtrOutput)
}

// List of hosts with replica caught up
func (o ClickHouseKeeperInstallationStatusPtrOutput) HostsWithReplicaCaughtUp() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.HostsWithReplicaCaughtUp
	}).(pulumi.StringArrayOutput)
}

// List of hosts with tables created by the operator
func (o ClickHouseKeeperInstallationStatusPtrOutput) HostsWithTablesCreated() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.HostsWithTablesCreated
	}).(pulumi.StringArrayOutput)
}

// Normalized resource requested
func (o ClickHouseKeeperInstallationStatusPtrOutput) Normalized() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Normalized
	}).(pulumi.MapOutput)
}

// Normalized resource completed
func (o ClickHouseKeeperInstallationStatusPtrOutput) NormalizedCompleted() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.NormalizedCompleted
	}).(pulumi.MapOutput)
}

// Pod IPs
func (o ClickHouseKeeperInstallationStatusPtrOutput) PodIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.PodIps
	}).(pulumi.StringArrayOutput)
}

// Pods
func (o ClickHouseKeeperInstallationStatusPtrOutput) Pods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.Pods
	}).(pulumi.StringArrayOutput)
}

// Replicas count
func (o ClickHouseKeeperInstallationStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Shards count
func (o ClickHouseKeeperInstallationStatusPtrOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *int {
		if v == nil {
			return nil
		}
		return v.Shards
	}).(pulumi.IntPtrOutput)
}

// Status
func (o ClickHouseKeeperInstallationStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Current task id
func (o ClickHouseKeeperInstallationStatusPtrOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) *string {
		if v == nil {
			return nil
		}
		return v.TaskID
	}).(pulumi.StringPtrOutput)
}

// Completed task ids
func (o ClickHouseKeeperInstallationStatusPtrOutput) TaskIDsCompleted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.TaskIDsCompleted
	}).(pulumi.StringArrayOutput)
}

// Started task ids
func (o ClickHouseKeeperInstallationStatusPtrOutput) TaskIDsStarted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) []string {
		if v == nil {
			return nil
		}
		return v.TaskIDsStarted
	}).(pulumi.StringArrayOutput)
}

// List of templates used to build this CHI
func (o ClickHouseKeeperInstallationStatusPtrOutput) UsedTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UsedTemplates
	}).(pulumi.MapOutput)
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseKeeperInstallationStatusPatch struct {
	// Action
	Action *string `pulumi:"action"`
	// Actions
	Actions []string `pulumi:"actions"`
	// Operator git commit SHA
	ChopCommit *string `pulumi:"chop-commit"`
	// Operator build date
	ChopDate *string `pulumi:"chop-date"`
	// IP address of the operator's pod which managed this resource
	ChopIp *string `pulumi:"chop-ip"`
	// Operator version
	ChopVersion *string `pulumi:"chop-version"`
	// Clusters count
	Clusters *int `pulumi:"clusters"`
	// Endpoint
	Endpoint *string `pulumi:"endpoint"`
	// All endpoints
	Endpoints []string `pulumi:"endpoints"`
	// Last error
	Error *string `pulumi:"error"`
	// Errors
	Errors []string `pulumi:"errors"`
	// Pods FQDNs
	Fqdns []string `pulumi:"fqdns"`
	// Generation
	Generation *int `pulumi:"generation"`
	// Hosts count
	Hosts *int `pulumi:"hosts"`
	// Added Hosts count
	HostsAdded *int `pulumi:"hostsAdded"`
	// Completed Hosts count
	HostsCompleted *int `pulumi:"hostsCompleted"`
	// About to delete Hosts count
	HostsDelete *int `pulumi:"hostsDelete"`
	// Deleted Hosts count
	HostsDeleted *int `pulumi:"hostsDeleted"`
	// Unchanged Hosts count
	HostsUnchanged *int `pulumi:"hostsUnchanged"`
	// Updated Hosts count
	HostsUpdated *int `pulumi:"hostsUpdated"`
	// List of hosts with replica caught up
	HostsWithReplicaCaughtUp []string `pulumi:"hostsWithReplicaCaughtUp"`
	// List of hosts with tables created by the operator
	HostsWithTablesCreated []string `pulumi:"hostsWithTablesCreated"`
	// Normalized resource requested
	Normalized map[string]interface{} `pulumi:"normalized"`
	// Normalized resource completed
	NormalizedCompleted map[string]interface{} `pulumi:"normalizedCompleted"`
	// Pod IPs
	PodIps []string `pulumi:"pod-ips"`
	// Pods
	Pods []string `pulumi:"pods"`
	// Replicas count
	Replicas *int `pulumi:"replicas"`
	// Shards count
	Shards *int `pulumi:"shards"`
	// Status
	Status *string `pulumi:"status"`
	// Current task id
	TaskID *string `pulumi:"taskID"`
	// Completed task ids
	TaskIDsCompleted []string `pulumi:"taskIDsCompleted"`
	// Started task ids
	TaskIDsStarted []string `pulumi:"taskIDsStarted"`
	// List of templates used to build this CHI
	UsedTemplates map[string]interface{} `pulumi:"usedTemplates"`
}

// ClickHouseKeeperInstallationStatusPatchInput is an input type that accepts ClickHouseKeeperInstallationStatusPatchArgs and ClickHouseKeeperInstallationStatusPatchOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationStatusPatchInput` via:
//
//	ClickHouseKeeperInstallationStatusPatchArgs{...}
type ClickHouseKeeperInstallationStatusPatchInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationStatusPatchOutput() ClickHouseKeeperInstallationStatusPatchOutput
	ToClickHouseKeeperInstallationStatusPatchOutputWithContext(context.Context) ClickHouseKeeperInstallationStatusPatchOutput
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseKeeperInstallationStatusPatchArgs struct {
	// Action
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Actions
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Operator git commit SHA
	ChopCommit pulumi.StringPtrInput `pulumi:"chop-commit"`
	// Operator build date
	ChopDate pulumi.StringPtrInput `pulumi:"chop-date"`
	// IP address of the operator's pod which managed this resource
	ChopIp pulumi.StringPtrInput `pulumi:"chop-ip"`
	// Operator version
	ChopVersion pulumi.StringPtrInput `pulumi:"chop-version"`
	// Clusters count
	Clusters pulumi.IntPtrInput `pulumi:"clusters"`
	// Endpoint
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// All endpoints
	Endpoints pulumi.StringArrayInput `pulumi:"endpoints"`
	// Last error
	Error pulumi.StringPtrInput `pulumi:"error"`
	// Errors
	Errors pulumi.StringArrayInput `pulumi:"errors"`
	// Pods FQDNs
	Fqdns pulumi.StringArrayInput `pulumi:"fqdns"`
	// Generation
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// Hosts count
	Hosts pulumi.IntPtrInput `pulumi:"hosts"`
	// Added Hosts count
	HostsAdded pulumi.IntPtrInput `pulumi:"hostsAdded"`
	// Completed Hosts count
	HostsCompleted pulumi.IntPtrInput `pulumi:"hostsCompleted"`
	// About to delete Hosts count
	HostsDelete pulumi.IntPtrInput `pulumi:"hostsDelete"`
	// Deleted Hosts count
	HostsDeleted pulumi.IntPtrInput `pulumi:"hostsDeleted"`
	// Unchanged Hosts count
	HostsUnchanged pulumi.IntPtrInput `pulumi:"hostsUnchanged"`
	// Updated Hosts count
	HostsUpdated pulumi.IntPtrInput `pulumi:"hostsUpdated"`
	// List of hosts with replica caught up
	HostsWithReplicaCaughtUp pulumi.StringArrayInput `pulumi:"hostsWithReplicaCaughtUp"`
	// List of hosts with tables created by the operator
	HostsWithTablesCreated pulumi.StringArrayInput `pulumi:"hostsWithTablesCreated"`
	// Normalized resource requested
	Normalized pulumi.MapInput `pulumi:"normalized"`
	// Normalized resource completed
	NormalizedCompleted pulumi.MapInput `pulumi:"normalizedCompleted"`
	// Pod IPs
	PodIps pulumi.StringArrayInput `pulumi:"pod-ips"`
	// Pods
	Pods pulumi.StringArrayInput `pulumi:"pods"`
	// Replicas count
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Shards count
	Shards pulumi.IntPtrInput `pulumi:"shards"`
	// Status
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Current task id
	TaskID pulumi.StringPtrInput `pulumi:"taskID"`
	// Completed task ids
	TaskIDsCompleted pulumi.StringArrayInput `pulumi:"taskIDsCompleted"`
	// Started task ids
	TaskIDsStarted pulumi.StringArrayInput `pulumi:"taskIDsStarted"`
	// List of templates used to build this CHI
	UsedTemplates pulumi.MapInput `pulumi:"usedTemplates"`
}

func (ClickHouseKeeperInstallationStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationStatusPatch)(nil)).Elem()
}

func (i ClickHouseKeeperInstallationStatusPatchArgs) ToClickHouseKeeperInstallationStatusPatchOutput() ClickHouseKeeperInstallationStatusPatchOutput {
	return i.ToClickHouseKeeperInstallationStatusPatchOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationStatusPatchArgs) ToClickHouseKeeperInstallationStatusPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationStatusPatchOutput)
}

func (i ClickHouseKeeperInstallationStatusPatchArgs) ToClickHouseKeeperInstallationStatusPatchPtrOutput() ClickHouseKeeperInstallationStatusPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationStatusPatchPtrOutputWithContext(context.Background())
}

func (i ClickHouseKeeperInstallationStatusPatchArgs) ToClickHouseKeeperInstallationStatusPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationStatusPatchOutput).ToClickHouseKeeperInstallationStatusPatchPtrOutputWithContext(ctx)
}

// ClickHouseKeeperInstallationStatusPatchPtrInput is an input type that accepts ClickHouseKeeperInstallationStatusPatchArgs, ClickHouseKeeperInstallationStatusPatchPtr and ClickHouseKeeperInstallationStatusPatchPtrOutput values.
// You can construct a concrete instance of `ClickHouseKeeperInstallationStatusPatchPtrInput` via:
//
//	        ClickHouseKeeperInstallationStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ClickHouseKeeperInstallationStatusPatchPtrInput interface {
	pulumi.Input

	ToClickHouseKeeperInstallationStatusPatchPtrOutput() ClickHouseKeeperInstallationStatusPatchPtrOutput
	ToClickHouseKeeperInstallationStatusPatchPtrOutputWithContext(context.Context) ClickHouseKeeperInstallationStatusPatchPtrOutput
}

type clickHouseKeeperInstallationStatusPatchPtrType ClickHouseKeeperInstallationStatusPatchArgs

func ClickHouseKeeperInstallationStatusPatchPtr(v *ClickHouseKeeperInstallationStatusPatchArgs) ClickHouseKeeperInstallationStatusPatchPtrInput {
	return (*clickHouseKeeperInstallationStatusPatchPtrType)(v)
}

func (*clickHouseKeeperInstallationStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationStatusPatch)(nil)).Elem()
}

func (i *clickHouseKeeperInstallationStatusPatchPtrType) ToClickHouseKeeperInstallationStatusPatchPtrOutput() ClickHouseKeeperInstallationStatusPatchPtrOutput {
	return i.ToClickHouseKeeperInstallationStatusPatchPtrOutputWithContext(context.Background())
}

func (i *clickHouseKeeperInstallationStatusPatchPtrType) ToClickHouseKeeperInstallationStatusPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseKeeperInstallationStatusPatchPtrOutput)
}

// Status contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
type ClickHouseKeeperInstallationStatusPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClickHouseKeeperInstallationStatusPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationStatusPatchOutput) ToClickHouseKeeperInstallationStatusPatchOutput() ClickHouseKeeperInstallationStatusPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationStatusPatchOutput) ToClickHouseKeeperInstallationStatusPatchOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPatchOutput {
	return o
}

func (o ClickHouseKeeperInstallationStatusPatchOutput) ToClickHouseKeeperInstallationStatusPatchPtrOutput() ClickHouseKeeperInstallationStatusPatchPtrOutput {
	return o.ToClickHouseKeeperInstallationStatusPatchPtrOutputWithContext(context.Background())
}

func (o ClickHouseKeeperInstallationStatusPatchOutput) ToClickHouseKeeperInstallationStatusPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClickHouseKeeperInstallationStatusPatch) *ClickHouseKeeperInstallationStatusPatch {
		return &v
	}).(ClickHouseKeeperInstallationStatusPatchPtrOutput)
}

// Action
func (o ClickHouseKeeperInstallationStatusPatchOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Actions
func (o ClickHouseKeeperInstallationStatusPatchOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Operator git commit SHA
func (o ClickHouseKeeperInstallationStatusPatchOutput) ChopCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *string { return v.ChopCommit }).(pulumi.StringPtrOutput)
}

// Operator build date
func (o ClickHouseKeeperInstallationStatusPatchOutput) ChopDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *string { return v.ChopDate }).(pulumi.StringPtrOutput)
}

// IP address of the operator's pod which managed this resource
func (o ClickHouseKeeperInstallationStatusPatchOutput) ChopIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *string { return v.ChopIp }).(pulumi.StringPtrOutput)
}

// Operator version
func (o ClickHouseKeeperInstallationStatusPatchOutput) ChopVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *string { return v.ChopVersion }).(pulumi.StringPtrOutput)
}

// Clusters count
func (o ClickHouseKeeperInstallationStatusPatchOutput) Clusters() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.Clusters }).(pulumi.IntPtrOutput)
}

// Endpoint
func (o ClickHouseKeeperInstallationStatusPatchOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// All endpoints
func (o ClickHouseKeeperInstallationStatusPatchOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

// Last error
func (o ClickHouseKeeperInstallationStatusPatchOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Errors
func (o ClickHouseKeeperInstallationStatusPatchOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.Errors }).(pulumi.StringArrayOutput)
}

// Pods FQDNs
func (o ClickHouseKeeperInstallationStatusPatchOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.Fqdns }).(pulumi.StringArrayOutput)
}

// Generation
func (o ClickHouseKeeperInstallationStatusPatchOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// Hosts count
func (o ClickHouseKeeperInstallationStatusPatchOutput) Hosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.Hosts }).(pulumi.IntPtrOutput)
}

// Added Hosts count
func (o ClickHouseKeeperInstallationStatusPatchOutput) HostsAdded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.HostsAdded }).(pulumi.IntPtrOutput)
}

// Completed Hosts count
func (o ClickHouseKeeperInstallationStatusPatchOutput) HostsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.HostsCompleted }).(pulumi.IntPtrOutput)
}

// About to delete Hosts count
func (o ClickHouseKeeperInstallationStatusPatchOutput) HostsDelete() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.HostsDelete }).(pulumi.IntPtrOutput)
}

// Deleted Hosts count
func (o ClickHouseKeeperInstallationStatusPatchOutput) HostsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.HostsDeleted }).(pulumi.IntPtrOutput)
}

// Unchanged Hosts count
func (o ClickHouseKeeperInstallationStatusPatchOutput) HostsUnchanged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.HostsUnchanged }).(pulumi.IntPtrOutput)
}

// Updated Hosts count
func (o ClickHouseKeeperInstallationStatusPatchOutput) HostsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.HostsUpdated }).(pulumi.IntPtrOutput)
}

// List of hosts with replica caught up
func (o ClickHouseKeeperInstallationStatusPatchOutput) HostsWithReplicaCaughtUp() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.HostsWithReplicaCaughtUp }).(pulumi.StringArrayOutput)
}

// List of hosts with tables created by the operator
func (o ClickHouseKeeperInstallationStatusPatchOutput) HostsWithTablesCreated() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.HostsWithTablesCreated }).(pulumi.StringArrayOutput)
}

// Normalized resource requested
func (o ClickHouseKeeperInstallationStatusPatchOutput) Normalized() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) map[string]interface{} { return v.Normalized }).(pulumi.MapOutput)
}

// Normalized resource completed
func (o ClickHouseKeeperInstallationStatusPatchOutput) NormalizedCompleted() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) map[string]interface{} { return v.NormalizedCompleted }).(pulumi.MapOutput)
}

// Pod IPs
func (o ClickHouseKeeperInstallationStatusPatchOutput) PodIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.PodIps }).(pulumi.StringArrayOutput)
}

// Pods
func (o ClickHouseKeeperInstallationStatusPatchOutput) Pods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.Pods }).(pulumi.StringArrayOutput)
}

// Replicas count
func (o ClickHouseKeeperInstallationStatusPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Shards count
func (o ClickHouseKeeperInstallationStatusPatchOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *int { return v.Shards }).(pulumi.IntPtrOutput)
}

// Status
func (o ClickHouseKeeperInstallationStatusPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Current task id
func (o ClickHouseKeeperInstallationStatusPatchOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) *string { return v.TaskID }).(pulumi.StringPtrOutput)
}

// Completed task ids
func (o ClickHouseKeeperInstallationStatusPatchOutput) TaskIDsCompleted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.TaskIDsCompleted }).(pulumi.StringArrayOutput)
}

// Started task ids
func (o ClickHouseKeeperInstallationStatusPatchOutput) TaskIDsStarted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) []string { return v.TaskIDsStarted }).(pulumi.StringArrayOutput)
}

// List of templates used to build this CHI
func (o ClickHouseKeeperInstallationStatusPatchOutput) UsedTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v ClickHouseKeeperInstallationStatusPatch) map[string]interface{} { return v.UsedTemplates }).(pulumi.MapOutput)
}

type ClickHouseKeeperInstallationStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ClickHouseKeeperInstallationStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseKeeperInstallationStatusPatch)(nil)).Elem()
}

func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) ToClickHouseKeeperInstallationStatusPatchPtrOutput() ClickHouseKeeperInstallationStatusPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) ToClickHouseKeeperInstallationStatusPatchPtrOutputWithContext(ctx context.Context) ClickHouseKeeperInstallationStatusPatchPtrOutput {
	return o
}

func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Elem() ClickHouseKeeperInstallationStatusPatchOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) ClickHouseKeeperInstallationStatusPatch {
		if v != nil {
			return *v
		}
		var ret ClickHouseKeeperInstallationStatusPatch
		return ret
	}).(ClickHouseKeeperInstallationStatusPatchOutput)
}

// Action
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Actions
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.Actions
	}).(pulumi.StringArrayOutput)
}

// Operator git commit SHA
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) ChopCommit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ChopCommit
	}).(pulumi.StringPtrOutput)
}

// Operator build date
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) ChopDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ChopDate
	}).(pulumi.StringPtrOutput)
}

// IP address of the operator's pod which managed this resource
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) ChopIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ChopIp
	}).(pulumi.StringPtrOutput)
}

// Operator version
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) ChopVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ChopVersion
	}).(pulumi.StringPtrOutput)
}

// Clusters count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Clusters() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(pulumi.IntPtrOutput)
}

// Endpoint
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// All endpoints
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(pulumi.StringArrayOutput)
}

// Last error
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Error
	}).(pulumi.StringPtrOutput)
}

// Errors
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Errors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.StringArrayOutput)
}

// Pods FQDNs
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Fqdns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.Fqdns
	}).(pulumi.StringArrayOutput)
}

// Generation
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// Hosts count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Hosts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.IntPtrOutput)
}

// Added Hosts count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) HostsAdded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.HostsAdded
	}).(pulumi.IntPtrOutput)
}

// Completed Hosts count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) HostsCompleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.HostsCompleted
	}).(pulumi.IntPtrOutput)
}

// About to delete Hosts count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) HostsDelete() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.HostsDelete
	}).(pulumi.IntPtrOutput)
}

// Deleted Hosts count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) HostsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.HostsDeleted
	}).(pulumi.IntPtrOutput)
}

// Unchanged Hosts count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) HostsUnchanged() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.HostsUnchanged
	}).(pulumi.IntPtrOutput)
}

// Updated Hosts count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) HostsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.HostsUpdated
	}).(pulumi.IntPtrOutput)
}

// List of hosts with replica caught up
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) HostsWithReplicaCaughtUp() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.HostsWithReplicaCaughtUp
	}).(pulumi.StringArrayOutput)
}

// List of hosts with tables created by the operator
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) HostsWithTablesCreated() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.HostsWithTablesCreated
	}).(pulumi.StringArrayOutput)
}

// Normalized resource requested
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Normalized() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Normalized
	}).(pulumi.MapOutput)
}

// Normalized resource completed
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) NormalizedCompleted() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.NormalizedCompleted
	}).(pulumi.MapOutput)
}

// Pod IPs
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) PodIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.PodIps
	}).(pulumi.StringArrayOutput)
}

// Pods
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Pods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.Pods
	}).(pulumi.StringArrayOutput)
}

// Replicas count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Shards count
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Shards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Shards
	}).(pulumi.IntPtrOutput)
}

// Status
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Current task id
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) TaskID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.TaskID
	}).(pulumi.StringPtrOutput)
}

// Completed task ids
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) TaskIDsCompleted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.TaskIDsCompleted
	}).(pulumi.StringArrayOutput)
}

// Started task ids
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) TaskIDsStarted() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.TaskIDsStarted
	}).(pulumi.StringArrayOutput)
}

// List of templates used to build this CHI
func (o ClickHouseKeeperInstallationStatusPatchPtrOutput) UsedTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v *ClickHouseKeeperInstallationStatusPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UsedTemplates
	}).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationTypeInput)(nil)).Elem(), ClickHouseKeeperInstallationTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationTypeArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationListTypeInput)(nil)).Elem(), ClickHouseKeeperInstallationListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationPatchTypeInput)(nil)).Elem(), ClickHouseKeeperInstallationPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecConfigurationPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecConfigurationPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsDistributedDDLInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsDistributedDDLArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsStorageManagementInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsStorageManagementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecReconcilingPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecReconcilingPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayInput)(nil)).Elem(), ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationStatusInput)(nil)).Elem(), ClickHouseKeeperInstallationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationStatusPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationStatusPatchInput)(nil)).Elem(), ClickHouseKeeperInstallationStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseKeeperInstallationStatusPatchPtrInput)(nil)).Elem(), ClickHouseKeeperInstallationStatusPatchArgs{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationTypeOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationTypeArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationListTypeOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationPatchTypeOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersLayoutReplicasTemplatesPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationClustersTemplatesPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecConfigurationPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsDistributedDDLPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsStorageManagementOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsStorageManagementPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecDefaultsTemplatesPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupReconcileFailedObjectsPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingCleanupUnknownObjectsPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecReconcilingPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesPortDistributionPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesHostTemplatesSpecTemplatesPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesPodDistributionPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZoneOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesPodTemplatesZonePatchPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesServiceTemplatesPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationSpecTemplatesVolumeClaimTemplatesPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationStatusOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationStatusPtrOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationStatusPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseKeeperInstallationStatusPatchPtrOutput{})
}
