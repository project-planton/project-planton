// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseInstallationPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput            `pulumi:"metadata"`
	Spec     ClickHouseInstallationSpecPatchPtrOutput   `pulumi:"spec"`
	Status   ClickHouseInstallationStatusPatchPtrOutput `pulumi:"status"`
}

// NewClickHouseInstallationPatch registers a new resource with the given unique name, arguments, and options.
func NewClickHouseInstallationPatch(ctx *pulumi.Context,
	name string, args *ClickHouseInstallationPatchArgs, opts ...pulumi.ResourceOption) (*ClickHouseInstallationPatch, error) {
	if args == nil {
		args = &ClickHouseInstallationPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("clickhouse.altinity.com/v1")
	args.Kind = pulumi.StringPtr("ClickHouseInstallation")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClickHouseInstallationPatch
	err := ctx.RegisterResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallationPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClickHouseInstallationPatch gets an existing ClickHouseInstallationPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClickHouseInstallationPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClickHouseInstallationPatchState, opts ...pulumi.ResourceOption) (*ClickHouseInstallationPatch, error) {
	var resource ClickHouseInstallationPatch
	err := ctx.ReadResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallationPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClickHouseInstallationPatch resources.
type clickHouseInstallationPatchState struct {
}

type ClickHouseInstallationPatchState struct {
}

func (ClickHouseInstallationPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationPatchState)(nil)).Elem()
}

type clickHouseInstallationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch          `pulumi:"metadata"`
	Spec     *ClickHouseInstallationSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a ClickHouseInstallationPatch resource.
type ClickHouseInstallationPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ClickHouseInstallationSpecPatchPtrInput
}

func (ClickHouseInstallationPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationPatchArgs)(nil)).Elem()
}

type ClickHouseInstallationPatchInput interface {
	pulumi.Input

	ToClickHouseInstallationPatchOutput() ClickHouseInstallationPatchOutput
	ToClickHouseInstallationPatchOutputWithContext(ctx context.Context) ClickHouseInstallationPatchOutput
}

func (*ClickHouseInstallationPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationPatch)(nil)).Elem()
}

func (i *ClickHouseInstallationPatch) ToClickHouseInstallationPatchOutput() ClickHouseInstallationPatchOutput {
	return i.ToClickHouseInstallationPatchOutputWithContext(context.Background())
}

func (i *ClickHouseInstallationPatch) ToClickHouseInstallationPatchOutputWithContext(ctx context.Context) ClickHouseInstallationPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationPatchOutput)
}

// ClickHouseInstallationPatchArrayInput is an input type that accepts ClickHouseInstallationPatchArray and ClickHouseInstallationPatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationPatchArrayInput` via:
//
//	ClickHouseInstallationPatchArray{ ClickHouseInstallationPatchArgs{...} }
type ClickHouseInstallationPatchArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationPatchArrayOutput() ClickHouseInstallationPatchArrayOutput
	ToClickHouseInstallationPatchArrayOutputWithContext(context.Context) ClickHouseInstallationPatchArrayOutput
}

type ClickHouseInstallationPatchArray []ClickHouseInstallationPatchInput

func (ClickHouseInstallationPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallationPatch)(nil)).Elem()
}

func (i ClickHouseInstallationPatchArray) ToClickHouseInstallationPatchArrayOutput() ClickHouseInstallationPatchArrayOutput {
	return i.ToClickHouseInstallationPatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationPatchArray) ToClickHouseInstallationPatchArrayOutputWithContext(ctx context.Context) ClickHouseInstallationPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationPatchArrayOutput)
}

// ClickHouseInstallationPatchMapInput is an input type that accepts ClickHouseInstallationPatchMap and ClickHouseInstallationPatchMapOutput values.
// You can construct a concrete instance of `ClickHouseInstallationPatchMapInput` via:
//
//	ClickHouseInstallationPatchMap{ "key": ClickHouseInstallationPatchArgs{...} }
type ClickHouseInstallationPatchMapInput interface {
	pulumi.Input

	ToClickHouseInstallationPatchMapOutput() ClickHouseInstallationPatchMapOutput
	ToClickHouseInstallationPatchMapOutputWithContext(context.Context) ClickHouseInstallationPatchMapOutput
}

type ClickHouseInstallationPatchMap map[string]ClickHouseInstallationPatchInput

func (ClickHouseInstallationPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallationPatch)(nil)).Elem()
}

func (i ClickHouseInstallationPatchMap) ToClickHouseInstallationPatchMapOutput() ClickHouseInstallationPatchMapOutput {
	return i.ToClickHouseInstallationPatchMapOutputWithContext(context.Background())
}

func (i ClickHouseInstallationPatchMap) ToClickHouseInstallationPatchMapOutputWithContext(ctx context.Context) ClickHouseInstallationPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationPatchMapOutput)
}

type ClickHouseInstallationPatchOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationPatch)(nil)).Elem()
}

func (o ClickHouseInstallationPatchOutput) ToClickHouseInstallationPatchOutput() ClickHouseInstallationPatchOutput {
	return o
}

func (o ClickHouseInstallationPatchOutput) ToClickHouseInstallationPatchOutputWithContext(ctx context.Context) ClickHouseInstallationPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClickHouseInstallationPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseInstallationPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseInstallationPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ClickHouseInstallationPatchOutput) Spec() ClickHouseInstallationSpecPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationPatch) ClickHouseInstallationSpecPatchPtrOutput { return v.Spec }).(ClickHouseInstallationSpecPatchPtrOutput)
}

func (o ClickHouseInstallationPatchOutput) Status() ClickHouseInstallationStatusPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationPatch) ClickHouseInstallationStatusPatchPtrOutput { return v.Status }).(ClickHouseInstallationStatusPatchPtrOutput)
}

type ClickHouseInstallationPatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallationPatch)(nil)).Elem()
}

func (o ClickHouseInstallationPatchArrayOutput) ToClickHouseInstallationPatchArrayOutput() ClickHouseInstallationPatchArrayOutput {
	return o
}

func (o ClickHouseInstallationPatchArrayOutput) ToClickHouseInstallationPatchArrayOutputWithContext(ctx context.Context) ClickHouseInstallationPatchArrayOutput {
	return o
}

func (o ClickHouseInstallationPatchArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClickHouseInstallationPatch {
		return vs[0].([]*ClickHouseInstallationPatch)[vs[1].(int)]
	}).(ClickHouseInstallationPatchOutput)
}

type ClickHouseInstallationPatchMapOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallationPatch)(nil)).Elem()
}

func (o ClickHouseInstallationPatchMapOutput) ToClickHouseInstallationPatchMapOutput() ClickHouseInstallationPatchMapOutput {
	return o
}

func (o ClickHouseInstallationPatchMapOutput) ToClickHouseInstallationPatchMapOutputWithContext(ctx context.Context) ClickHouseInstallationPatchMapOutput {
	return o
}

func (o ClickHouseInstallationPatchMapOutput) MapIndex(k pulumi.StringInput) ClickHouseInstallationPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClickHouseInstallationPatch {
		return vs[0].(map[string]*ClickHouseInstallationPatch)[vs[1].(string)]
	}).(ClickHouseInstallationPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationPatchInput)(nil)).Elem(), &ClickHouseInstallationPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationPatchArrayInput)(nil)).Elem(), ClickHouseInstallationPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationPatchMapInput)(nil)).Elem(), ClickHouseInstallationPatchMap{})
	pulumi.RegisterOutputType(ClickHouseInstallationPatchOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationPatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationPatchMapOutput{})
}
