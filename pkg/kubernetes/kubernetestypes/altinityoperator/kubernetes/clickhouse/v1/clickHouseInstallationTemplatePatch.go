// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseInstallationTemplatePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput                    `pulumi:"metadata"`
	Spec     ClickHouseInstallationTemplateSpecPatchPtrOutput   `pulumi:"spec"`
	Status   ClickHouseInstallationTemplateStatusPatchPtrOutput `pulumi:"status"`
}

// NewClickHouseInstallationTemplatePatch registers a new resource with the given unique name, arguments, and options.
func NewClickHouseInstallationTemplatePatch(ctx *pulumi.Context,
	name string, args *ClickHouseInstallationTemplatePatchArgs, opts ...pulumi.ResourceOption) (*ClickHouseInstallationTemplatePatch, error) {
	if args == nil {
		args = &ClickHouseInstallationTemplatePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("clickhouse.altinity.com/v1")
	args.Kind = pulumi.StringPtr("ClickHouseInstallationTemplate")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClickHouseInstallationTemplatePatch
	err := ctx.RegisterResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallationTemplatePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClickHouseInstallationTemplatePatch gets an existing ClickHouseInstallationTemplatePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClickHouseInstallationTemplatePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClickHouseInstallationTemplatePatchState, opts ...pulumi.ResourceOption) (*ClickHouseInstallationTemplatePatch, error) {
	var resource ClickHouseInstallationTemplatePatch
	err := ctx.ReadResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallationTemplatePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClickHouseInstallationTemplatePatch resources.
type clickHouseInstallationTemplatePatchState struct {
}

type ClickHouseInstallationTemplatePatchState struct {
}

func (ClickHouseInstallationTemplatePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationTemplatePatchState)(nil)).Elem()
}

type clickHouseInstallationTemplatePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch                  `pulumi:"metadata"`
	Spec     *ClickHouseInstallationTemplateSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a ClickHouseInstallationTemplatePatch resource.
type ClickHouseInstallationTemplatePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ClickHouseInstallationTemplateSpecPatchPtrInput
}

func (ClickHouseInstallationTemplatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationTemplatePatchArgs)(nil)).Elem()
}

type ClickHouseInstallationTemplatePatchInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplatePatchOutput() ClickHouseInstallationTemplatePatchOutput
	ToClickHouseInstallationTemplatePatchOutputWithContext(ctx context.Context) ClickHouseInstallationTemplatePatchOutput
}

func (*ClickHouseInstallationTemplatePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplatePatch)(nil)).Elem()
}

func (i *ClickHouseInstallationTemplatePatch) ToClickHouseInstallationTemplatePatchOutput() ClickHouseInstallationTemplatePatchOutput {
	return i.ToClickHouseInstallationTemplatePatchOutputWithContext(context.Background())
}

func (i *ClickHouseInstallationTemplatePatch) ToClickHouseInstallationTemplatePatchOutputWithContext(ctx context.Context) ClickHouseInstallationTemplatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplatePatchOutput)
}

// ClickHouseInstallationTemplatePatchArrayInput is an input type that accepts ClickHouseInstallationTemplatePatchArray and ClickHouseInstallationTemplatePatchArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplatePatchArrayInput` via:
//
//	ClickHouseInstallationTemplatePatchArray{ ClickHouseInstallationTemplatePatchArgs{...} }
type ClickHouseInstallationTemplatePatchArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplatePatchArrayOutput() ClickHouseInstallationTemplatePatchArrayOutput
	ToClickHouseInstallationTemplatePatchArrayOutputWithContext(context.Context) ClickHouseInstallationTemplatePatchArrayOutput
}

type ClickHouseInstallationTemplatePatchArray []ClickHouseInstallationTemplatePatchInput

func (ClickHouseInstallationTemplatePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallationTemplatePatch)(nil)).Elem()
}

func (i ClickHouseInstallationTemplatePatchArray) ToClickHouseInstallationTemplatePatchArrayOutput() ClickHouseInstallationTemplatePatchArrayOutput {
	return i.ToClickHouseInstallationTemplatePatchArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplatePatchArray) ToClickHouseInstallationTemplatePatchArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplatePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplatePatchArrayOutput)
}

// ClickHouseInstallationTemplatePatchMapInput is an input type that accepts ClickHouseInstallationTemplatePatchMap and ClickHouseInstallationTemplatePatchMapOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplatePatchMapInput` via:
//
//	ClickHouseInstallationTemplatePatchMap{ "key": ClickHouseInstallationTemplatePatchArgs{...} }
type ClickHouseInstallationTemplatePatchMapInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplatePatchMapOutput() ClickHouseInstallationTemplatePatchMapOutput
	ToClickHouseInstallationTemplatePatchMapOutputWithContext(context.Context) ClickHouseInstallationTemplatePatchMapOutput
}

type ClickHouseInstallationTemplatePatchMap map[string]ClickHouseInstallationTemplatePatchInput

func (ClickHouseInstallationTemplatePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallationTemplatePatch)(nil)).Elem()
}

func (i ClickHouseInstallationTemplatePatchMap) ToClickHouseInstallationTemplatePatchMapOutput() ClickHouseInstallationTemplatePatchMapOutput {
	return i.ToClickHouseInstallationTemplatePatchMapOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplatePatchMap) ToClickHouseInstallationTemplatePatchMapOutputWithContext(ctx context.Context) ClickHouseInstallationTemplatePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplatePatchMapOutput)
}

type ClickHouseInstallationTemplatePatchOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplatePatch)(nil)).Elem()
}

func (o ClickHouseInstallationTemplatePatchOutput) ToClickHouseInstallationTemplatePatchOutput() ClickHouseInstallationTemplatePatchOutput {
	return o
}

func (o ClickHouseInstallationTemplatePatchOutput) ToClickHouseInstallationTemplatePatchOutputWithContext(ctx context.Context) ClickHouseInstallationTemplatePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClickHouseInstallationTemplatePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplatePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseInstallationTemplatePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplatePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseInstallationTemplatePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplatePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ClickHouseInstallationTemplatePatchOutput) Spec() ClickHouseInstallationTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplatePatch) ClickHouseInstallationTemplateSpecPatchPtrOutput {
		return v.Spec
	}).(ClickHouseInstallationTemplateSpecPatchPtrOutput)
}

func (o ClickHouseInstallationTemplatePatchOutput) Status() ClickHouseInstallationTemplateStatusPatchPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplatePatch) ClickHouseInstallationTemplateStatusPatchPtrOutput {
		return v.Status
	}).(ClickHouseInstallationTemplateStatusPatchPtrOutput)
}

type ClickHouseInstallationTemplatePatchArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplatePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallationTemplatePatch)(nil)).Elem()
}

func (o ClickHouseInstallationTemplatePatchArrayOutput) ToClickHouseInstallationTemplatePatchArrayOutput() ClickHouseInstallationTemplatePatchArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplatePatchArrayOutput) ToClickHouseInstallationTemplatePatchArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplatePatchArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplatePatchArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplatePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClickHouseInstallationTemplatePatch {
		return vs[0].([]*ClickHouseInstallationTemplatePatch)[vs[1].(int)]
	}).(ClickHouseInstallationTemplatePatchOutput)
}

type ClickHouseInstallationTemplatePatchMapOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplatePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallationTemplatePatch)(nil)).Elem()
}

func (o ClickHouseInstallationTemplatePatchMapOutput) ToClickHouseInstallationTemplatePatchMapOutput() ClickHouseInstallationTemplatePatchMapOutput {
	return o
}

func (o ClickHouseInstallationTemplatePatchMapOutput) ToClickHouseInstallationTemplatePatchMapOutputWithContext(ctx context.Context) ClickHouseInstallationTemplatePatchMapOutput {
	return o
}

func (o ClickHouseInstallationTemplatePatchMapOutput) MapIndex(k pulumi.StringInput) ClickHouseInstallationTemplatePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClickHouseInstallationTemplatePatch {
		return vs[0].(map[string]*ClickHouseInstallationTemplatePatch)[vs[1].(string)]
	}).(ClickHouseInstallationTemplatePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplatePatchInput)(nil)).Elem(), &ClickHouseInstallationTemplatePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplatePatchArrayInput)(nil)).Elem(), ClickHouseInstallationTemplatePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplatePatchMapInput)(nil)).Elem(), ClickHouseInstallationTemplatePatchMap{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplatePatchOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplatePatchArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplatePatchMapOutput{})
}
