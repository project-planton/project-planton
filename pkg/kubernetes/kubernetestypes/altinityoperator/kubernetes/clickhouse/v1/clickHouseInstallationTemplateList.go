// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClickHouseInstallationTemplateList is a list of ClickHouseInstallationTemplate
type ClickHouseInstallationTemplateList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of clickhouseinstallationtemplates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ClickHouseInstallationTemplateTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewClickHouseInstallationTemplateList registers a new resource with the given unique name, arguments, and options.
func NewClickHouseInstallationTemplateList(ctx *pulumi.Context,
	name string, args *ClickHouseInstallationTemplateListArgs, opts ...pulumi.ResourceOption) (*ClickHouseInstallationTemplateList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("clickhouse.altinity.com/v1")
	args.Kind = pulumi.StringPtr("ClickHouseInstallationTemplateList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClickHouseInstallationTemplateList
	err := ctx.RegisterResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallationTemplateList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClickHouseInstallationTemplateList gets an existing ClickHouseInstallationTemplateList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClickHouseInstallationTemplateList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClickHouseInstallationTemplateListState, opts ...pulumi.ResourceOption) (*ClickHouseInstallationTemplateList, error) {
	var resource ClickHouseInstallationTemplateList
	err := ctx.ReadResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallationTemplateList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClickHouseInstallationTemplateList resources.
type clickHouseInstallationTemplateListState struct {
}

type ClickHouseInstallationTemplateListState struct {
}

func (ClickHouseInstallationTemplateListState) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationTemplateListState)(nil)).Elem()
}

type clickHouseInstallationTemplateListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of clickhouseinstallationtemplates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ClickHouseInstallationTemplateType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ClickHouseInstallationTemplateList resource.
type ClickHouseInstallationTemplateListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of clickhouseinstallationtemplates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ClickHouseInstallationTemplateTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ClickHouseInstallationTemplateListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationTemplateListArgs)(nil)).Elem()
}

type ClickHouseInstallationTemplateListInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateListOutput() ClickHouseInstallationTemplateListOutput
	ToClickHouseInstallationTemplateListOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateListOutput
}

func (*ClickHouseInstallationTemplateList) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateList)(nil)).Elem()
}

func (i *ClickHouseInstallationTemplateList) ToClickHouseInstallationTemplateListOutput() ClickHouseInstallationTemplateListOutput {
	return i.ToClickHouseInstallationTemplateListOutputWithContext(context.Background())
}

func (i *ClickHouseInstallationTemplateList) ToClickHouseInstallationTemplateListOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateListOutput)
}

// ClickHouseInstallationTemplateListArrayInput is an input type that accepts ClickHouseInstallationTemplateListArray and ClickHouseInstallationTemplateListArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateListArrayInput` via:
//
//	ClickHouseInstallationTemplateListArray{ ClickHouseInstallationTemplateListArgs{...} }
type ClickHouseInstallationTemplateListArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateListArrayOutput() ClickHouseInstallationTemplateListArrayOutput
	ToClickHouseInstallationTemplateListArrayOutputWithContext(context.Context) ClickHouseInstallationTemplateListArrayOutput
}

type ClickHouseInstallationTemplateListArray []ClickHouseInstallationTemplateListInput

func (ClickHouseInstallationTemplateListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallationTemplateList)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateListArray) ToClickHouseInstallationTemplateListArrayOutput() ClickHouseInstallationTemplateListArrayOutput {
	return i.ToClickHouseInstallationTemplateListArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateListArray) ToClickHouseInstallationTemplateListArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateListArrayOutput)
}

// ClickHouseInstallationTemplateListMapInput is an input type that accepts ClickHouseInstallationTemplateListMap and ClickHouseInstallationTemplateListMapOutput values.
// You can construct a concrete instance of `ClickHouseInstallationTemplateListMapInput` via:
//
//	ClickHouseInstallationTemplateListMap{ "key": ClickHouseInstallationTemplateListArgs{...} }
type ClickHouseInstallationTemplateListMapInput interface {
	pulumi.Input

	ToClickHouseInstallationTemplateListMapOutput() ClickHouseInstallationTemplateListMapOutput
	ToClickHouseInstallationTemplateListMapOutputWithContext(context.Context) ClickHouseInstallationTemplateListMapOutput
}

type ClickHouseInstallationTemplateListMap map[string]ClickHouseInstallationTemplateListInput

func (ClickHouseInstallationTemplateListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallationTemplateList)(nil)).Elem()
}

func (i ClickHouseInstallationTemplateListMap) ToClickHouseInstallationTemplateListMapOutput() ClickHouseInstallationTemplateListMapOutput {
	return i.ToClickHouseInstallationTemplateListMapOutputWithContext(context.Background())
}

func (i ClickHouseInstallationTemplateListMap) ToClickHouseInstallationTemplateListMapOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationTemplateListMapOutput)
}

type ClickHouseInstallationTemplateListOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationTemplateList)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateListOutput) ToClickHouseInstallationTemplateListOutput() ClickHouseInstallationTemplateListOutput {
	return o
}

func (o ClickHouseInstallationTemplateListOutput) ToClickHouseInstallationTemplateListOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClickHouseInstallationTemplateListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of clickhouseinstallationtemplates. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ClickHouseInstallationTemplateListOutput) Items() ClickHouseInstallationTemplateTypeArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateList) ClickHouseInstallationTemplateTypeArrayOutput {
		return v.Items
	}).(ClickHouseInstallationTemplateTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseInstallationTemplateListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseInstallationTemplateListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ClickHouseInstallationTemplateList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ClickHouseInstallationTemplateListArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallationTemplateList)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateListArrayOutput) ToClickHouseInstallationTemplateListArrayOutput() ClickHouseInstallationTemplateListArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateListArrayOutput) ToClickHouseInstallationTemplateListArrayOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateListArrayOutput {
	return o
}

func (o ClickHouseInstallationTemplateListArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationTemplateListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClickHouseInstallationTemplateList {
		return vs[0].([]*ClickHouseInstallationTemplateList)[vs[1].(int)]
	}).(ClickHouseInstallationTemplateListOutput)
}

type ClickHouseInstallationTemplateListMapOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationTemplateListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallationTemplateList)(nil)).Elem()
}

func (o ClickHouseInstallationTemplateListMapOutput) ToClickHouseInstallationTemplateListMapOutput() ClickHouseInstallationTemplateListMapOutput {
	return o
}

func (o ClickHouseInstallationTemplateListMapOutput) ToClickHouseInstallationTemplateListMapOutputWithContext(ctx context.Context) ClickHouseInstallationTemplateListMapOutput {
	return o
}

func (o ClickHouseInstallationTemplateListMapOutput) MapIndex(k pulumi.StringInput) ClickHouseInstallationTemplateListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClickHouseInstallationTemplateList {
		return vs[0].(map[string]*ClickHouseInstallationTemplateList)[vs[1].(string)]
	}).(ClickHouseInstallationTemplateListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateListInput)(nil)).Elem(), &ClickHouseInstallationTemplateList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateListArrayInput)(nil)).Elem(), ClickHouseInstallationTemplateListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationTemplateListMapInput)(nil)).Elem(), ClickHouseInstallationTemplateListMap{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateListOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateListArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationTemplateListMapOutput{})
}
