// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// define a set of Kubernetes resources (StatefulSet, PVC, Service, ConfigMap) which describe behavior one or more clusters
type ClickHouseInstallation struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput               `pulumi:"metadata"`
	Spec     ClickHouseInstallationSpecOutput      `pulumi:"spec"`
	Status   ClickHouseInstallationStatusPtrOutput `pulumi:"status"`
}

// NewClickHouseInstallation registers a new resource with the given unique name, arguments, and options.
func NewClickHouseInstallation(ctx *pulumi.Context,
	name string, args *ClickHouseInstallationArgs, opts ...pulumi.ResourceOption) (*ClickHouseInstallation, error) {
	if args == nil {
		args = &ClickHouseInstallationArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("clickhouse.altinity.com/v1")
	args.Kind = pulumi.StringPtr("ClickHouseInstallation")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClickHouseInstallation
	err := ctx.RegisterResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClickHouseInstallation gets an existing ClickHouseInstallation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClickHouseInstallation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClickHouseInstallationState, opts ...pulumi.ResourceOption) (*ClickHouseInstallation, error) {
	var resource ClickHouseInstallation
	err := ctx.ReadResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClickHouseInstallation resources.
type clickHouseInstallationState struct {
}

type ClickHouseInstallationState struct {
}

func (ClickHouseInstallationState) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationState)(nil)).Elem()
}

type clickHouseInstallationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta          `pulumi:"metadata"`
	Spec     *ClickHouseInstallationSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ClickHouseInstallation resource.
type ClickHouseInstallationArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ClickHouseInstallationSpecPtrInput
}

func (ClickHouseInstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationArgs)(nil)).Elem()
}

type ClickHouseInstallationInput interface {
	pulumi.Input

	ToClickHouseInstallationOutput() ClickHouseInstallationOutput
	ToClickHouseInstallationOutputWithContext(ctx context.Context) ClickHouseInstallationOutput
}

func (*ClickHouseInstallation) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallation)(nil)).Elem()
}

func (i *ClickHouseInstallation) ToClickHouseInstallationOutput() ClickHouseInstallationOutput {
	return i.ToClickHouseInstallationOutputWithContext(context.Background())
}

func (i *ClickHouseInstallation) ToClickHouseInstallationOutputWithContext(ctx context.Context) ClickHouseInstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationOutput)
}

// ClickHouseInstallationArrayInput is an input type that accepts ClickHouseInstallationArray and ClickHouseInstallationArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationArrayInput` via:
//
//	ClickHouseInstallationArray{ ClickHouseInstallationArgs{...} }
type ClickHouseInstallationArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationArrayOutput() ClickHouseInstallationArrayOutput
	ToClickHouseInstallationArrayOutputWithContext(context.Context) ClickHouseInstallationArrayOutput
}

type ClickHouseInstallationArray []ClickHouseInstallationInput

func (ClickHouseInstallationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallation)(nil)).Elem()
}

func (i ClickHouseInstallationArray) ToClickHouseInstallationArrayOutput() ClickHouseInstallationArrayOutput {
	return i.ToClickHouseInstallationArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationArray) ToClickHouseInstallationArrayOutputWithContext(ctx context.Context) ClickHouseInstallationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationArrayOutput)
}

// ClickHouseInstallationMapInput is an input type that accepts ClickHouseInstallationMap and ClickHouseInstallationMapOutput values.
// You can construct a concrete instance of `ClickHouseInstallationMapInput` via:
//
//	ClickHouseInstallationMap{ "key": ClickHouseInstallationArgs{...} }
type ClickHouseInstallationMapInput interface {
	pulumi.Input

	ToClickHouseInstallationMapOutput() ClickHouseInstallationMapOutput
	ToClickHouseInstallationMapOutputWithContext(context.Context) ClickHouseInstallationMapOutput
}

type ClickHouseInstallationMap map[string]ClickHouseInstallationInput

func (ClickHouseInstallationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallation)(nil)).Elem()
}

func (i ClickHouseInstallationMap) ToClickHouseInstallationMapOutput() ClickHouseInstallationMapOutput {
	return i.ToClickHouseInstallationMapOutputWithContext(context.Background())
}

func (i ClickHouseInstallationMap) ToClickHouseInstallationMapOutputWithContext(ctx context.Context) ClickHouseInstallationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationMapOutput)
}

type ClickHouseInstallationOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallation)(nil)).Elem()
}

func (o ClickHouseInstallationOutput) ToClickHouseInstallationOutput() ClickHouseInstallationOutput {
	return o
}

func (o ClickHouseInstallationOutput) ToClickHouseInstallationOutputWithContext(ctx context.Context) ClickHouseInstallationOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClickHouseInstallationOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseInstallationOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ClickHouseInstallationOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ClickHouseInstallationOutput) Spec() ClickHouseInstallationSpecOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) ClickHouseInstallationSpecOutput { return v.Spec }).(ClickHouseInstallationSpecOutput)
}

func (o ClickHouseInstallationOutput) Status() ClickHouseInstallationStatusPtrOutput {
	return o.ApplyT(func(v *ClickHouseInstallation) ClickHouseInstallationStatusPtrOutput { return v.Status }).(ClickHouseInstallationStatusPtrOutput)
}

type ClickHouseInstallationArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallation)(nil)).Elem()
}

func (o ClickHouseInstallationArrayOutput) ToClickHouseInstallationArrayOutput() ClickHouseInstallationArrayOutput {
	return o
}

func (o ClickHouseInstallationArrayOutput) ToClickHouseInstallationArrayOutputWithContext(ctx context.Context) ClickHouseInstallationArrayOutput {
	return o
}

func (o ClickHouseInstallationArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClickHouseInstallation {
		return vs[0].([]*ClickHouseInstallation)[vs[1].(int)]
	}).(ClickHouseInstallationOutput)
}

type ClickHouseInstallationMapOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallation)(nil)).Elem()
}

func (o ClickHouseInstallationMapOutput) ToClickHouseInstallationMapOutput() ClickHouseInstallationMapOutput {
	return o
}

func (o ClickHouseInstallationMapOutput) ToClickHouseInstallationMapOutputWithContext(ctx context.Context) ClickHouseInstallationMapOutput {
	return o
}

func (o ClickHouseInstallationMapOutput) MapIndex(k pulumi.StringInput) ClickHouseInstallationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClickHouseInstallation {
		return vs[0].(map[string]*ClickHouseInstallation)[vs[1].(string)]
	}).(ClickHouseInstallationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationInput)(nil)).Elem(), &ClickHouseInstallation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationArrayInput)(nil)).Elem(), ClickHouseInstallationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationMapInput)(nil)).Elem(), ClickHouseInstallationMap{})
	pulumi.RegisterOutputType(ClickHouseInstallationOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationMapOutput{})
}
