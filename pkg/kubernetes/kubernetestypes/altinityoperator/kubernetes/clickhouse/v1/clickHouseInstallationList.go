// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClickHouseInstallationList is a list of ClickHouseInstallation
type ClickHouseInstallationList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of clickhouseinstallations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ClickHouseInstallationTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewClickHouseInstallationList registers a new resource with the given unique name, arguments, and options.
func NewClickHouseInstallationList(ctx *pulumi.Context,
	name string, args *ClickHouseInstallationListArgs, opts ...pulumi.ResourceOption) (*ClickHouseInstallationList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("clickhouse.altinity.com/v1")
	args.Kind = pulumi.StringPtr("ClickHouseInstallationList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClickHouseInstallationList
	err := ctx.RegisterResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallationList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClickHouseInstallationList gets an existing ClickHouseInstallationList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClickHouseInstallationList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClickHouseInstallationListState, opts ...pulumi.ResourceOption) (*ClickHouseInstallationList, error) {
	var resource ClickHouseInstallationList
	err := ctx.ReadResource("kubernetes:clickhouse.altinity.com/v1:ClickHouseInstallationList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClickHouseInstallationList resources.
type clickHouseInstallationListState struct {
}

type ClickHouseInstallationListState struct {
}

func (ClickHouseInstallationListState) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationListState)(nil)).Elem()
}

type clickHouseInstallationListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of clickhouseinstallations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ClickHouseInstallationType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ClickHouseInstallationList resource.
type ClickHouseInstallationListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of clickhouseinstallations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ClickHouseInstallationTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ClickHouseInstallationListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clickHouseInstallationListArgs)(nil)).Elem()
}

type ClickHouseInstallationListInput interface {
	pulumi.Input

	ToClickHouseInstallationListOutput() ClickHouseInstallationListOutput
	ToClickHouseInstallationListOutputWithContext(ctx context.Context) ClickHouseInstallationListOutput
}

func (*ClickHouseInstallationList) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationList)(nil)).Elem()
}

func (i *ClickHouseInstallationList) ToClickHouseInstallationListOutput() ClickHouseInstallationListOutput {
	return i.ToClickHouseInstallationListOutputWithContext(context.Background())
}

func (i *ClickHouseInstallationList) ToClickHouseInstallationListOutputWithContext(ctx context.Context) ClickHouseInstallationListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationListOutput)
}

// ClickHouseInstallationListArrayInput is an input type that accepts ClickHouseInstallationListArray and ClickHouseInstallationListArrayOutput values.
// You can construct a concrete instance of `ClickHouseInstallationListArrayInput` via:
//
//	ClickHouseInstallationListArray{ ClickHouseInstallationListArgs{...} }
type ClickHouseInstallationListArrayInput interface {
	pulumi.Input

	ToClickHouseInstallationListArrayOutput() ClickHouseInstallationListArrayOutput
	ToClickHouseInstallationListArrayOutputWithContext(context.Context) ClickHouseInstallationListArrayOutput
}

type ClickHouseInstallationListArray []ClickHouseInstallationListInput

func (ClickHouseInstallationListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallationList)(nil)).Elem()
}

func (i ClickHouseInstallationListArray) ToClickHouseInstallationListArrayOutput() ClickHouseInstallationListArrayOutput {
	return i.ToClickHouseInstallationListArrayOutputWithContext(context.Background())
}

func (i ClickHouseInstallationListArray) ToClickHouseInstallationListArrayOutputWithContext(ctx context.Context) ClickHouseInstallationListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationListArrayOutput)
}

// ClickHouseInstallationListMapInput is an input type that accepts ClickHouseInstallationListMap and ClickHouseInstallationListMapOutput values.
// You can construct a concrete instance of `ClickHouseInstallationListMapInput` via:
//
//	ClickHouseInstallationListMap{ "key": ClickHouseInstallationListArgs{...} }
type ClickHouseInstallationListMapInput interface {
	pulumi.Input

	ToClickHouseInstallationListMapOutput() ClickHouseInstallationListMapOutput
	ToClickHouseInstallationListMapOutputWithContext(context.Context) ClickHouseInstallationListMapOutput
}

type ClickHouseInstallationListMap map[string]ClickHouseInstallationListInput

func (ClickHouseInstallationListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallationList)(nil)).Elem()
}

func (i ClickHouseInstallationListMap) ToClickHouseInstallationListMapOutput() ClickHouseInstallationListMapOutput {
	return i.ToClickHouseInstallationListMapOutputWithContext(context.Background())
}

func (i ClickHouseInstallationListMap) ToClickHouseInstallationListMapOutputWithContext(ctx context.Context) ClickHouseInstallationListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClickHouseInstallationListMapOutput)
}

type ClickHouseInstallationListOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClickHouseInstallationList)(nil)).Elem()
}

func (o ClickHouseInstallationListOutput) ToClickHouseInstallationListOutput() ClickHouseInstallationListOutput {
	return o
}

func (o ClickHouseInstallationListOutput) ToClickHouseInstallationListOutputWithContext(ctx context.Context) ClickHouseInstallationListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ClickHouseInstallationListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickHouseInstallationList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of clickhouseinstallations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ClickHouseInstallationListOutput) Items() ClickHouseInstallationTypeArrayOutput {
	return o.ApplyT(func(v *ClickHouseInstallationList) ClickHouseInstallationTypeArrayOutput { return v.Items }).(ClickHouseInstallationTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseInstallationListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ClickHouseInstallationList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ClickHouseInstallationListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ClickHouseInstallationList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ClickHouseInstallationListArrayOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClickHouseInstallationList)(nil)).Elem()
}

func (o ClickHouseInstallationListArrayOutput) ToClickHouseInstallationListArrayOutput() ClickHouseInstallationListArrayOutput {
	return o
}

func (o ClickHouseInstallationListArrayOutput) ToClickHouseInstallationListArrayOutputWithContext(ctx context.Context) ClickHouseInstallationListArrayOutput {
	return o
}

func (o ClickHouseInstallationListArrayOutput) Index(i pulumi.IntInput) ClickHouseInstallationListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClickHouseInstallationList {
		return vs[0].([]*ClickHouseInstallationList)[vs[1].(int)]
	}).(ClickHouseInstallationListOutput)
}

type ClickHouseInstallationListMapOutput struct{ *pulumi.OutputState }

func (ClickHouseInstallationListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClickHouseInstallationList)(nil)).Elem()
}

func (o ClickHouseInstallationListMapOutput) ToClickHouseInstallationListMapOutput() ClickHouseInstallationListMapOutput {
	return o
}

func (o ClickHouseInstallationListMapOutput) ToClickHouseInstallationListMapOutputWithContext(ctx context.Context) ClickHouseInstallationListMapOutput {
	return o
}

func (o ClickHouseInstallationListMapOutput) MapIndex(k pulumi.StringInput) ClickHouseInstallationListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClickHouseInstallationList {
		return vs[0].(map[string]*ClickHouseInstallationList)[vs[1].(string)]
	}).(ClickHouseInstallationListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationListInput)(nil)).Elem(), &ClickHouseInstallationList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationListArrayInput)(nil)).Elem(), ClickHouseInstallationListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClickHouseInstallationListMapInput)(nil)).Elem(), ClickHouseInstallationListMap{})
	pulumi.RegisterOutputType(ClickHouseInstallationListOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationListArrayOutput{})
	pulumi.RegisterOutputType(ClickHouseInstallationListMapOutput{})
}
