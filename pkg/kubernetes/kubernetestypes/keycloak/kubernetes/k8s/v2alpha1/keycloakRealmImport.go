// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KeycloakRealmImport struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput            `pulumi:"metadata"`
	Spec     KeycloakRealmImportSpecOutput      `pulumi:"spec"`
	Status   KeycloakRealmImportStatusPtrOutput `pulumi:"status"`
}

// NewKeycloakRealmImport registers a new resource with the given unique name, arguments, and options.
func NewKeycloakRealmImport(ctx *pulumi.Context,
	name string, args *KeycloakRealmImportArgs, opts ...pulumi.ResourceOption) (*KeycloakRealmImport, error) {
	if args == nil {
		args = &KeycloakRealmImportArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.keycloak.org/v2alpha1")
	args.Kind = pulumi.StringPtr("KeycloakRealmImport")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KeycloakRealmImport
	err := ctx.RegisterResource("kubernetes:k8s.keycloak.org/v2alpha1:KeycloakRealmImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeycloakRealmImport gets an existing KeycloakRealmImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeycloakRealmImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeycloakRealmImportState, opts ...pulumi.ResourceOption) (*KeycloakRealmImport, error) {
	var resource KeycloakRealmImport
	err := ctx.ReadResource("kubernetes:k8s.keycloak.org/v2alpha1:KeycloakRealmImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeycloakRealmImport resources.
type keycloakRealmImportState struct {
}

type KeycloakRealmImportState struct {
}

func (KeycloakRealmImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*keycloakRealmImportState)(nil)).Elem()
}

type keycloakRealmImportArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta       `pulumi:"metadata"`
	Spec     *KeycloakRealmImportSpec `pulumi:"spec"`
}

// The set of arguments for constructing a KeycloakRealmImport resource.
type KeycloakRealmImportArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KeycloakRealmImportSpecPtrInput
}

func (KeycloakRealmImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keycloakRealmImportArgs)(nil)).Elem()
}

type KeycloakRealmImportInput interface {
	pulumi.Input

	ToKeycloakRealmImportOutput() KeycloakRealmImportOutput
	ToKeycloakRealmImportOutputWithContext(ctx context.Context) KeycloakRealmImportOutput
}

func (*KeycloakRealmImport) ElementType() reflect.Type {
	return reflect.TypeOf((**KeycloakRealmImport)(nil)).Elem()
}

func (i *KeycloakRealmImport) ToKeycloakRealmImportOutput() KeycloakRealmImportOutput {
	return i.ToKeycloakRealmImportOutputWithContext(context.Background())
}

func (i *KeycloakRealmImport) ToKeycloakRealmImportOutputWithContext(ctx context.Context) KeycloakRealmImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakRealmImportOutput)
}

// KeycloakRealmImportArrayInput is an input type that accepts KeycloakRealmImportArray and KeycloakRealmImportArrayOutput values.
// You can construct a concrete instance of `KeycloakRealmImportArrayInput` via:
//
//	KeycloakRealmImportArray{ KeycloakRealmImportArgs{...} }
type KeycloakRealmImportArrayInput interface {
	pulumi.Input

	ToKeycloakRealmImportArrayOutput() KeycloakRealmImportArrayOutput
	ToKeycloakRealmImportArrayOutputWithContext(context.Context) KeycloakRealmImportArrayOutput
}

type KeycloakRealmImportArray []KeycloakRealmImportInput

func (KeycloakRealmImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeycloakRealmImport)(nil)).Elem()
}

func (i KeycloakRealmImportArray) ToKeycloakRealmImportArrayOutput() KeycloakRealmImportArrayOutput {
	return i.ToKeycloakRealmImportArrayOutputWithContext(context.Background())
}

func (i KeycloakRealmImportArray) ToKeycloakRealmImportArrayOutputWithContext(ctx context.Context) KeycloakRealmImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakRealmImportArrayOutput)
}

// KeycloakRealmImportMapInput is an input type that accepts KeycloakRealmImportMap and KeycloakRealmImportMapOutput values.
// You can construct a concrete instance of `KeycloakRealmImportMapInput` via:
//
//	KeycloakRealmImportMap{ "key": KeycloakRealmImportArgs{...} }
type KeycloakRealmImportMapInput interface {
	pulumi.Input

	ToKeycloakRealmImportMapOutput() KeycloakRealmImportMapOutput
	ToKeycloakRealmImportMapOutputWithContext(context.Context) KeycloakRealmImportMapOutput
}

type KeycloakRealmImportMap map[string]KeycloakRealmImportInput

func (KeycloakRealmImportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeycloakRealmImport)(nil)).Elem()
}

func (i KeycloakRealmImportMap) ToKeycloakRealmImportMapOutput() KeycloakRealmImportMapOutput {
	return i.ToKeycloakRealmImportMapOutputWithContext(context.Background())
}

func (i KeycloakRealmImportMap) ToKeycloakRealmImportMapOutputWithContext(ctx context.Context) KeycloakRealmImportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakRealmImportMapOutput)
}

type KeycloakRealmImportOutput struct{ *pulumi.OutputState }

func (KeycloakRealmImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeycloakRealmImport)(nil)).Elem()
}

func (o KeycloakRealmImportOutput) ToKeycloakRealmImportOutput() KeycloakRealmImportOutput {
	return o
}

func (o KeycloakRealmImportOutput) ToKeycloakRealmImportOutputWithContext(ctx context.Context) KeycloakRealmImportOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KeycloakRealmImportOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KeycloakRealmImport) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KeycloakRealmImportOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KeycloakRealmImport) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KeycloakRealmImportOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KeycloakRealmImport) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KeycloakRealmImportOutput) Spec() KeycloakRealmImportSpecOutput {
	return o.ApplyT(func(v *KeycloakRealmImport) KeycloakRealmImportSpecOutput { return v.Spec }).(KeycloakRealmImportSpecOutput)
}

func (o KeycloakRealmImportOutput) Status() KeycloakRealmImportStatusPtrOutput {
	return o.ApplyT(func(v *KeycloakRealmImport) KeycloakRealmImportStatusPtrOutput { return v.Status }).(KeycloakRealmImportStatusPtrOutput)
}

type KeycloakRealmImportArrayOutput struct{ *pulumi.OutputState }

func (KeycloakRealmImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeycloakRealmImport)(nil)).Elem()
}

func (o KeycloakRealmImportArrayOutput) ToKeycloakRealmImportArrayOutput() KeycloakRealmImportArrayOutput {
	return o
}

func (o KeycloakRealmImportArrayOutput) ToKeycloakRealmImportArrayOutputWithContext(ctx context.Context) KeycloakRealmImportArrayOutput {
	return o
}

func (o KeycloakRealmImportArrayOutput) Index(i pulumi.IntInput) KeycloakRealmImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeycloakRealmImport {
		return vs[0].([]*KeycloakRealmImport)[vs[1].(int)]
	}).(KeycloakRealmImportOutput)
}

type KeycloakRealmImportMapOutput struct{ *pulumi.OutputState }

func (KeycloakRealmImportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeycloakRealmImport)(nil)).Elem()
}

func (o KeycloakRealmImportMapOutput) ToKeycloakRealmImportMapOutput() KeycloakRealmImportMapOutput {
	return o
}

func (o KeycloakRealmImportMapOutput) ToKeycloakRealmImportMapOutputWithContext(ctx context.Context) KeycloakRealmImportMapOutput {
	return o
}

func (o KeycloakRealmImportMapOutput) MapIndex(k pulumi.StringInput) KeycloakRealmImportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeycloakRealmImport {
		return vs[0].(map[string]*KeycloakRealmImport)[vs[1].(string)]
	}).(KeycloakRealmImportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakRealmImportInput)(nil)).Elem(), &KeycloakRealmImport{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakRealmImportArrayInput)(nil)).Elem(), KeycloakRealmImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakRealmImportMapInput)(nil)).Elem(), KeycloakRealmImportMap{})
	pulumi.RegisterOutputType(KeycloakRealmImportOutput{})
	pulumi.RegisterOutputType(KeycloakRealmImportArrayOutput{})
	pulumi.RegisterOutputType(KeycloakRealmImportMapOutput{})
}
