// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PerconaServerMySQL struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput           `pulumi:"metadata"`
	Spec     PerconaServerMySQLSpecOutput      `pulumi:"spec"`
	Status   PerconaServerMySQLStatusPtrOutput `pulumi:"status"`
}

// NewPerconaServerMySQL registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMySQL(ctx *pulumi.Context,
	name string, args *PerconaServerMySQLArgs, opts ...pulumi.ResourceOption) (*PerconaServerMySQL, error) {
	if args == nil {
		args = &PerconaServerMySQLArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("ps.percona.com/v1")
	args.Kind = pulumi.StringPtr("PerconaServerMySQL")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMySQL
	err := ctx.RegisterResource("kubernetes:ps.percona.com/v1:PerconaServerMySQL", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMySQL gets an existing PerconaServerMySQL resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMySQL(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMySQLState, opts ...pulumi.ResourceOption) (*PerconaServerMySQL, error) {
	var resource PerconaServerMySQL
	err := ctx.ReadResource("kubernetes:ps.percona.com/v1:PerconaServerMySQL", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMySQL resources.
type perconaServerMySQLState struct {
}

type PerconaServerMySQLState struct {
}

func (PerconaServerMySQLState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLState)(nil)).Elem()
}

type perconaServerMySQLArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta      `pulumi:"metadata"`
	Spec     *PerconaServerMySQLSpec `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaServerMySQL resource.
type PerconaServerMySQLArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PerconaServerMySQLSpecPtrInput
}

func (PerconaServerMySQLArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLArgs)(nil)).Elem()
}

type PerconaServerMySQLInput interface {
	pulumi.Input

	ToPerconaServerMySQLOutput() PerconaServerMySQLOutput
	ToPerconaServerMySQLOutputWithContext(ctx context.Context) PerconaServerMySQLOutput
}

func (*PerconaServerMySQL) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQL)(nil)).Elem()
}

func (i *PerconaServerMySQL) ToPerconaServerMySQLOutput() PerconaServerMySQLOutput {
	return i.ToPerconaServerMySQLOutputWithContext(context.Background())
}

func (i *PerconaServerMySQL) ToPerconaServerMySQLOutputWithContext(ctx context.Context) PerconaServerMySQLOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLOutput)
}

// PerconaServerMySQLArrayInput is an input type that accepts PerconaServerMySQLArray and PerconaServerMySQLArrayOutput values.
// You can construct a concrete instance of `PerconaServerMySQLArrayInput` via:
//
//	PerconaServerMySQLArray{ PerconaServerMySQLArgs{...} }
type PerconaServerMySQLArrayInput interface {
	pulumi.Input

	ToPerconaServerMySQLArrayOutput() PerconaServerMySQLArrayOutput
	ToPerconaServerMySQLArrayOutputWithContext(context.Context) PerconaServerMySQLArrayOutput
}

type PerconaServerMySQLArray []PerconaServerMySQLInput

func (PerconaServerMySQLArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQL)(nil)).Elem()
}

func (i PerconaServerMySQLArray) ToPerconaServerMySQLArrayOutput() PerconaServerMySQLArrayOutput {
	return i.ToPerconaServerMySQLArrayOutputWithContext(context.Background())
}

func (i PerconaServerMySQLArray) ToPerconaServerMySQLArrayOutputWithContext(ctx context.Context) PerconaServerMySQLArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLArrayOutput)
}

// PerconaServerMySQLMapInput is an input type that accepts PerconaServerMySQLMap and PerconaServerMySQLMapOutput values.
// You can construct a concrete instance of `PerconaServerMySQLMapInput` via:
//
//	PerconaServerMySQLMap{ "key": PerconaServerMySQLArgs{...} }
type PerconaServerMySQLMapInput interface {
	pulumi.Input

	ToPerconaServerMySQLMapOutput() PerconaServerMySQLMapOutput
	ToPerconaServerMySQLMapOutputWithContext(context.Context) PerconaServerMySQLMapOutput
}

type PerconaServerMySQLMap map[string]PerconaServerMySQLInput

func (PerconaServerMySQLMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQL)(nil)).Elem()
}

func (i PerconaServerMySQLMap) ToPerconaServerMySQLMapOutput() PerconaServerMySQLMapOutput {
	return i.ToPerconaServerMySQLMapOutputWithContext(context.Background())
}

func (i PerconaServerMySQLMap) ToPerconaServerMySQLMapOutputWithContext(ctx context.Context) PerconaServerMySQLMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLMapOutput)
}

type PerconaServerMySQLOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQL)(nil)).Elem()
}

func (o PerconaServerMySQLOutput) ToPerconaServerMySQLOutput() PerconaServerMySQLOutput {
	return o
}

func (o PerconaServerMySQLOutput) ToPerconaServerMySQLOutputWithContext(ctx context.Context) PerconaServerMySQLOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMySQLOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMySQL) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMySQLOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMySQL) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMySQLOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *PerconaServerMySQL) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PerconaServerMySQLOutput) Spec() PerconaServerMySQLSpecOutput {
	return o.ApplyT(func(v *PerconaServerMySQL) PerconaServerMySQLSpecOutput { return v.Spec }).(PerconaServerMySQLSpecOutput)
}

func (o PerconaServerMySQLOutput) Status() PerconaServerMySQLStatusPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQL) PerconaServerMySQLStatusPtrOutput { return v.Status }).(PerconaServerMySQLStatusPtrOutput)
}

type PerconaServerMySQLArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQL)(nil)).Elem()
}

func (o PerconaServerMySQLArrayOutput) ToPerconaServerMySQLArrayOutput() PerconaServerMySQLArrayOutput {
	return o
}

func (o PerconaServerMySQLArrayOutput) ToPerconaServerMySQLArrayOutputWithContext(ctx context.Context) PerconaServerMySQLArrayOutput {
	return o
}

func (o PerconaServerMySQLArrayOutput) Index(i pulumi.IntInput) PerconaServerMySQLOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMySQL {
		return vs[0].([]*PerconaServerMySQL)[vs[1].(int)]
	}).(PerconaServerMySQLOutput)
}

type PerconaServerMySQLMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQL)(nil)).Elem()
}

func (o PerconaServerMySQLMapOutput) ToPerconaServerMySQLMapOutput() PerconaServerMySQLMapOutput {
	return o
}

func (o PerconaServerMySQLMapOutput) ToPerconaServerMySQLMapOutputWithContext(ctx context.Context) PerconaServerMySQLMapOutput {
	return o
}

func (o PerconaServerMySQLMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMySQLOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMySQL {
		return vs[0].(map[string]*PerconaServerMySQL)[vs[1].(string)]
	}).(PerconaServerMySQLOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLInput)(nil)).Elem(), &PerconaServerMySQL{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLArrayInput)(nil)).Elem(), PerconaServerMySQLArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLMapInput)(nil)).Elem(), PerconaServerMySQLMap{})
	pulumi.RegisterOutputType(PerconaServerMySQLOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLMapOutput{})
}
