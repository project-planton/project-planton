// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type PerconaServerMySQLBackupPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput              `pulumi:"metadata"`
	Spec     PerconaServerMySQLBackupSpecPatchPtrOutput   `pulumi:"spec"`
	Status   PerconaServerMySQLBackupStatusPatchPtrOutput `pulumi:"status"`
}

// NewPerconaServerMySQLBackupPatch registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMySQLBackupPatch(ctx *pulumi.Context,
	name string, args *PerconaServerMySQLBackupPatchArgs, opts ...pulumi.ResourceOption) (*PerconaServerMySQLBackupPatch, error) {
	if args == nil {
		args = &PerconaServerMySQLBackupPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("ps.percona.com/v1")
	args.Kind = pulumi.StringPtr("PerconaServerMySQLBackup")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMySQLBackupPatch
	err := ctx.RegisterResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLBackupPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMySQLBackupPatch gets an existing PerconaServerMySQLBackupPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMySQLBackupPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMySQLBackupPatchState, opts ...pulumi.ResourceOption) (*PerconaServerMySQLBackupPatch, error) {
	var resource PerconaServerMySQLBackupPatch
	err := ctx.ReadResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLBackupPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMySQLBackupPatch resources.
type perconaServerMySQLBackupPatchState struct {
}

type PerconaServerMySQLBackupPatchState struct {
}

func (PerconaServerMySQLBackupPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLBackupPatchState)(nil)).Elem()
}

type perconaServerMySQLBackupPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch            `pulumi:"metadata"`
	Spec     *PerconaServerMySQLBackupSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaServerMySQLBackupPatch resource.
type PerconaServerMySQLBackupPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PerconaServerMySQLBackupSpecPatchPtrInput
}

func (PerconaServerMySQLBackupPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLBackupPatchArgs)(nil)).Elem()
}

type PerconaServerMySQLBackupPatchInput interface {
	pulumi.Input

	ToPerconaServerMySQLBackupPatchOutput() PerconaServerMySQLBackupPatchOutput
	ToPerconaServerMySQLBackupPatchOutputWithContext(ctx context.Context) PerconaServerMySQLBackupPatchOutput
}

func (*PerconaServerMySQLBackupPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLBackupPatch)(nil)).Elem()
}

func (i *PerconaServerMySQLBackupPatch) ToPerconaServerMySQLBackupPatchOutput() PerconaServerMySQLBackupPatchOutput {
	return i.ToPerconaServerMySQLBackupPatchOutputWithContext(context.Background())
}

func (i *PerconaServerMySQLBackupPatch) ToPerconaServerMySQLBackupPatchOutputWithContext(ctx context.Context) PerconaServerMySQLBackupPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLBackupPatchOutput)
}

// PerconaServerMySQLBackupPatchArrayInput is an input type that accepts PerconaServerMySQLBackupPatchArray and PerconaServerMySQLBackupPatchArrayOutput values.
// You can construct a concrete instance of `PerconaServerMySQLBackupPatchArrayInput` via:
//
//	PerconaServerMySQLBackupPatchArray{ PerconaServerMySQLBackupPatchArgs{...} }
type PerconaServerMySQLBackupPatchArrayInput interface {
	pulumi.Input

	ToPerconaServerMySQLBackupPatchArrayOutput() PerconaServerMySQLBackupPatchArrayOutput
	ToPerconaServerMySQLBackupPatchArrayOutputWithContext(context.Context) PerconaServerMySQLBackupPatchArrayOutput
}

type PerconaServerMySQLBackupPatchArray []PerconaServerMySQLBackupPatchInput

func (PerconaServerMySQLBackupPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLBackupPatch)(nil)).Elem()
}

func (i PerconaServerMySQLBackupPatchArray) ToPerconaServerMySQLBackupPatchArrayOutput() PerconaServerMySQLBackupPatchArrayOutput {
	return i.ToPerconaServerMySQLBackupPatchArrayOutputWithContext(context.Background())
}

func (i PerconaServerMySQLBackupPatchArray) ToPerconaServerMySQLBackupPatchArrayOutputWithContext(ctx context.Context) PerconaServerMySQLBackupPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLBackupPatchArrayOutput)
}

// PerconaServerMySQLBackupPatchMapInput is an input type that accepts PerconaServerMySQLBackupPatchMap and PerconaServerMySQLBackupPatchMapOutput values.
// You can construct a concrete instance of `PerconaServerMySQLBackupPatchMapInput` via:
//
//	PerconaServerMySQLBackupPatchMap{ "key": PerconaServerMySQLBackupPatchArgs{...} }
type PerconaServerMySQLBackupPatchMapInput interface {
	pulumi.Input

	ToPerconaServerMySQLBackupPatchMapOutput() PerconaServerMySQLBackupPatchMapOutput
	ToPerconaServerMySQLBackupPatchMapOutputWithContext(context.Context) PerconaServerMySQLBackupPatchMapOutput
}

type PerconaServerMySQLBackupPatchMap map[string]PerconaServerMySQLBackupPatchInput

func (PerconaServerMySQLBackupPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLBackupPatch)(nil)).Elem()
}

func (i PerconaServerMySQLBackupPatchMap) ToPerconaServerMySQLBackupPatchMapOutput() PerconaServerMySQLBackupPatchMapOutput {
	return i.ToPerconaServerMySQLBackupPatchMapOutputWithContext(context.Background())
}

func (i PerconaServerMySQLBackupPatchMap) ToPerconaServerMySQLBackupPatchMapOutputWithContext(ctx context.Context) PerconaServerMySQLBackupPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLBackupPatchMapOutput)
}

type PerconaServerMySQLBackupPatchOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLBackupPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLBackupPatch)(nil)).Elem()
}

func (o PerconaServerMySQLBackupPatchOutput) ToPerconaServerMySQLBackupPatchOutput() PerconaServerMySQLBackupPatchOutput {
	return o
}

func (o PerconaServerMySQLBackupPatchOutput) ToPerconaServerMySQLBackupPatchOutputWithContext(ctx context.Context) PerconaServerMySQLBackupPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMySQLBackupPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackupPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMySQLBackupPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackupPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMySQLBackupPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackupPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PerconaServerMySQLBackupPatchOutput) Spec() PerconaServerMySQLBackupSpecPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackupPatch) PerconaServerMySQLBackupSpecPatchPtrOutput { return v.Spec }).(PerconaServerMySQLBackupSpecPatchPtrOutput)
}

func (o PerconaServerMySQLBackupPatchOutput) Status() PerconaServerMySQLBackupStatusPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackupPatch) PerconaServerMySQLBackupStatusPatchPtrOutput { return v.Status }).(PerconaServerMySQLBackupStatusPatchPtrOutput)
}

type PerconaServerMySQLBackupPatchArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLBackupPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLBackupPatch)(nil)).Elem()
}

func (o PerconaServerMySQLBackupPatchArrayOutput) ToPerconaServerMySQLBackupPatchArrayOutput() PerconaServerMySQLBackupPatchArrayOutput {
	return o
}

func (o PerconaServerMySQLBackupPatchArrayOutput) ToPerconaServerMySQLBackupPatchArrayOutputWithContext(ctx context.Context) PerconaServerMySQLBackupPatchArrayOutput {
	return o
}

func (o PerconaServerMySQLBackupPatchArrayOutput) Index(i pulumi.IntInput) PerconaServerMySQLBackupPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMySQLBackupPatch {
		return vs[0].([]*PerconaServerMySQLBackupPatch)[vs[1].(int)]
	}).(PerconaServerMySQLBackupPatchOutput)
}

type PerconaServerMySQLBackupPatchMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLBackupPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLBackupPatch)(nil)).Elem()
}

func (o PerconaServerMySQLBackupPatchMapOutput) ToPerconaServerMySQLBackupPatchMapOutput() PerconaServerMySQLBackupPatchMapOutput {
	return o
}

func (o PerconaServerMySQLBackupPatchMapOutput) ToPerconaServerMySQLBackupPatchMapOutputWithContext(ctx context.Context) PerconaServerMySQLBackupPatchMapOutput {
	return o
}

func (o PerconaServerMySQLBackupPatchMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMySQLBackupPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMySQLBackupPatch {
		return vs[0].(map[string]*PerconaServerMySQLBackupPatch)[vs[1].(string)]
	}).(PerconaServerMySQLBackupPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLBackupPatchInput)(nil)).Elem(), &PerconaServerMySQLBackupPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLBackupPatchArrayInput)(nil)).Elem(), PerconaServerMySQLBackupPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLBackupPatchMapInput)(nil)).Elem(), PerconaServerMySQLBackupPatchMap{})
	pulumi.RegisterOutputType(PerconaServerMySQLBackupPatchOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLBackupPatchArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLBackupPatchMapOutput{})
}
