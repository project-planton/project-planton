// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PerconaServerMySQLBackupList is a list of PerconaServerMySQLBackup
type PerconaServerMySQLBackupList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of perconaservermysqlbackups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PerconaServerMySQLBackupTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPerconaServerMySQLBackupList registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMySQLBackupList(ctx *pulumi.Context,
	name string, args *PerconaServerMySQLBackupListArgs, opts ...pulumi.ResourceOption) (*PerconaServerMySQLBackupList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("ps.percona.com/v1")
	args.Kind = pulumi.StringPtr("PerconaServerMySQLBackupList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMySQLBackupList
	err := ctx.RegisterResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLBackupList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMySQLBackupList gets an existing PerconaServerMySQLBackupList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMySQLBackupList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMySQLBackupListState, opts ...pulumi.ResourceOption) (*PerconaServerMySQLBackupList, error) {
	var resource PerconaServerMySQLBackupList
	err := ctx.ReadResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLBackupList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMySQLBackupList resources.
type perconaServerMySQLBackupListState struct {
}

type PerconaServerMySQLBackupListState struct {
}

func (PerconaServerMySQLBackupListState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLBackupListState)(nil)).Elem()
}

type perconaServerMySQLBackupListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of perconaservermysqlbackups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PerconaServerMySQLBackupType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PerconaServerMySQLBackupList resource.
type PerconaServerMySQLBackupListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of perconaservermysqlbackups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PerconaServerMySQLBackupTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PerconaServerMySQLBackupListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLBackupListArgs)(nil)).Elem()
}

type PerconaServerMySQLBackupListInput interface {
	pulumi.Input

	ToPerconaServerMySQLBackupListOutput() PerconaServerMySQLBackupListOutput
	ToPerconaServerMySQLBackupListOutputWithContext(ctx context.Context) PerconaServerMySQLBackupListOutput
}

func (*PerconaServerMySQLBackupList) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLBackupList)(nil)).Elem()
}

func (i *PerconaServerMySQLBackupList) ToPerconaServerMySQLBackupListOutput() PerconaServerMySQLBackupListOutput {
	return i.ToPerconaServerMySQLBackupListOutputWithContext(context.Background())
}

func (i *PerconaServerMySQLBackupList) ToPerconaServerMySQLBackupListOutputWithContext(ctx context.Context) PerconaServerMySQLBackupListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLBackupListOutput)
}

// PerconaServerMySQLBackupListArrayInput is an input type that accepts PerconaServerMySQLBackupListArray and PerconaServerMySQLBackupListArrayOutput values.
// You can construct a concrete instance of `PerconaServerMySQLBackupListArrayInput` via:
//
//	PerconaServerMySQLBackupListArray{ PerconaServerMySQLBackupListArgs{...} }
type PerconaServerMySQLBackupListArrayInput interface {
	pulumi.Input

	ToPerconaServerMySQLBackupListArrayOutput() PerconaServerMySQLBackupListArrayOutput
	ToPerconaServerMySQLBackupListArrayOutputWithContext(context.Context) PerconaServerMySQLBackupListArrayOutput
}

type PerconaServerMySQLBackupListArray []PerconaServerMySQLBackupListInput

func (PerconaServerMySQLBackupListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLBackupList)(nil)).Elem()
}

func (i PerconaServerMySQLBackupListArray) ToPerconaServerMySQLBackupListArrayOutput() PerconaServerMySQLBackupListArrayOutput {
	return i.ToPerconaServerMySQLBackupListArrayOutputWithContext(context.Background())
}

func (i PerconaServerMySQLBackupListArray) ToPerconaServerMySQLBackupListArrayOutputWithContext(ctx context.Context) PerconaServerMySQLBackupListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLBackupListArrayOutput)
}

// PerconaServerMySQLBackupListMapInput is an input type that accepts PerconaServerMySQLBackupListMap and PerconaServerMySQLBackupListMapOutput values.
// You can construct a concrete instance of `PerconaServerMySQLBackupListMapInput` via:
//
//	PerconaServerMySQLBackupListMap{ "key": PerconaServerMySQLBackupListArgs{...} }
type PerconaServerMySQLBackupListMapInput interface {
	pulumi.Input

	ToPerconaServerMySQLBackupListMapOutput() PerconaServerMySQLBackupListMapOutput
	ToPerconaServerMySQLBackupListMapOutputWithContext(context.Context) PerconaServerMySQLBackupListMapOutput
}

type PerconaServerMySQLBackupListMap map[string]PerconaServerMySQLBackupListInput

func (PerconaServerMySQLBackupListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLBackupList)(nil)).Elem()
}

func (i PerconaServerMySQLBackupListMap) ToPerconaServerMySQLBackupListMapOutput() PerconaServerMySQLBackupListMapOutput {
	return i.ToPerconaServerMySQLBackupListMapOutputWithContext(context.Background())
}

func (i PerconaServerMySQLBackupListMap) ToPerconaServerMySQLBackupListMapOutputWithContext(ctx context.Context) PerconaServerMySQLBackupListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLBackupListMapOutput)
}

type PerconaServerMySQLBackupListOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLBackupListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLBackupList)(nil)).Elem()
}

func (o PerconaServerMySQLBackupListOutput) ToPerconaServerMySQLBackupListOutput() PerconaServerMySQLBackupListOutput {
	return o
}

func (o PerconaServerMySQLBackupListOutput) ToPerconaServerMySQLBackupListOutputWithContext(ctx context.Context) PerconaServerMySQLBackupListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMySQLBackupListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackupList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of perconaservermysqlbackups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PerconaServerMySQLBackupListOutput) Items() PerconaServerMySQLBackupTypeArrayOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackupList) PerconaServerMySQLBackupTypeArrayOutput { return v.Items }).(PerconaServerMySQLBackupTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMySQLBackupListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackupList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMySQLBackupListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackupList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PerconaServerMySQLBackupListArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLBackupListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLBackupList)(nil)).Elem()
}

func (o PerconaServerMySQLBackupListArrayOutput) ToPerconaServerMySQLBackupListArrayOutput() PerconaServerMySQLBackupListArrayOutput {
	return o
}

func (o PerconaServerMySQLBackupListArrayOutput) ToPerconaServerMySQLBackupListArrayOutputWithContext(ctx context.Context) PerconaServerMySQLBackupListArrayOutput {
	return o
}

func (o PerconaServerMySQLBackupListArrayOutput) Index(i pulumi.IntInput) PerconaServerMySQLBackupListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMySQLBackupList {
		return vs[0].([]*PerconaServerMySQLBackupList)[vs[1].(int)]
	}).(PerconaServerMySQLBackupListOutput)
}

type PerconaServerMySQLBackupListMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLBackupListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLBackupList)(nil)).Elem()
}

func (o PerconaServerMySQLBackupListMapOutput) ToPerconaServerMySQLBackupListMapOutput() PerconaServerMySQLBackupListMapOutput {
	return o
}

func (o PerconaServerMySQLBackupListMapOutput) ToPerconaServerMySQLBackupListMapOutputWithContext(ctx context.Context) PerconaServerMySQLBackupListMapOutput {
	return o
}

func (o PerconaServerMySQLBackupListMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMySQLBackupListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMySQLBackupList {
		return vs[0].(map[string]*PerconaServerMySQLBackupList)[vs[1].(string)]
	}).(PerconaServerMySQLBackupListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLBackupListInput)(nil)).Elem(), &PerconaServerMySQLBackupList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLBackupListArrayInput)(nil)).Elem(), PerconaServerMySQLBackupListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLBackupListMapInput)(nil)).Elem(), PerconaServerMySQLBackupListMap{})
	pulumi.RegisterOutputType(PerconaServerMySQLBackupListOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLBackupListArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLBackupListMapOutput{})
}
