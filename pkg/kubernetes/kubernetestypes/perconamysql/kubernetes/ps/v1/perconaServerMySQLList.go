// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PerconaServerMySQLList is a list of PerconaServerMySQL
type PerconaServerMySQLList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of perconaservermysqls. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PerconaServerMySQLTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPerconaServerMySQLList registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMySQLList(ctx *pulumi.Context,
	name string, args *PerconaServerMySQLListArgs, opts ...pulumi.ResourceOption) (*PerconaServerMySQLList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("ps.percona.com/v1")
	args.Kind = pulumi.StringPtr("PerconaServerMySQLList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMySQLList
	err := ctx.RegisterResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMySQLList gets an existing PerconaServerMySQLList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMySQLList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMySQLListState, opts ...pulumi.ResourceOption) (*PerconaServerMySQLList, error) {
	var resource PerconaServerMySQLList
	err := ctx.ReadResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMySQLList resources.
type perconaServerMySQLListState struct {
}

type PerconaServerMySQLListState struct {
}

func (PerconaServerMySQLListState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLListState)(nil)).Elem()
}

type perconaServerMySQLListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of perconaservermysqls. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PerconaServerMySQLType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PerconaServerMySQLList resource.
type PerconaServerMySQLListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of perconaservermysqls. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PerconaServerMySQLTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PerconaServerMySQLListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLListArgs)(nil)).Elem()
}

type PerconaServerMySQLListInput interface {
	pulumi.Input

	ToPerconaServerMySQLListOutput() PerconaServerMySQLListOutput
	ToPerconaServerMySQLListOutputWithContext(ctx context.Context) PerconaServerMySQLListOutput
}

func (*PerconaServerMySQLList) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLList)(nil)).Elem()
}

func (i *PerconaServerMySQLList) ToPerconaServerMySQLListOutput() PerconaServerMySQLListOutput {
	return i.ToPerconaServerMySQLListOutputWithContext(context.Background())
}

func (i *PerconaServerMySQLList) ToPerconaServerMySQLListOutputWithContext(ctx context.Context) PerconaServerMySQLListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLListOutput)
}

// PerconaServerMySQLListArrayInput is an input type that accepts PerconaServerMySQLListArray and PerconaServerMySQLListArrayOutput values.
// You can construct a concrete instance of `PerconaServerMySQLListArrayInput` via:
//
//	PerconaServerMySQLListArray{ PerconaServerMySQLListArgs{...} }
type PerconaServerMySQLListArrayInput interface {
	pulumi.Input

	ToPerconaServerMySQLListArrayOutput() PerconaServerMySQLListArrayOutput
	ToPerconaServerMySQLListArrayOutputWithContext(context.Context) PerconaServerMySQLListArrayOutput
}

type PerconaServerMySQLListArray []PerconaServerMySQLListInput

func (PerconaServerMySQLListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLList)(nil)).Elem()
}

func (i PerconaServerMySQLListArray) ToPerconaServerMySQLListArrayOutput() PerconaServerMySQLListArrayOutput {
	return i.ToPerconaServerMySQLListArrayOutputWithContext(context.Background())
}

func (i PerconaServerMySQLListArray) ToPerconaServerMySQLListArrayOutputWithContext(ctx context.Context) PerconaServerMySQLListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLListArrayOutput)
}

// PerconaServerMySQLListMapInput is an input type that accepts PerconaServerMySQLListMap and PerconaServerMySQLListMapOutput values.
// You can construct a concrete instance of `PerconaServerMySQLListMapInput` via:
//
//	PerconaServerMySQLListMap{ "key": PerconaServerMySQLListArgs{...} }
type PerconaServerMySQLListMapInput interface {
	pulumi.Input

	ToPerconaServerMySQLListMapOutput() PerconaServerMySQLListMapOutput
	ToPerconaServerMySQLListMapOutputWithContext(context.Context) PerconaServerMySQLListMapOutput
}

type PerconaServerMySQLListMap map[string]PerconaServerMySQLListInput

func (PerconaServerMySQLListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLList)(nil)).Elem()
}

func (i PerconaServerMySQLListMap) ToPerconaServerMySQLListMapOutput() PerconaServerMySQLListMapOutput {
	return i.ToPerconaServerMySQLListMapOutputWithContext(context.Background())
}

func (i PerconaServerMySQLListMap) ToPerconaServerMySQLListMapOutputWithContext(ctx context.Context) PerconaServerMySQLListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLListMapOutput)
}

type PerconaServerMySQLListOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLList)(nil)).Elem()
}

func (o PerconaServerMySQLListOutput) ToPerconaServerMySQLListOutput() PerconaServerMySQLListOutput {
	return o
}

func (o PerconaServerMySQLListOutput) ToPerconaServerMySQLListOutputWithContext(ctx context.Context) PerconaServerMySQLListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMySQLListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMySQLList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of perconaservermysqls. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PerconaServerMySQLListOutput) Items() PerconaServerMySQLTypeArrayOutput {
	return o.ApplyT(func(v *PerconaServerMySQLList) PerconaServerMySQLTypeArrayOutput { return v.Items }).(PerconaServerMySQLTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMySQLListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMySQLList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMySQLListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PerconaServerMySQLList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PerconaServerMySQLListArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLList)(nil)).Elem()
}

func (o PerconaServerMySQLListArrayOutput) ToPerconaServerMySQLListArrayOutput() PerconaServerMySQLListArrayOutput {
	return o
}

func (o PerconaServerMySQLListArrayOutput) ToPerconaServerMySQLListArrayOutputWithContext(ctx context.Context) PerconaServerMySQLListArrayOutput {
	return o
}

func (o PerconaServerMySQLListArrayOutput) Index(i pulumi.IntInput) PerconaServerMySQLListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMySQLList {
		return vs[0].([]*PerconaServerMySQLList)[vs[1].(int)]
	}).(PerconaServerMySQLListOutput)
}

type PerconaServerMySQLListMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLList)(nil)).Elem()
}

func (o PerconaServerMySQLListMapOutput) ToPerconaServerMySQLListMapOutput() PerconaServerMySQLListMapOutput {
	return o
}

func (o PerconaServerMySQLListMapOutput) ToPerconaServerMySQLListMapOutputWithContext(ctx context.Context) PerconaServerMySQLListMapOutput {
	return o
}

func (o PerconaServerMySQLListMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMySQLListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMySQLList {
		return vs[0].(map[string]*PerconaServerMySQLList)[vs[1].(string)]
	}).(PerconaServerMySQLListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLListInput)(nil)).Elem(), &PerconaServerMySQLList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLListArrayInput)(nil)).Elem(), PerconaServerMySQLListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLListMapInput)(nil)).Elem(), PerconaServerMySQLListMap{})
	pulumi.RegisterOutputType(PerconaServerMySQLListOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLListArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLListMapOutput{})
}
