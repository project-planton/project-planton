// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PerconaServerMySQLBackup struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput                 `pulumi:"metadata"`
	Spec     PerconaServerMySQLBackupSpecOutput      `pulumi:"spec"`
	Status   PerconaServerMySQLBackupStatusPtrOutput `pulumi:"status"`
}

// NewPerconaServerMySQLBackup registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMySQLBackup(ctx *pulumi.Context,
	name string, args *PerconaServerMySQLBackupArgs, opts ...pulumi.ResourceOption) (*PerconaServerMySQLBackup, error) {
	if args == nil {
		args = &PerconaServerMySQLBackupArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("ps.percona.com/v1")
	args.Kind = pulumi.StringPtr("PerconaServerMySQLBackup")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMySQLBackup
	err := ctx.RegisterResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMySQLBackup gets an existing PerconaServerMySQLBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMySQLBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMySQLBackupState, opts ...pulumi.ResourceOption) (*PerconaServerMySQLBackup, error) {
	var resource PerconaServerMySQLBackup
	err := ctx.ReadResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMySQLBackup resources.
type perconaServerMySQLBackupState struct {
}

type PerconaServerMySQLBackupState struct {
}

func (PerconaServerMySQLBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLBackupState)(nil)).Elem()
}

type perconaServerMySQLBackupArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta            `pulumi:"metadata"`
	Spec     *PerconaServerMySQLBackupSpec `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaServerMySQLBackup resource.
type PerconaServerMySQLBackupArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PerconaServerMySQLBackupSpecPtrInput
}

func (PerconaServerMySQLBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLBackupArgs)(nil)).Elem()
}

type PerconaServerMySQLBackupInput interface {
	pulumi.Input

	ToPerconaServerMySQLBackupOutput() PerconaServerMySQLBackupOutput
	ToPerconaServerMySQLBackupOutputWithContext(ctx context.Context) PerconaServerMySQLBackupOutput
}

func (*PerconaServerMySQLBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLBackup)(nil)).Elem()
}

func (i *PerconaServerMySQLBackup) ToPerconaServerMySQLBackupOutput() PerconaServerMySQLBackupOutput {
	return i.ToPerconaServerMySQLBackupOutputWithContext(context.Background())
}

func (i *PerconaServerMySQLBackup) ToPerconaServerMySQLBackupOutputWithContext(ctx context.Context) PerconaServerMySQLBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLBackupOutput)
}

// PerconaServerMySQLBackupArrayInput is an input type that accepts PerconaServerMySQLBackupArray and PerconaServerMySQLBackupArrayOutput values.
// You can construct a concrete instance of `PerconaServerMySQLBackupArrayInput` via:
//
//	PerconaServerMySQLBackupArray{ PerconaServerMySQLBackupArgs{...} }
type PerconaServerMySQLBackupArrayInput interface {
	pulumi.Input

	ToPerconaServerMySQLBackupArrayOutput() PerconaServerMySQLBackupArrayOutput
	ToPerconaServerMySQLBackupArrayOutputWithContext(context.Context) PerconaServerMySQLBackupArrayOutput
}

type PerconaServerMySQLBackupArray []PerconaServerMySQLBackupInput

func (PerconaServerMySQLBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLBackup)(nil)).Elem()
}

func (i PerconaServerMySQLBackupArray) ToPerconaServerMySQLBackupArrayOutput() PerconaServerMySQLBackupArrayOutput {
	return i.ToPerconaServerMySQLBackupArrayOutputWithContext(context.Background())
}

func (i PerconaServerMySQLBackupArray) ToPerconaServerMySQLBackupArrayOutputWithContext(ctx context.Context) PerconaServerMySQLBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLBackupArrayOutput)
}

// PerconaServerMySQLBackupMapInput is an input type that accepts PerconaServerMySQLBackupMap and PerconaServerMySQLBackupMapOutput values.
// You can construct a concrete instance of `PerconaServerMySQLBackupMapInput` via:
//
//	PerconaServerMySQLBackupMap{ "key": PerconaServerMySQLBackupArgs{...} }
type PerconaServerMySQLBackupMapInput interface {
	pulumi.Input

	ToPerconaServerMySQLBackupMapOutput() PerconaServerMySQLBackupMapOutput
	ToPerconaServerMySQLBackupMapOutputWithContext(context.Context) PerconaServerMySQLBackupMapOutput
}

type PerconaServerMySQLBackupMap map[string]PerconaServerMySQLBackupInput

func (PerconaServerMySQLBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLBackup)(nil)).Elem()
}

func (i PerconaServerMySQLBackupMap) ToPerconaServerMySQLBackupMapOutput() PerconaServerMySQLBackupMapOutput {
	return i.ToPerconaServerMySQLBackupMapOutputWithContext(context.Background())
}

func (i PerconaServerMySQLBackupMap) ToPerconaServerMySQLBackupMapOutputWithContext(ctx context.Context) PerconaServerMySQLBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLBackupMapOutput)
}

type PerconaServerMySQLBackupOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLBackup)(nil)).Elem()
}

func (o PerconaServerMySQLBackupOutput) ToPerconaServerMySQLBackupOutput() PerconaServerMySQLBackupOutput {
	return o
}

func (o PerconaServerMySQLBackupOutput) ToPerconaServerMySQLBackupOutputWithContext(ctx context.Context) PerconaServerMySQLBackupOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMySQLBackupOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackup) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMySQLBackupOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackup) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMySQLBackupOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackup) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PerconaServerMySQLBackupOutput) Spec() PerconaServerMySQLBackupSpecOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackup) PerconaServerMySQLBackupSpecOutput { return v.Spec }).(PerconaServerMySQLBackupSpecOutput)
}

func (o PerconaServerMySQLBackupOutput) Status() PerconaServerMySQLBackupStatusPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLBackup) PerconaServerMySQLBackupStatusPtrOutput { return v.Status }).(PerconaServerMySQLBackupStatusPtrOutput)
}

type PerconaServerMySQLBackupArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLBackup)(nil)).Elem()
}

func (o PerconaServerMySQLBackupArrayOutput) ToPerconaServerMySQLBackupArrayOutput() PerconaServerMySQLBackupArrayOutput {
	return o
}

func (o PerconaServerMySQLBackupArrayOutput) ToPerconaServerMySQLBackupArrayOutputWithContext(ctx context.Context) PerconaServerMySQLBackupArrayOutput {
	return o
}

func (o PerconaServerMySQLBackupArrayOutput) Index(i pulumi.IntInput) PerconaServerMySQLBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMySQLBackup {
		return vs[0].([]*PerconaServerMySQLBackup)[vs[1].(int)]
	}).(PerconaServerMySQLBackupOutput)
}

type PerconaServerMySQLBackupMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLBackup)(nil)).Elem()
}

func (o PerconaServerMySQLBackupMapOutput) ToPerconaServerMySQLBackupMapOutput() PerconaServerMySQLBackupMapOutput {
	return o
}

func (o PerconaServerMySQLBackupMapOutput) ToPerconaServerMySQLBackupMapOutputWithContext(ctx context.Context) PerconaServerMySQLBackupMapOutput {
	return o
}

func (o PerconaServerMySQLBackupMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMySQLBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMySQLBackup {
		return vs[0].(map[string]*PerconaServerMySQLBackup)[vs[1].(string)]
	}).(PerconaServerMySQLBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLBackupInput)(nil)).Elem(), &PerconaServerMySQLBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLBackupArrayInput)(nil)).Elem(), PerconaServerMySQLBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLBackupMapInput)(nil)).Elem(), PerconaServerMySQLBackupMap{})
	pulumi.RegisterOutputType(PerconaServerMySQLBackupOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLBackupArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLBackupMapOutput{})
}
