// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type PerconaServerMySQLPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput        `pulumi:"metadata"`
	Spec     PerconaServerMySQLSpecPatchPtrOutput   `pulumi:"spec"`
	Status   PerconaServerMySQLStatusPatchPtrOutput `pulumi:"status"`
}

// NewPerconaServerMySQLPatch registers a new resource with the given unique name, arguments, and options.
func NewPerconaServerMySQLPatch(ctx *pulumi.Context,
	name string, args *PerconaServerMySQLPatchArgs, opts ...pulumi.ResourceOption) (*PerconaServerMySQLPatch, error) {
	if args == nil {
		args = &PerconaServerMySQLPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("ps.percona.com/v1")
	args.Kind = pulumi.StringPtr("PerconaServerMySQL")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PerconaServerMySQLPatch
	err := ctx.RegisterResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPerconaServerMySQLPatch gets an existing PerconaServerMySQLPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPerconaServerMySQLPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PerconaServerMySQLPatchState, opts ...pulumi.ResourceOption) (*PerconaServerMySQLPatch, error) {
	var resource PerconaServerMySQLPatch
	err := ctx.ReadResource("kubernetes:ps.percona.com/v1:PerconaServerMySQLPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PerconaServerMySQLPatch resources.
type perconaServerMySQLPatchState struct {
}

type PerconaServerMySQLPatchState struct {
}

func (PerconaServerMySQLPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLPatchState)(nil)).Elem()
}

type perconaServerMySQLPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch      `pulumi:"metadata"`
	Spec     *PerconaServerMySQLSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a PerconaServerMySQLPatch resource.
type PerconaServerMySQLPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PerconaServerMySQLSpecPatchPtrInput
}

func (PerconaServerMySQLPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*perconaServerMySQLPatchArgs)(nil)).Elem()
}

type PerconaServerMySQLPatchInput interface {
	pulumi.Input

	ToPerconaServerMySQLPatchOutput() PerconaServerMySQLPatchOutput
	ToPerconaServerMySQLPatchOutputWithContext(ctx context.Context) PerconaServerMySQLPatchOutput
}

func (*PerconaServerMySQLPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLPatch)(nil)).Elem()
}

func (i *PerconaServerMySQLPatch) ToPerconaServerMySQLPatchOutput() PerconaServerMySQLPatchOutput {
	return i.ToPerconaServerMySQLPatchOutputWithContext(context.Background())
}

func (i *PerconaServerMySQLPatch) ToPerconaServerMySQLPatchOutputWithContext(ctx context.Context) PerconaServerMySQLPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLPatchOutput)
}

// PerconaServerMySQLPatchArrayInput is an input type that accepts PerconaServerMySQLPatchArray and PerconaServerMySQLPatchArrayOutput values.
// You can construct a concrete instance of `PerconaServerMySQLPatchArrayInput` via:
//
//	PerconaServerMySQLPatchArray{ PerconaServerMySQLPatchArgs{...} }
type PerconaServerMySQLPatchArrayInput interface {
	pulumi.Input

	ToPerconaServerMySQLPatchArrayOutput() PerconaServerMySQLPatchArrayOutput
	ToPerconaServerMySQLPatchArrayOutputWithContext(context.Context) PerconaServerMySQLPatchArrayOutput
}

type PerconaServerMySQLPatchArray []PerconaServerMySQLPatchInput

func (PerconaServerMySQLPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLPatch)(nil)).Elem()
}

func (i PerconaServerMySQLPatchArray) ToPerconaServerMySQLPatchArrayOutput() PerconaServerMySQLPatchArrayOutput {
	return i.ToPerconaServerMySQLPatchArrayOutputWithContext(context.Background())
}

func (i PerconaServerMySQLPatchArray) ToPerconaServerMySQLPatchArrayOutputWithContext(ctx context.Context) PerconaServerMySQLPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLPatchArrayOutput)
}

// PerconaServerMySQLPatchMapInput is an input type that accepts PerconaServerMySQLPatchMap and PerconaServerMySQLPatchMapOutput values.
// You can construct a concrete instance of `PerconaServerMySQLPatchMapInput` via:
//
//	PerconaServerMySQLPatchMap{ "key": PerconaServerMySQLPatchArgs{...} }
type PerconaServerMySQLPatchMapInput interface {
	pulumi.Input

	ToPerconaServerMySQLPatchMapOutput() PerconaServerMySQLPatchMapOutput
	ToPerconaServerMySQLPatchMapOutputWithContext(context.Context) PerconaServerMySQLPatchMapOutput
}

type PerconaServerMySQLPatchMap map[string]PerconaServerMySQLPatchInput

func (PerconaServerMySQLPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLPatch)(nil)).Elem()
}

func (i PerconaServerMySQLPatchMap) ToPerconaServerMySQLPatchMapOutput() PerconaServerMySQLPatchMapOutput {
	return i.ToPerconaServerMySQLPatchMapOutputWithContext(context.Background())
}

func (i PerconaServerMySQLPatchMap) ToPerconaServerMySQLPatchMapOutputWithContext(ctx context.Context) PerconaServerMySQLPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerconaServerMySQLPatchMapOutput)
}

type PerconaServerMySQLPatchOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PerconaServerMySQLPatch)(nil)).Elem()
}

func (o PerconaServerMySQLPatchOutput) ToPerconaServerMySQLPatchOutput() PerconaServerMySQLPatchOutput {
	return o
}

func (o PerconaServerMySQLPatchOutput) ToPerconaServerMySQLPatchOutputWithContext(ctx context.Context) PerconaServerMySQLPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PerconaServerMySQLPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PerconaServerMySQLPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PerconaServerMySQLPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PerconaServerMySQLPatchOutput) Spec() PerconaServerMySQLSpecPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLPatch) PerconaServerMySQLSpecPatchPtrOutput { return v.Spec }).(PerconaServerMySQLSpecPatchPtrOutput)
}

func (o PerconaServerMySQLPatchOutput) Status() PerconaServerMySQLStatusPatchPtrOutput {
	return o.ApplyT(func(v *PerconaServerMySQLPatch) PerconaServerMySQLStatusPatchPtrOutput { return v.Status }).(PerconaServerMySQLStatusPatchPtrOutput)
}

type PerconaServerMySQLPatchArrayOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PerconaServerMySQLPatch)(nil)).Elem()
}

func (o PerconaServerMySQLPatchArrayOutput) ToPerconaServerMySQLPatchArrayOutput() PerconaServerMySQLPatchArrayOutput {
	return o
}

func (o PerconaServerMySQLPatchArrayOutput) ToPerconaServerMySQLPatchArrayOutputWithContext(ctx context.Context) PerconaServerMySQLPatchArrayOutput {
	return o
}

func (o PerconaServerMySQLPatchArrayOutput) Index(i pulumi.IntInput) PerconaServerMySQLPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PerconaServerMySQLPatch {
		return vs[0].([]*PerconaServerMySQLPatch)[vs[1].(int)]
	}).(PerconaServerMySQLPatchOutput)
}

type PerconaServerMySQLPatchMapOutput struct{ *pulumi.OutputState }

func (PerconaServerMySQLPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PerconaServerMySQLPatch)(nil)).Elem()
}

func (o PerconaServerMySQLPatchMapOutput) ToPerconaServerMySQLPatchMapOutput() PerconaServerMySQLPatchMapOutput {
	return o
}

func (o PerconaServerMySQLPatchMapOutput) ToPerconaServerMySQLPatchMapOutputWithContext(ctx context.Context) PerconaServerMySQLPatchMapOutput {
	return o
}

func (o PerconaServerMySQLPatchMapOutput) MapIndex(k pulumi.StringInput) PerconaServerMySQLPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PerconaServerMySQLPatch {
		return vs[0].(map[string]*PerconaServerMySQLPatch)[vs[1].(string)]
	}).(PerconaServerMySQLPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLPatchInput)(nil)).Elem(), &PerconaServerMySQLPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLPatchArrayInput)(nil)).Elem(), PerconaServerMySQLPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PerconaServerMySQLPatchMapInput)(nil)).Elem(), PerconaServerMySQLPatchMap{})
	pulumi.RegisterOutputType(PerconaServerMySQLPatchOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLPatchArrayOutput{})
	pulumi.RegisterOutputType(PerconaServerMySQLPatchMapOutput{})
}
