// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
type GCRAccessTokenPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     GCRAccessTokenSpecPatchPtrOutput `pulumi:"spec"`
}

// NewGCRAccessTokenPatch registers a new resource with the given unique name, arguments, and options.
func NewGCRAccessTokenPatch(ctx *pulumi.Context,
	name string, args *GCRAccessTokenPatchArgs, opts ...pulumi.ResourceOption) (*GCRAccessTokenPatch, error) {
	if args == nil {
		args = &GCRAccessTokenPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("GCRAccessToken")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GCRAccessTokenPatch
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:GCRAccessTokenPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGCRAccessTokenPatch gets an existing GCRAccessTokenPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGCRAccessTokenPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GCRAccessTokenPatchState, opts ...pulumi.ResourceOption) (*GCRAccessTokenPatch, error) {
	var resource GCRAccessTokenPatch
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:GCRAccessTokenPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GCRAccessTokenPatch resources.
type gcraccessTokenPatchState struct {
}

type GCRAccessTokenPatchState struct {
}

func (GCRAccessTokenPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*gcraccessTokenPatchState)(nil)).Elem()
}

type gcraccessTokenPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *GCRAccessTokenSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a GCRAccessTokenPatch resource.
type GCRAccessTokenPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     GCRAccessTokenSpecPatchPtrInput
}

func (GCRAccessTokenPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gcraccessTokenPatchArgs)(nil)).Elem()
}

type GCRAccessTokenPatchInput interface {
	pulumi.Input

	ToGCRAccessTokenPatchOutput() GCRAccessTokenPatchOutput
	ToGCRAccessTokenPatchOutputWithContext(ctx context.Context) GCRAccessTokenPatchOutput
}

func (*GCRAccessTokenPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenPatch)(nil)).Elem()
}

func (i *GCRAccessTokenPatch) ToGCRAccessTokenPatchOutput() GCRAccessTokenPatchOutput {
	return i.ToGCRAccessTokenPatchOutputWithContext(context.Background())
}

func (i *GCRAccessTokenPatch) ToGCRAccessTokenPatchOutputWithContext(ctx context.Context) GCRAccessTokenPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenPatchOutput)
}

// GCRAccessTokenPatchArrayInput is an input type that accepts GCRAccessTokenPatchArray and GCRAccessTokenPatchArrayOutput values.
// You can construct a concrete instance of `GCRAccessTokenPatchArrayInput` via:
//
//	GCRAccessTokenPatchArray{ GCRAccessTokenPatchArgs{...} }
type GCRAccessTokenPatchArrayInput interface {
	pulumi.Input

	ToGCRAccessTokenPatchArrayOutput() GCRAccessTokenPatchArrayOutput
	ToGCRAccessTokenPatchArrayOutputWithContext(context.Context) GCRAccessTokenPatchArrayOutput
}

type GCRAccessTokenPatchArray []GCRAccessTokenPatchInput

func (GCRAccessTokenPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GCRAccessTokenPatch)(nil)).Elem()
}

func (i GCRAccessTokenPatchArray) ToGCRAccessTokenPatchArrayOutput() GCRAccessTokenPatchArrayOutput {
	return i.ToGCRAccessTokenPatchArrayOutputWithContext(context.Background())
}

func (i GCRAccessTokenPatchArray) ToGCRAccessTokenPatchArrayOutputWithContext(ctx context.Context) GCRAccessTokenPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenPatchArrayOutput)
}

// GCRAccessTokenPatchMapInput is an input type that accepts GCRAccessTokenPatchMap and GCRAccessTokenPatchMapOutput values.
// You can construct a concrete instance of `GCRAccessTokenPatchMapInput` via:
//
//	GCRAccessTokenPatchMap{ "key": GCRAccessTokenPatchArgs{...} }
type GCRAccessTokenPatchMapInput interface {
	pulumi.Input

	ToGCRAccessTokenPatchMapOutput() GCRAccessTokenPatchMapOutput
	ToGCRAccessTokenPatchMapOutputWithContext(context.Context) GCRAccessTokenPatchMapOutput
}

type GCRAccessTokenPatchMap map[string]GCRAccessTokenPatchInput

func (GCRAccessTokenPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GCRAccessTokenPatch)(nil)).Elem()
}

func (i GCRAccessTokenPatchMap) ToGCRAccessTokenPatchMapOutput() GCRAccessTokenPatchMapOutput {
	return i.ToGCRAccessTokenPatchMapOutputWithContext(context.Background())
}

func (i GCRAccessTokenPatchMap) ToGCRAccessTokenPatchMapOutputWithContext(ctx context.Context) GCRAccessTokenPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenPatchMapOutput)
}

type GCRAccessTokenPatchOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenPatch)(nil)).Elem()
}

func (o GCRAccessTokenPatchOutput) ToGCRAccessTokenPatchOutput() GCRAccessTokenPatchOutput {
	return o
}

func (o GCRAccessTokenPatchOutput) ToGCRAccessTokenPatchOutputWithContext(ctx context.Context) GCRAccessTokenPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GCRAccessTokenPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GCRAccessTokenPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GCRAccessTokenPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GCRAccessTokenPatchOutput) Spec() GCRAccessTokenSpecPatchPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenPatch) GCRAccessTokenSpecPatchPtrOutput { return v.Spec }).(GCRAccessTokenSpecPatchPtrOutput)
}

type GCRAccessTokenPatchArrayOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GCRAccessTokenPatch)(nil)).Elem()
}

func (o GCRAccessTokenPatchArrayOutput) ToGCRAccessTokenPatchArrayOutput() GCRAccessTokenPatchArrayOutput {
	return o
}

func (o GCRAccessTokenPatchArrayOutput) ToGCRAccessTokenPatchArrayOutputWithContext(ctx context.Context) GCRAccessTokenPatchArrayOutput {
	return o
}

func (o GCRAccessTokenPatchArrayOutput) Index(i pulumi.IntInput) GCRAccessTokenPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GCRAccessTokenPatch {
		return vs[0].([]*GCRAccessTokenPatch)[vs[1].(int)]
	}).(GCRAccessTokenPatchOutput)
}

type GCRAccessTokenPatchMapOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GCRAccessTokenPatch)(nil)).Elem()
}

func (o GCRAccessTokenPatchMapOutput) ToGCRAccessTokenPatchMapOutput() GCRAccessTokenPatchMapOutput {
	return o
}

func (o GCRAccessTokenPatchMapOutput) ToGCRAccessTokenPatchMapOutputWithContext(ctx context.Context) GCRAccessTokenPatchMapOutput {
	return o
}

func (o GCRAccessTokenPatchMapOutput) MapIndex(k pulumi.StringInput) GCRAccessTokenPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GCRAccessTokenPatch {
		return vs[0].(map[string]*GCRAccessTokenPatch)[vs[1].(string)]
	}).(GCRAccessTokenPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenPatchInput)(nil)).Elem(), &GCRAccessTokenPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenPatchArrayInput)(nil)).Elem(), GCRAccessTokenPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenPatchMapInput)(nil)).Elem(), GCRAccessTokenPatchMap{})
	pulumi.RegisterOutputType(GCRAccessTokenPatchOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenPatchArrayOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenPatchMapOutput{})
}
