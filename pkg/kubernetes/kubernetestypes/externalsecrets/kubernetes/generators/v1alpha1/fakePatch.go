// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Fake generator is used for testing. It lets you define
// a static set of credentials that is always returned.
type FakePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     FakeSpecPatchPtrOutput          `pulumi:"spec"`
}

// NewFakePatch registers a new resource with the given unique name, arguments, and options.
func NewFakePatch(ctx *pulumi.Context,
	name string, args *FakePatchArgs, opts ...pulumi.ResourceOption) (*FakePatch, error) {
	if args == nil {
		args = &FakePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Fake")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource FakePatch
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:FakePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFakePatch gets an existing FakePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFakePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FakePatchState, opts ...pulumi.ResourceOption) (*FakePatch, error) {
	var resource FakePatch
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:FakePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FakePatch resources.
type fakePatchState struct {
}

type FakePatchState struct {
}

func (FakePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*fakePatchState)(nil)).Elem()
}

type fakePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *FakeSpecPatch          `pulumi:"spec"`
}

// The set of arguments for constructing a FakePatch resource.
type FakePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     FakeSpecPatchPtrInput
}

func (FakePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fakePatchArgs)(nil)).Elem()
}

type FakePatchInput interface {
	pulumi.Input

	ToFakePatchOutput() FakePatchOutput
	ToFakePatchOutputWithContext(ctx context.Context) FakePatchOutput
}

func (*FakePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**FakePatch)(nil)).Elem()
}

func (i *FakePatch) ToFakePatchOutput() FakePatchOutput {
	return i.ToFakePatchOutputWithContext(context.Background())
}

func (i *FakePatch) ToFakePatchOutputWithContext(ctx context.Context) FakePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakePatchOutput)
}

// FakePatchArrayInput is an input type that accepts FakePatchArray and FakePatchArrayOutput values.
// You can construct a concrete instance of `FakePatchArrayInput` via:
//
//	FakePatchArray{ FakePatchArgs{...} }
type FakePatchArrayInput interface {
	pulumi.Input

	ToFakePatchArrayOutput() FakePatchArrayOutput
	ToFakePatchArrayOutputWithContext(context.Context) FakePatchArrayOutput
}

type FakePatchArray []FakePatchInput

func (FakePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FakePatch)(nil)).Elem()
}

func (i FakePatchArray) ToFakePatchArrayOutput() FakePatchArrayOutput {
	return i.ToFakePatchArrayOutputWithContext(context.Background())
}

func (i FakePatchArray) ToFakePatchArrayOutputWithContext(ctx context.Context) FakePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakePatchArrayOutput)
}

// FakePatchMapInput is an input type that accepts FakePatchMap and FakePatchMapOutput values.
// You can construct a concrete instance of `FakePatchMapInput` via:
//
//	FakePatchMap{ "key": FakePatchArgs{...} }
type FakePatchMapInput interface {
	pulumi.Input

	ToFakePatchMapOutput() FakePatchMapOutput
	ToFakePatchMapOutputWithContext(context.Context) FakePatchMapOutput
}

type FakePatchMap map[string]FakePatchInput

func (FakePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FakePatch)(nil)).Elem()
}

func (i FakePatchMap) ToFakePatchMapOutput() FakePatchMapOutput {
	return i.ToFakePatchMapOutputWithContext(context.Background())
}

func (i FakePatchMap) ToFakePatchMapOutputWithContext(ctx context.Context) FakePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakePatchMapOutput)
}

type FakePatchOutput struct{ *pulumi.OutputState }

func (FakePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FakePatch)(nil)).Elem()
}

func (o FakePatchOutput) ToFakePatchOutput() FakePatchOutput {
	return o
}

func (o FakePatchOutput) ToFakePatchOutputWithContext(ctx context.Context) FakePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FakePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FakePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FakePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FakePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FakePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *FakePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o FakePatchOutput) Spec() FakeSpecPatchPtrOutput {
	return o.ApplyT(func(v *FakePatch) FakeSpecPatchPtrOutput { return v.Spec }).(FakeSpecPatchPtrOutput)
}

type FakePatchArrayOutput struct{ *pulumi.OutputState }

func (FakePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FakePatch)(nil)).Elem()
}

func (o FakePatchArrayOutput) ToFakePatchArrayOutput() FakePatchArrayOutput {
	return o
}

func (o FakePatchArrayOutput) ToFakePatchArrayOutputWithContext(ctx context.Context) FakePatchArrayOutput {
	return o
}

func (o FakePatchArrayOutput) Index(i pulumi.IntInput) FakePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FakePatch {
		return vs[0].([]*FakePatch)[vs[1].(int)]
	}).(FakePatchOutput)
}

type FakePatchMapOutput struct{ *pulumi.OutputState }

func (FakePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FakePatch)(nil)).Elem()
}

func (o FakePatchMapOutput) ToFakePatchMapOutput() FakePatchMapOutput {
	return o
}

func (o FakePatchMapOutput) ToFakePatchMapOutputWithContext(ctx context.Context) FakePatchMapOutput {
	return o
}

func (o FakePatchMapOutput) MapIndex(k pulumi.StringInput) FakePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FakePatch {
		return vs[0].(map[string]*FakePatch)[vs[1].(string)]
	}).(FakePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FakePatchInput)(nil)).Elem(), &FakePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakePatchArrayInput)(nil)).Elem(), FakePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakePatchMapInput)(nil)).Elem(), FakePatchMap{})
	pulumi.RegisterOutputType(FakePatchOutput{})
	pulumi.RegisterOutputType(FakePatchArrayOutput{})
	pulumi.RegisterOutputType(FakePatchMapOutput{})
}
