// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GithubAccessToken generates ghs_ accessToken
type GithubAccessToken struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput     `pulumi:"metadata"`
	Spec     GithubAccessTokenSpecOutput `pulumi:"spec"`
}

// NewGithubAccessToken registers a new resource with the given unique name, arguments, and options.
func NewGithubAccessToken(ctx *pulumi.Context,
	name string, args *GithubAccessTokenArgs, opts ...pulumi.ResourceOption) (*GithubAccessToken, error) {
	if args == nil {
		args = &GithubAccessTokenArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("GithubAccessToken")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GithubAccessToken
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:GithubAccessToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGithubAccessToken gets an existing GithubAccessToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGithubAccessToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GithubAccessTokenState, opts ...pulumi.ResourceOption) (*GithubAccessToken, error) {
	var resource GithubAccessToken
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:GithubAccessToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GithubAccessToken resources.
type githubAccessTokenState struct {
}

type GithubAccessTokenState struct {
}

func (GithubAccessTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*githubAccessTokenState)(nil)).Elem()
}

type githubAccessTokenArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     *GithubAccessTokenSpec `pulumi:"spec"`
}

// The set of arguments for constructing a GithubAccessToken resource.
type GithubAccessTokenArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     GithubAccessTokenSpecPtrInput
}

func (GithubAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*githubAccessTokenArgs)(nil)).Elem()
}

type GithubAccessTokenInput interface {
	pulumi.Input

	ToGithubAccessTokenOutput() GithubAccessTokenOutput
	ToGithubAccessTokenOutputWithContext(ctx context.Context) GithubAccessTokenOutput
}

func (*GithubAccessToken) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessToken)(nil)).Elem()
}

func (i *GithubAccessToken) ToGithubAccessTokenOutput() GithubAccessTokenOutput {
	return i.ToGithubAccessTokenOutputWithContext(context.Background())
}

func (i *GithubAccessToken) ToGithubAccessTokenOutputWithContext(ctx context.Context) GithubAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenOutput)
}

// GithubAccessTokenArrayInput is an input type that accepts GithubAccessTokenArray and GithubAccessTokenArrayOutput values.
// You can construct a concrete instance of `GithubAccessTokenArrayInput` via:
//
//	GithubAccessTokenArray{ GithubAccessTokenArgs{...} }
type GithubAccessTokenArrayInput interface {
	pulumi.Input

	ToGithubAccessTokenArrayOutput() GithubAccessTokenArrayOutput
	ToGithubAccessTokenArrayOutputWithContext(context.Context) GithubAccessTokenArrayOutput
}

type GithubAccessTokenArray []GithubAccessTokenInput

func (GithubAccessTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubAccessToken)(nil)).Elem()
}

func (i GithubAccessTokenArray) ToGithubAccessTokenArrayOutput() GithubAccessTokenArrayOutput {
	return i.ToGithubAccessTokenArrayOutputWithContext(context.Background())
}

func (i GithubAccessTokenArray) ToGithubAccessTokenArrayOutputWithContext(ctx context.Context) GithubAccessTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenArrayOutput)
}

// GithubAccessTokenMapInput is an input type that accepts GithubAccessTokenMap and GithubAccessTokenMapOutput values.
// You can construct a concrete instance of `GithubAccessTokenMapInput` via:
//
//	GithubAccessTokenMap{ "key": GithubAccessTokenArgs{...} }
type GithubAccessTokenMapInput interface {
	pulumi.Input

	ToGithubAccessTokenMapOutput() GithubAccessTokenMapOutput
	ToGithubAccessTokenMapOutputWithContext(context.Context) GithubAccessTokenMapOutput
}

type GithubAccessTokenMap map[string]GithubAccessTokenInput

func (GithubAccessTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubAccessToken)(nil)).Elem()
}

func (i GithubAccessTokenMap) ToGithubAccessTokenMapOutput() GithubAccessTokenMapOutput {
	return i.ToGithubAccessTokenMapOutputWithContext(context.Background())
}

func (i GithubAccessTokenMap) ToGithubAccessTokenMapOutputWithContext(ctx context.Context) GithubAccessTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenMapOutput)
}

type GithubAccessTokenOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessToken)(nil)).Elem()
}

func (o GithubAccessTokenOutput) ToGithubAccessTokenOutput() GithubAccessTokenOutput {
	return o
}

func (o GithubAccessTokenOutput) ToGithubAccessTokenOutputWithContext(ctx context.Context) GithubAccessTokenOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GithubAccessTokenOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubAccessToken) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GithubAccessTokenOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubAccessToken) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GithubAccessTokenOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *GithubAccessToken) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o GithubAccessTokenOutput) Spec() GithubAccessTokenSpecOutput {
	return o.ApplyT(func(v *GithubAccessToken) GithubAccessTokenSpecOutput { return v.Spec }).(GithubAccessTokenSpecOutput)
}

type GithubAccessTokenArrayOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GithubAccessToken)(nil)).Elem()
}

func (o GithubAccessTokenArrayOutput) ToGithubAccessTokenArrayOutput() GithubAccessTokenArrayOutput {
	return o
}

func (o GithubAccessTokenArrayOutput) ToGithubAccessTokenArrayOutputWithContext(ctx context.Context) GithubAccessTokenArrayOutput {
	return o
}

func (o GithubAccessTokenArrayOutput) Index(i pulumi.IntInput) GithubAccessTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GithubAccessToken {
		return vs[0].([]*GithubAccessToken)[vs[1].(int)]
	}).(GithubAccessTokenOutput)
}

type GithubAccessTokenMapOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GithubAccessToken)(nil)).Elem()
}

func (o GithubAccessTokenMapOutput) ToGithubAccessTokenMapOutput() GithubAccessTokenMapOutput {
	return o
}

func (o GithubAccessTokenMapOutput) ToGithubAccessTokenMapOutputWithContext(ctx context.Context) GithubAccessTokenMapOutput {
	return o
}

func (o GithubAccessTokenMapOutput) MapIndex(k pulumi.StringInput) GithubAccessTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GithubAccessToken {
		return vs[0].(map[string]*GithubAccessToken)[vs[1].(string)]
	}).(GithubAccessTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenInput)(nil)).Elem(), &GithubAccessToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenArrayInput)(nil)).Elem(), GithubAccessTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenMapInput)(nil)).Elem(), GithubAccessTokenMap{})
	pulumi.RegisterOutputType(GithubAccessTokenOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenArrayOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenMapOutput{})
}
