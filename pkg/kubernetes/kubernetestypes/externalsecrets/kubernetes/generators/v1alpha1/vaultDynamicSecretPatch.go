// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type VaultDynamicSecretPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput      `pulumi:"metadata"`
	Spec     VaultDynamicSecretSpecPatchPtrOutput `pulumi:"spec"`
}

// NewVaultDynamicSecretPatch registers a new resource with the given unique name, arguments, and options.
func NewVaultDynamicSecretPatch(ctx *pulumi.Context,
	name string, args *VaultDynamicSecretPatchArgs, opts ...pulumi.ResourceOption) (*VaultDynamicSecretPatch, error) {
	if args == nil {
		args = &VaultDynamicSecretPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("VaultDynamicSecret")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VaultDynamicSecretPatch
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:VaultDynamicSecretPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVaultDynamicSecretPatch gets an existing VaultDynamicSecretPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVaultDynamicSecretPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VaultDynamicSecretPatchState, opts ...pulumi.ResourceOption) (*VaultDynamicSecretPatch, error) {
	var resource VaultDynamicSecretPatch
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:VaultDynamicSecretPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VaultDynamicSecretPatch resources.
type vaultDynamicSecretPatchState struct {
}

type VaultDynamicSecretPatchState struct {
}

func (VaultDynamicSecretPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultDynamicSecretPatchState)(nil)).Elem()
}

type vaultDynamicSecretPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch      `pulumi:"metadata"`
	Spec     *VaultDynamicSecretSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a VaultDynamicSecretPatch resource.
type VaultDynamicSecretPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VaultDynamicSecretSpecPatchPtrInput
}

func (VaultDynamicSecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultDynamicSecretPatchArgs)(nil)).Elem()
}

type VaultDynamicSecretPatchInput interface {
	pulumi.Input

	ToVaultDynamicSecretPatchOutput() VaultDynamicSecretPatchOutput
	ToVaultDynamicSecretPatchOutputWithContext(ctx context.Context) VaultDynamicSecretPatchOutput
}

func (*VaultDynamicSecretPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretPatch)(nil)).Elem()
}

func (i *VaultDynamicSecretPatch) ToVaultDynamicSecretPatchOutput() VaultDynamicSecretPatchOutput {
	return i.ToVaultDynamicSecretPatchOutputWithContext(context.Background())
}

func (i *VaultDynamicSecretPatch) ToVaultDynamicSecretPatchOutputWithContext(ctx context.Context) VaultDynamicSecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretPatchOutput)
}

// VaultDynamicSecretPatchArrayInput is an input type that accepts VaultDynamicSecretPatchArray and VaultDynamicSecretPatchArrayOutput values.
// You can construct a concrete instance of `VaultDynamicSecretPatchArrayInput` via:
//
//	VaultDynamicSecretPatchArray{ VaultDynamicSecretPatchArgs{...} }
type VaultDynamicSecretPatchArrayInput interface {
	pulumi.Input

	ToVaultDynamicSecretPatchArrayOutput() VaultDynamicSecretPatchArrayOutput
	ToVaultDynamicSecretPatchArrayOutputWithContext(context.Context) VaultDynamicSecretPatchArrayOutput
}

type VaultDynamicSecretPatchArray []VaultDynamicSecretPatchInput

func (VaultDynamicSecretPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VaultDynamicSecretPatch)(nil)).Elem()
}

func (i VaultDynamicSecretPatchArray) ToVaultDynamicSecretPatchArrayOutput() VaultDynamicSecretPatchArrayOutput {
	return i.ToVaultDynamicSecretPatchArrayOutputWithContext(context.Background())
}

func (i VaultDynamicSecretPatchArray) ToVaultDynamicSecretPatchArrayOutputWithContext(ctx context.Context) VaultDynamicSecretPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretPatchArrayOutput)
}

// VaultDynamicSecretPatchMapInput is an input type that accepts VaultDynamicSecretPatchMap and VaultDynamicSecretPatchMapOutput values.
// You can construct a concrete instance of `VaultDynamicSecretPatchMapInput` via:
//
//	VaultDynamicSecretPatchMap{ "key": VaultDynamicSecretPatchArgs{...} }
type VaultDynamicSecretPatchMapInput interface {
	pulumi.Input

	ToVaultDynamicSecretPatchMapOutput() VaultDynamicSecretPatchMapOutput
	ToVaultDynamicSecretPatchMapOutputWithContext(context.Context) VaultDynamicSecretPatchMapOutput
}

type VaultDynamicSecretPatchMap map[string]VaultDynamicSecretPatchInput

func (VaultDynamicSecretPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VaultDynamicSecretPatch)(nil)).Elem()
}

func (i VaultDynamicSecretPatchMap) ToVaultDynamicSecretPatchMapOutput() VaultDynamicSecretPatchMapOutput {
	return i.ToVaultDynamicSecretPatchMapOutputWithContext(context.Background())
}

func (i VaultDynamicSecretPatchMap) ToVaultDynamicSecretPatchMapOutputWithContext(ctx context.Context) VaultDynamicSecretPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretPatchMapOutput)
}

type VaultDynamicSecretPatchOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretPatch)(nil)).Elem()
}

func (o VaultDynamicSecretPatchOutput) ToVaultDynamicSecretPatchOutput() VaultDynamicSecretPatchOutput {
	return o
}

func (o VaultDynamicSecretPatchOutput) ToVaultDynamicSecretPatchOutputWithContext(ctx context.Context) VaultDynamicSecretPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VaultDynamicSecretPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VaultDynamicSecretPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VaultDynamicSecretPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VaultDynamicSecretPatchOutput) Spec() VaultDynamicSecretSpecPatchPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretPatch) VaultDynamicSecretSpecPatchPtrOutput { return v.Spec }).(VaultDynamicSecretSpecPatchPtrOutput)
}

type VaultDynamicSecretPatchArrayOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VaultDynamicSecretPatch)(nil)).Elem()
}

func (o VaultDynamicSecretPatchArrayOutput) ToVaultDynamicSecretPatchArrayOutput() VaultDynamicSecretPatchArrayOutput {
	return o
}

func (o VaultDynamicSecretPatchArrayOutput) ToVaultDynamicSecretPatchArrayOutputWithContext(ctx context.Context) VaultDynamicSecretPatchArrayOutput {
	return o
}

func (o VaultDynamicSecretPatchArrayOutput) Index(i pulumi.IntInput) VaultDynamicSecretPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VaultDynamicSecretPatch {
		return vs[0].([]*VaultDynamicSecretPatch)[vs[1].(int)]
	}).(VaultDynamicSecretPatchOutput)
}

type VaultDynamicSecretPatchMapOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VaultDynamicSecretPatch)(nil)).Elem()
}

func (o VaultDynamicSecretPatchMapOutput) ToVaultDynamicSecretPatchMapOutput() VaultDynamicSecretPatchMapOutput {
	return o
}

func (o VaultDynamicSecretPatchMapOutput) ToVaultDynamicSecretPatchMapOutputWithContext(ctx context.Context) VaultDynamicSecretPatchMapOutput {
	return o
}

func (o VaultDynamicSecretPatchMapOutput) MapIndex(k pulumi.StringInput) VaultDynamicSecretPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VaultDynamicSecretPatch {
		return vs[0].(map[string]*VaultDynamicSecretPatch)[vs[1].(string)]
	}).(VaultDynamicSecretPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretPatchInput)(nil)).Elem(), &VaultDynamicSecretPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretPatchArrayInput)(nil)).Elem(), VaultDynamicSecretPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretPatchMapInput)(nil)).Elem(), VaultDynamicSecretPatchMap{})
	pulumi.RegisterOutputType(VaultDynamicSecretPatchOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretPatchArrayOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretPatchMapOutput{})
}
