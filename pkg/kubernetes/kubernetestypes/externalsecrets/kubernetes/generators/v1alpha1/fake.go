// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Fake generator is used for testing. It lets you define
// a static set of credentials that is always returned.
type Fake struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     FakeSpecOutput          `pulumi:"spec"`
}

// NewFake registers a new resource with the given unique name, arguments, and options.
func NewFake(ctx *pulumi.Context,
	name string, args *FakeArgs, opts ...pulumi.ResourceOption) (*Fake, error) {
	if args == nil {
		args = &FakeArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("Fake")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Fake
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:Fake", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFake gets an existing Fake resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFake(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FakeState, opts ...pulumi.ResourceOption) (*Fake, error) {
	var resource Fake
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:Fake", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fake resources.
type fakeState struct {
}

type FakeState struct {
}

func (FakeState) ElementType() reflect.Type {
	return reflect.TypeOf((*fakeState)(nil)).Elem()
}

type fakeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *FakeSpec          `pulumi:"spec"`
}

// The set of arguments for constructing a Fake resource.
type FakeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     FakeSpecPtrInput
}

func (FakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fakeArgs)(nil)).Elem()
}

type FakeInput interface {
	pulumi.Input

	ToFakeOutput() FakeOutput
	ToFakeOutputWithContext(ctx context.Context) FakeOutput
}

func (*Fake) ElementType() reflect.Type {
	return reflect.TypeOf((**Fake)(nil)).Elem()
}

func (i *Fake) ToFakeOutput() FakeOutput {
	return i.ToFakeOutputWithContext(context.Background())
}

func (i *Fake) ToFakeOutputWithContext(ctx context.Context) FakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeOutput)
}

// FakeArrayInput is an input type that accepts FakeArray and FakeArrayOutput values.
// You can construct a concrete instance of `FakeArrayInput` via:
//
//	FakeArray{ FakeArgs{...} }
type FakeArrayInput interface {
	pulumi.Input

	ToFakeArrayOutput() FakeArrayOutput
	ToFakeArrayOutputWithContext(context.Context) FakeArrayOutput
}

type FakeArray []FakeInput

func (FakeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fake)(nil)).Elem()
}

func (i FakeArray) ToFakeArrayOutput() FakeArrayOutput {
	return i.ToFakeArrayOutputWithContext(context.Background())
}

func (i FakeArray) ToFakeArrayOutputWithContext(ctx context.Context) FakeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeArrayOutput)
}

// FakeMapInput is an input type that accepts FakeMap and FakeMapOutput values.
// You can construct a concrete instance of `FakeMapInput` via:
//
//	FakeMap{ "key": FakeArgs{...} }
type FakeMapInput interface {
	pulumi.Input

	ToFakeMapOutput() FakeMapOutput
	ToFakeMapOutputWithContext(context.Context) FakeMapOutput
}

type FakeMap map[string]FakeInput

func (FakeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fake)(nil)).Elem()
}

func (i FakeMap) ToFakeMapOutput() FakeMapOutput {
	return i.ToFakeMapOutputWithContext(context.Background())
}

func (i FakeMap) ToFakeMapOutputWithContext(ctx context.Context) FakeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeMapOutput)
}

type FakeOutput struct{ *pulumi.OutputState }

func (FakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fake)(nil)).Elem()
}

func (o FakeOutput) ToFakeOutput() FakeOutput {
	return o
}

func (o FakeOutput) ToFakeOutputWithContext(ctx context.Context) FakeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o FakeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Fake) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o FakeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Fake) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o FakeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Fake) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o FakeOutput) Spec() FakeSpecOutput {
	return o.ApplyT(func(v *Fake) FakeSpecOutput { return v.Spec }).(FakeSpecOutput)
}

type FakeArrayOutput struct{ *pulumi.OutputState }

func (FakeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fake)(nil)).Elem()
}

func (o FakeArrayOutput) ToFakeArrayOutput() FakeArrayOutput {
	return o
}

func (o FakeArrayOutput) ToFakeArrayOutputWithContext(ctx context.Context) FakeArrayOutput {
	return o
}

func (o FakeArrayOutput) Index(i pulumi.IntInput) FakeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fake {
		return vs[0].([]*Fake)[vs[1].(int)]
	}).(FakeOutput)
}

type FakeMapOutput struct{ *pulumi.OutputState }

func (FakeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fake)(nil)).Elem()
}

func (o FakeMapOutput) ToFakeMapOutput() FakeMapOutput {
	return o
}

func (o FakeMapOutput) ToFakeMapOutputWithContext(ctx context.Context) FakeMapOutput {
	return o
}

func (o FakeMapOutput) MapIndex(k pulumi.StringInput) FakeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fake {
		return vs[0].(map[string]*Fake)[vs[1].(string)]
	}).(FakeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FakeInput)(nil)).Elem(), &Fake{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeArrayInput)(nil)).Elem(), FakeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeMapInput)(nil)).Elem(), FakeMap{})
	pulumi.RegisterOutputType(FakeOutput{})
	pulumi.RegisterOutputType(FakeArrayOutput{})
	pulumi.RegisterOutputType(FakeMapOutput{})
}
