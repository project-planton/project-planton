// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SecretStore represents a secure external location for storing secrets, which can be referenced as part of `storeRef` fields.
type SecretStore struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput    `pulumi:"metadata"`
	Spec     SecretStoreSpecOutput      `pulumi:"spec"`
	Status   SecretStoreStatusPtrOutput `pulumi:"status"`
}

// NewSecretStore registers a new resource with the given unique name, arguments, and options.
func NewSecretStore(ctx *pulumi.Context,
	name string, args *SecretStoreArgs, opts ...pulumi.ResourceOption) (*SecretStore, error) {
	if args == nil {
		args = &SecretStoreArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("external-secrets.io/v1beta1")
	args.Kind = pulumi.StringPtr("SecretStore")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:external-secrets.io/v1alpha1:SecretStore"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SecretStore
	err := ctx.RegisterResource("kubernetes:external-secrets.io/v1beta1:SecretStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretStore gets an existing SecretStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretStoreState, opts ...pulumi.ResourceOption) (*SecretStore, error) {
	var resource SecretStore
	err := ctx.ReadResource("kubernetes:external-secrets.io/v1beta1:SecretStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretStore resources.
type secretStoreState struct {
}

type SecretStoreState struct {
}

func (SecretStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretStoreState)(nil)).Elem()
}

type secretStoreArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *SecretStoreSpec   `pulumi:"spec"`
}

// The set of arguments for constructing a SecretStore resource.
type SecretStoreArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     SecretStoreSpecPtrInput
}

func (SecretStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretStoreArgs)(nil)).Elem()
}

type SecretStoreInput interface {
	pulumi.Input

	ToSecretStoreOutput() SecretStoreOutput
	ToSecretStoreOutputWithContext(ctx context.Context) SecretStoreOutput
}

func (*SecretStore) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStore)(nil)).Elem()
}

func (i *SecretStore) ToSecretStoreOutput() SecretStoreOutput {
	return i.ToSecretStoreOutputWithContext(context.Background())
}

func (i *SecretStore) ToSecretStoreOutputWithContext(ctx context.Context) SecretStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreOutput)
}

// SecretStoreArrayInput is an input type that accepts SecretStoreArray and SecretStoreArrayOutput values.
// You can construct a concrete instance of `SecretStoreArrayInput` via:
//
//	SecretStoreArray{ SecretStoreArgs{...} }
type SecretStoreArrayInput interface {
	pulumi.Input

	ToSecretStoreArrayOutput() SecretStoreArrayOutput
	ToSecretStoreArrayOutputWithContext(context.Context) SecretStoreArrayOutput
}

type SecretStoreArray []SecretStoreInput

func (SecretStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretStore)(nil)).Elem()
}

func (i SecretStoreArray) ToSecretStoreArrayOutput() SecretStoreArrayOutput {
	return i.ToSecretStoreArrayOutputWithContext(context.Background())
}

func (i SecretStoreArray) ToSecretStoreArrayOutputWithContext(ctx context.Context) SecretStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreArrayOutput)
}

// SecretStoreMapInput is an input type that accepts SecretStoreMap and SecretStoreMapOutput values.
// You can construct a concrete instance of `SecretStoreMapInput` via:
//
//	SecretStoreMap{ "key": SecretStoreArgs{...} }
type SecretStoreMapInput interface {
	pulumi.Input

	ToSecretStoreMapOutput() SecretStoreMapOutput
	ToSecretStoreMapOutputWithContext(context.Context) SecretStoreMapOutput
}

type SecretStoreMap map[string]SecretStoreInput

func (SecretStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretStore)(nil)).Elem()
}

func (i SecretStoreMap) ToSecretStoreMapOutput() SecretStoreMapOutput {
	return i.ToSecretStoreMapOutputWithContext(context.Background())
}

func (i SecretStoreMap) ToSecretStoreMapOutputWithContext(ctx context.Context) SecretStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreMapOutput)
}

type SecretStoreOutput struct{ *pulumi.OutputState }

func (SecretStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStore)(nil)).Elem()
}

func (o SecretStoreOutput) ToSecretStoreOutput() SecretStoreOutput {
	return o
}

func (o SecretStoreOutput) ToSecretStoreOutputWithContext(ctx context.Context) SecretStoreOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SecretStoreOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretStore) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SecretStoreOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SecretStore) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SecretStoreOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *SecretStore) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o SecretStoreOutput) Spec() SecretStoreSpecOutput {
	return o.ApplyT(func(v *SecretStore) SecretStoreSpecOutput { return v.Spec }).(SecretStoreSpecOutput)
}

func (o SecretStoreOutput) Status() SecretStoreStatusPtrOutput {
	return o.ApplyT(func(v *SecretStore) SecretStoreStatusPtrOutput { return v.Status }).(SecretStoreStatusPtrOutput)
}

type SecretStoreArrayOutput struct{ *pulumi.OutputState }

func (SecretStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecretStore)(nil)).Elem()
}

func (o SecretStoreArrayOutput) ToSecretStoreArrayOutput() SecretStoreArrayOutput {
	return o
}

func (o SecretStoreArrayOutput) ToSecretStoreArrayOutputWithContext(ctx context.Context) SecretStoreArrayOutput {
	return o
}

func (o SecretStoreArrayOutput) Index(i pulumi.IntInput) SecretStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecretStore {
		return vs[0].([]*SecretStore)[vs[1].(int)]
	}).(SecretStoreOutput)
}

type SecretStoreMapOutput struct{ *pulumi.OutputState }

func (SecretStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecretStore)(nil)).Elem()
}

func (o SecretStoreMapOutput) ToSecretStoreMapOutput() SecretStoreMapOutput {
	return o
}

func (o SecretStoreMapOutput) ToSecretStoreMapOutputWithContext(ctx context.Context) SecretStoreMapOutput {
	return o
}

func (o SecretStoreMapOutput) MapIndex(k pulumi.StringInput) SecretStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecretStore {
		return vs[0].(map[string]*SecretStore)[vs[1].(string)]
	}).(SecretStoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreInput)(nil)).Elem(), &SecretStore{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreArrayInput)(nil)).Elem(), SecretStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreMapInput)(nil)).Elem(), SecretStoreMap{})
	pulumi.RegisterOutputType(SecretStoreOutput{})
	pulumi.RegisterOutputType(SecretStoreArrayOutput{})
	pulumi.RegisterOutputType(SecretStoreMapOutput{})
}
