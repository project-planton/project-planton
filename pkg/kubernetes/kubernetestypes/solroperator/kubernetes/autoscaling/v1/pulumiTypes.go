// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Scale represents a scaling request for a resource.
type Scale struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *ScaleSpec `pulumi:"spec"`
	// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status *ScaleStatus `pulumi:"status"`
}

// ScaleInput is an input type that accepts ScaleArgs and ScaleOutput values.
// You can construct a concrete instance of `ScaleInput` via:
//
//	ScaleArgs{...}
type ScaleInput interface {
	pulumi.Input

	ToScaleOutput() ScaleOutput
	ToScaleOutputWithContext(context.Context) ScaleOutput
}

// Scale represents a scaling request for a resource.
type ScaleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec ScaleSpecPtrInput `pulumi:"spec"`
	// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status ScaleStatusPtrInput `pulumi:"status"`
}

func (ScaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (i ScaleArgs) ToScaleOutput() ScaleOutput {
	return i.ToScaleOutputWithContext(context.Background())
}

func (i ScaleArgs) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleOutput)
}

// Scale represents a scaling request for a resource.
type ScaleOutput struct{ *pulumi.OutputState }

func (ScaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scale)(nil)).Elem()
}

func (o ScaleOutput) ToScaleOutput() ScaleOutput {
	return o
}

func (o ScaleOutput) ToScaleOutputWithContext(ctx context.Context) ScaleOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScaleOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScaleOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Scale) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ScaleOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v Scale) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o ScaleOutput) Spec() ScaleSpecPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleSpec { return v.Spec }).(ScaleSpecPtrOutput)
}

// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
func (o ScaleOutput) Status() ScaleStatusPtrOutput {
	return o.ApplyT(func(v Scale) *ScaleStatus { return v.Status }).(ScaleStatusPtrOutput)
}

// Scale represents a scaling request for a resource.
type ScalePatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec *ScaleSpecPatch `pulumi:"spec"`
	// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status *ScaleStatusPatch `pulumi:"status"`
}

// ScalePatchInput is an input type that accepts ScalePatchArgs and ScalePatchOutput values.
// You can construct a concrete instance of `ScalePatchInput` via:
//
//	ScalePatchArgs{...}
type ScalePatchInput interface {
	pulumi.Input

	ToScalePatchOutput() ScalePatchOutput
	ToScalePatchOutputWithContext(context.Context) ScalePatchOutput
}

// Scale represents a scaling request for a resource.
type ScalePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
	Spec ScaleSpecPatchPtrInput `pulumi:"spec"`
	// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
	Status ScaleStatusPatchPtrInput `pulumi:"status"`
}

func (ScalePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalePatch)(nil)).Elem()
}

func (i ScalePatchArgs) ToScalePatchOutput() ScalePatchOutput {
	return i.ToScalePatchOutputWithContext(context.Background())
}

func (i ScalePatchArgs) ToScalePatchOutputWithContext(ctx context.Context) ScalePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalePatchOutput)
}

// Scale represents a scaling request for a resource.
type ScalePatchOutput struct{ *pulumi.OutputState }

func (ScalePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalePatch)(nil)).Elem()
}

func (o ScalePatchOutput) ToScalePatchOutput() ScalePatchOutput {
	return o
}

func (o ScalePatchOutput) ToScalePatchOutputWithContext(ctx context.Context) ScalePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScalePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalePatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScalePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object metadata; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata.
func (o ScalePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ScalePatch) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

// spec defines the behavior of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (o ScalePatchOutput) Spec() ScaleSpecPatchPtrOutput {
	return o.ApplyT(func(v ScalePatch) *ScaleSpecPatch { return v.Spec }).(ScaleSpecPatchPtrOutput)
}

// status is the current status of the scale. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status. Read-only.
func (o ScalePatchOutput) Status() ScaleStatusPatchPtrOutput {
	return o.ApplyT(func(v ScalePatch) *ScaleStatusPatch { return v.Status }).(ScaleStatusPatchPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpec struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas *int `pulumi:"replicas"`
}

// ScaleSpecInput is an input type that accepts ScaleSpecArgs and ScaleSpecOutput values.
// You can construct a concrete instance of `ScaleSpecInput` via:
//
//	ScaleSpecArgs{...}
type ScaleSpecInput interface {
	pulumi.Input

	ToScaleSpecOutput() ScaleSpecOutput
	ToScaleSpecOutputWithContext(context.Context) ScaleSpecOutput
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecArgs struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ScaleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (i ScaleSpecArgs) ToScaleSpecOutput() ScaleSpecOutput {
	return i.ToScaleSpecOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput)
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i ScaleSpecArgs) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecOutput).ToScaleSpecPtrOutputWithContext(ctx)
}

// ScaleSpecPtrInput is an input type that accepts ScaleSpecArgs, ScaleSpecPtr and ScaleSpecPtrOutput values.
// You can construct a concrete instance of `ScaleSpecPtrInput` via:
//
//	        ScaleSpecArgs{...}
//
//	or:
//
//	        nil
type ScaleSpecPtrInput interface {
	pulumi.Input

	ToScaleSpecPtrOutput() ScaleSpecPtrOutput
	ToScaleSpecPtrOutputWithContext(context.Context) ScaleSpecPtrOutput
}

type scaleSpecPtrType ScaleSpecArgs

func ScaleSpecPtr(v *ScaleSpecArgs) ScaleSpecPtrInput {
	return (*scaleSpecPtrType)(v)
}

func (*scaleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return i.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (i *scaleSpecPtrType) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecOutput struct{ *pulumi.OutputState }

func (ScaleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecOutput) ToScaleSpecOutput() ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecOutputWithContext(ctx context.Context) ScaleSpecOutput {
	return o
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o.ToScaleSpecPtrOutputWithContext(context.Background())
}

func (o ScaleSpecOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSpec) *ScaleSpec {
		return &v
	}).(ScaleSpecPtrOutput)
}

// replicas is the desired number of instances for the scaled object.
func (o ScaleSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ScaleSpecPtrOutput struct{ *pulumi.OutputState }

func (ScaleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpec)(nil)).Elem()
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutput() ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) ToScaleSpecPtrOutputWithContext(ctx context.Context) ScaleSpecPtrOutput {
	return o
}

func (o ScaleSpecPtrOutput) Elem() ScaleSpecOutput {
	return o.ApplyT(func(v *ScaleSpec) ScaleSpec {
		if v != nil {
			return *v
		}
		var ret ScaleSpec
		return ret
	}).(ScaleSpecOutput)
}

// replicas is the desired number of instances for the scaled object.
func (o ScaleSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecPatch struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas *int `pulumi:"replicas"`
}

// ScaleSpecPatchInput is an input type that accepts ScaleSpecPatchArgs and ScaleSpecPatchOutput values.
// You can construct a concrete instance of `ScaleSpecPatchInput` via:
//
//	ScaleSpecPatchArgs{...}
type ScaleSpecPatchInput interface {
	pulumi.Input

	ToScaleSpecPatchOutput() ScaleSpecPatchOutput
	ToScaleSpecPatchOutputWithContext(context.Context) ScaleSpecPatchOutput
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecPatchArgs struct {
	// replicas is the desired number of instances for the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
}

func (ScaleSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpecPatch)(nil)).Elem()
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchOutput() ScaleSpecPatchOutput {
	return i.ToScaleSpecPatchOutputWithContext(context.Background())
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchOutputWithContext(ctx context.Context) ScaleSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPatchOutput)
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return i.ToScaleSpecPatchPtrOutputWithContext(context.Background())
}

func (i ScaleSpecPatchArgs) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPatchOutput).ToScaleSpecPatchPtrOutputWithContext(ctx)
}

// ScaleSpecPatchPtrInput is an input type that accepts ScaleSpecPatchArgs, ScaleSpecPatchPtr and ScaleSpecPatchPtrOutput values.
// You can construct a concrete instance of `ScaleSpecPatchPtrInput` via:
//
//	        ScaleSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ScaleSpecPatchPtrInput interface {
	pulumi.Input

	ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput
	ToScaleSpecPatchPtrOutputWithContext(context.Context) ScaleSpecPatchPtrOutput
}

type scaleSpecPatchPtrType ScaleSpecPatchArgs

func ScaleSpecPatchPtr(v *ScaleSpecPatchArgs) ScaleSpecPatchPtrInput {
	return (*scaleSpecPatchPtrType)(v)
}

func (*scaleSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpecPatch)(nil)).Elem()
}

func (i *scaleSpecPatchPtrType) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return i.ToScaleSpecPatchPtrOutputWithContext(context.Background())
}

func (i *scaleSpecPatchPtrType) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSpecPatchPtrOutput)
}

// ScaleSpec describes the attributes of a scale subresource.
type ScaleSpecPatchOutput struct{ *pulumi.OutputState }

func (ScaleSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSpecPatch)(nil)).Elem()
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchOutput() ScaleSpecPatchOutput {
	return o
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchOutputWithContext(ctx context.Context) ScaleSpecPatchOutput {
	return o
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return o.ToScaleSpecPatchPtrOutputWithContext(context.Background())
}

func (o ScaleSpecPatchOutput) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSpecPatch) *ScaleSpecPatch {
		return &v
	}).(ScaleSpecPatchPtrOutput)
}

// replicas is the desired number of instances for the scaled object.
func (o ScaleSpecPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSpecPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

type ScaleSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ScaleSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSpecPatch)(nil)).Elem()
}

func (o ScaleSpecPatchPtrOutput) ToScaleSpecPatchPtrOutput() ScaleSpecPatchPtrOutput {
	return o
}

func (o ScaleSpecPatchPtrOutput) ToScaleSpecPatchPtrOutputWithContext(ctx context.Context) ScaleSpecPatchPtrOutput {
	return o
}

func (o ScaleSpecPatchPtrOutput) Elem() ScaleSpecPatchOutput {
	return o.ApplyT(func(v *ScaleSpecPatch) ScaleSpecPatch {
		if v != nil {
			return *v
		}
		var ret ScaleSpecPatch
		return ret
	}).(ScaleSpecPatchOutput)
}

// replicas is the desired number of instances for the scaled object.
func (o ScaleSpecPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatus struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas int `pulumi:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector *string `pulumi:"selector"`
}

// ScaleStatusInput is an input type that accepts ScaleStatusArgs and ScaleStatusOutput values.
// You can construct a concrete instance of `ScaleStatusInput` via:
//
//	ScaleStatusArgs{...}
type ScaleStatusInput interface {
	pulumi.Input

	ToScaleStatusOutput() ScaleStatusOutput
	ToScaleStatusOutputWithContext(context.Context) ScaleStatusOutput
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusArgs struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas pulumi.IntInput `pulumi:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (ScaleStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (i ScaleStatusArgs) ToScaleStatusOutput() ScaleStatusOutput {
	return i.ToScaleStatusOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput)
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i ScaleStatusArgs) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusOutput).ToScaleStatusPtrOutputWithContext(ctx)
}

// ScaleStatusPtrInput is an input type that accepts ScaleStatusArgs, ScaleStatusPtr and ScaleStatusPtrOutput values.
// You can construct a concrete instance of `ScaleStatusPtrInput` via:
//
//	        ScaleStatusArgs{...}
//
//	or:
//
//	        nil
type ScaleStatusPtrInput interface {
	pulumi.Input

	ToScaleStatusPtrOutput() ScaleStatusPtrOutput
	ToScaleStatusPtrOutputWithContext(context.Context) ScaleStatusPtrOutput
}

type scaleStatusPtrType ScaleStatusArgs

func ScaleStatusPtr(v *ScaleStatusArgs) ScaleStatusPtrInput {
	return (*scaleStatusPtrType)(v)
}

func (*scaleStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return i.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (i *scaleStatusPtrType) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusOutput struct{ *pulumi.OutputState }

func (ScaleStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusOutput) ToScaleStatusOutput() ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusOutputWithContext(ctx context.Context) ScaleStatusOutput {
	return o
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o.ToScaleStatusPtrOutputWithContext(context.Background())
}

func (o ScaleStatusOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleStatus) *ScaleStatus {
		return &v
	}).(ScaleStatusPtrOutput)
}

// replicas is the actual number of observed instances of the scaled object.
func (o ScaleStatusOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v ScaleStatus) int { return v.Replicas }).(pulumi.IntOutput)
}

// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o ScaleStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type ScaleStatusPtrOutput struct{ *pulumi.OutputState }

func (ScaleStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatus)(nil)).Elem()
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutput() ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) ToScaleStatusPtrOutputWithContext(ctx context.Context) ScaleStatusPtrOutput {
	return o
}

func (o ScaleStatusPtrOutput) Elem() ScaleStatusOutput {
	return o.ApplyT(func(v *ScaleStatus) ScaleStatus {
		if v != nil {
			return *v
		}
		var ret ScaleStatus
		return ret
	}).(ScaleStatusOutput)
}

// replicas is the actual number of observed instances of the scaled object.
func (o ScaleStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleStatus) *int {
		if v == nil {
			return nil
		}
		return &v.Replicas
	}).(pulumi.IntPtrOutput)
}

// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o ScaleStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusPatch struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas *int `pulumi:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector *string `pulumi:"selector"`
}

// ScaleStatusPatchInput is an input type that accepts ScaleStatusPatchArgs and ScaleStatusPatchOutput values.
// You can construct a concrete instance of `ScaleStatusPatchInput` via:
//
//	ScaleStatusPatchArgs{...}
type ScaleStatusPatchInput interface {
	pulumi.Input

	ToScaleStatusPatchOutput() ScaleStatusPatchOutput
	ToScaleStatusPatchOutputWithContext(context.Context) ScaleStatusPatchOutput
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusPatchArgs struct {
	// replicas is the actual number of observed instances of the scaled object.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
	Selector pulumi.StringPtrInput `pulumi:"selector"`
}

func (ScaleStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatusPatch)(nil)).Elem()
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchOutput() ScaleStatusPatchOutput {
	return i.ToScaleStatusPatchOutputWithContext(context.Background())
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchOutputWithContext(ctx context.Context) ScaleStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPatchOutput)
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return i.ToScaleStatusPatchPtrOutputWithContext(context.Background())
}

func (i ScaleStatusPatchArgs) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPatchOutput).ToScaleStatusPatchPtrOutputWithContext(ctx)
}

// ScaleStatusPatchPtrInput is an input type that accepts ScaleStatusPatchArgs, ScaleStatusPatchPtr and ScaleStatusPatchPtrOutput values.
// You can construct a concrete instance of `ScaleStatusPatchPtrInput` via:
//
//	        ScaleStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ScaleStatusPatchPtrInput interface {
	pulumi.Input

	ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput
	ToScaleStatusPatchPtrOutputWithContext(context.Context) ScaleStatusPatchPtrOutput
}

type scaleStatusPatchPtrType ScaleStatusPatchArgs

func ScaleStatusPatchPtr(v *ScaleStatusPatchArgs) ScaleStatusPatchPtrInput {
	return (*scaleStatusPatchPtrType)(v)
}

func (*scaleStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatusPatch)(nil)).Elem()
}

func (i *scaleStatusPatchPtrType) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return i.ToScaleStatusPatchPtrOutputWithContext(context.Background())
}

func (i *scaleStatusPatchPtrType) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleStatusPatchPtrOutput)
}

// ScaleStatus represents the current status of a scale subresource.
type ScaleStatusPatchOutput struct{ *pulumi.OutputState }

func (ScaleStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleStatusPatch)(nil)).Elem()
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchOutput() ScaleStatusPatchOutput {
	return o
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchOutputWithContext(ctx context.Context) ScaleStatusPatchOutput {
	return o
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return o.ToScaleStatusPatchPtrOutputWithContext(context.Background())
}

func (o ScaleStatusPatchOutput) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleStatusPatch) *ScaleStatusPatch {
		return &v
	}).(ScaleStatusPatchPtrOutput)
}

// replicas is the actual number of observed instances of the scaled object.
func (o ScaleStatusPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleStatusPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o ScaleStatusPatchOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleStatusPatch) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

type ScaleStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ScaleStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleStatusPatch)(nil)).Elem()
}

func (o ScaleStatusPatchPtrOutput) ToScaleStatusPatchPtrOutput() ScaleStatusPatchPtrOutput {
	return o
}

func (o ScaleStatusPatchPtrOutput) ToScaleStatusPatchPtrOutputWithContext(ctx context.Context) ScaleStatusPatchPtrOutput {
	return o
}

func (o ScaleStatusPatchPtrOutput) Elem() ScaleStatusPatchOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) ScaleStatusPatch {
		if v != nil {
			return *v
		}
		var ret ScaleStatusPatch
		return ret
	}).(ScaleStatusPatchOutput)
}

// replicas is the actual number of observed instances of the scaled object.
func (o ScaleStatusPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
func (o ScaleStatusPatchPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleInput)(nil)).Elem(), ScaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalePatchInput)(nil)).Elem(), ScalePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecInput)(nil)).Elem(), ScaleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecPtrInput)(nil)).Elem(), ScaleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecPatchInput)(nil)).Elem(), ScaleSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleSpecPatchPtrInput)(nil)).Elem(), ScaleSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusInput)(nil)).Elem(), ScaleStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusPtrInput)(nil)).Elem(), ScaleStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusPatchInput)(nil)).Elem(), ScaleStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScaleStatusPatchPtrInput)(nil)).Elem(), ScaleStatusPatchArgs{})
	pulumi.RegisterOutputType(ScaleOutput{})
	pulumi.RegisterOutputType(ScalePatchOutput{})
	pulumi.RegisterOutputType(ScaleSpecOutput{})
	pulumi.RegisterOutputType(ScaleSpecPtrOutput{})
	pulumi.RegisterOutputType(ScaleSpecPatchOutput{})
	pulumi.RegisterOutputType(ScaleSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ScaleStatusOutput{})
	pulumi.RegisterOutputType(ScaleStatusPtrOutput{})
	pulumi.RegisterOutputType(ScaleStatusPatchOutput{})
	pulumi.RegisterOutputType(ScaleStatusPatchPtrOutput{})
}
