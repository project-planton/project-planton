// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SolrBackupList is a list of SolrBackup
type SolrBackupList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of solrbackups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SolrBackupTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewSolrBackupList registers a new resource with the given unique name, arguments, and options.
func NewSolrBackupList(ctx *pulumi.Context,
	name string, args *SolrBackupListArgs, opts ...pulumi.ResourceOption) (*SolrBackupList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("solr.apache.org/v1beta1")
	args.Kind = pulumi.StringPtr("SolrBackupList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolrBackupList
	err := ctx.RegisterResource("kubernetes:solr.apache.org/v1beta1:SolrBackupList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolrBackupList gets an existing SolrBackupList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolrBackupList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolrBackupListState, opts ...pulumi.ResourceOption) (*SolrBackupList, error) {
	var resource SolrBackupList
	err := ctx.ReadResource("kubernetes:solr.apache.org/v1beta1:SolrBackupList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolrBackupList resources.
type solrBackupListState struct {
}

type SolrBackupListState struct {
}

func (SolrBackupListState) ElementType() reflect.Type {
	return reflect.TypeOf((*solrBackupListState)(nil)).Elem()
}

type solrBackupListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of solrbackups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SolrBackupType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a SolrBackupList resource.
type SolrBackupListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of solrbackups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SolrBackupTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (SolrBackupListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solrBackupListArgs)(nil)).Elem()
}

type SolrBackupListInput interface {
	pulumi.Input

	ToSolrBackupListOutput() SolrBackupListOutput
	ToSolrBackupListOutputWithContext(ctx context.Context) SolrBackupListOutput
}

func (*SolrBackupList) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrBackupList)(nil)).Elem()
}

func (i *SolrBackupList) ToSolrBackupListOutput() SolrBackupListOutput {
	return i.ToSolrBackupListOutputWithContext(context.Background())
}

func (i *SolrBackupList) ToSolrBackupListOutputWithContext(ctx context.Context) SolrBackupListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupListOutput)
}

// SolrBackupListArrayInput is an input type that accepts SolrBackupListArray and SolrBackupListArrayOutput values.
// You can construct a concrete instance of `SolrBackupListArrayInput` via:
//
//	SolrBackupListArray{ SolrBackupListArgs{...} }
type SolrBackupListArrayInput interface {
	pulumi.Input

	ToSolrBackupListArrayOutput() SolrBackupListArrayOutput
	ToSolrBackupListArrayOutputWithContext(context.Context) SolrBackupListArrayOutput
}

type SolrBackupListArray []SolrBackupListInput

func (SolrBackupListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrBackupList)(nil)).Elem()
}

func (i SolrBackupListArray) ToSolrBackupListArrayOutput() SolrBackupListArrayOutput {
	return i.ToSolrBackupListArrayOutputWithContext(context.Background())
}

func (i SolrBackupListArray) ToSolrBackupListArrayOutputWithContext(ctx context.Context) SolrBackupListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupListArrayOutput)
}

// SolrBackupListMapInput is an input type that accepts SolrBackupListMap and SolrBackupListMapOutput values.
// You can construct a concrete instance of `SolrBackupListMapInput` via:
//
//	SolrBackupListMap{ "key": SolrBackupListArgs{...} }
type SolrBackupListMapInput interface {
	pulumi.Input

	ToSolrBackupListMapOutput() SolrBackupListMapOutput
	ToSolrBackupListMapOutputWithContext(context.Context) SolrBackupListMapOutput
}

type SolrBackupListMap map[string]SolrBackupListInput

func (SolrBackupListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrBackupList)(nil)).Elem()
}

func (i SolrBackupListMap) ToSolrBackupListMapOutput() SolrBackupListMapOutput {
	return i.ToSolrBackupListMapOutputWithContext(context.Background())
}

func (i SolrBackupListMap) ToSolrBackupListMapOutputWithContext(ctx context.Context) SolrBackupListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupListMapOutput)
}

type SolrBackupListOutput struct{ *pulumi.OutputState }

func (SolrBackupListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrBackupList)(nil)).Elem()
}

func (o SolrBackupListOutput) ToSolrBackupListOutput() SolrBackupListOutput {
	return o
}

func (o SolrBackupListOutput) ToSolrBackupListOutputWithContext(ctx context.Context) SolrBackupListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SolrBackupListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SolrBackupList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of solrbackups. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SolrBackupListOutput) Items() SolrBackupTypeArrayOutput {
	return o.ApplyT(func(v *SolrBackupList) SolrBackupTypeArrayOutput { return v.Items }).(SolrBackupTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SolrBackupListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SolrBackupList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SolrBackupListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *SolrBackupList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type SolrBackupListArrayOutput struct{ *pulumi.OutputState }

func (SolrBackupListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrBackupList)(nil)).Elem()
}

func (o SolrBackupListArrayOutput) ToSolrBackupListArrayOutput() SolrBackupListArrayOutput {
	return o
}

func (o SolrBackupListArrayOutput) ToSolrBackupListArrayOutputWithContext(ctx context.Context) SolrBackupListArrayOutput {
	return o
}

func (o SolrBackupListArrayOutput) Index(i pulumi.IntInput) SolrBackupListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SolrBackupList {
		return vs[0].([]*SolrBackupList)[vs[1].(int)]
	}).(SolrBackupListOutput)
}

type SolrBackupListMapOutput struct{ *pulumi.OutputState }

func (SolrBackupListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrBackupList)(nil)).Elem()
}

func (o SolrBackupListMapOutput) ToSolrBackupListMapOutput() SolrBackupListMapOutput {
	return o
}

func (o SolrBackupListMapOutput) ToSolrBackupListMapOutputWithContext(ctx context.Context) SolrBackupListMapOutput {
	return o
}

func (o SolrBackupListMapOutput) MapIndex(k pulumi.StringInput) SolrBackupListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SolrBackupList {
		return vs[0].(map[string]*SolrBackupList)[vs[1].(string)]
	}).(SolrBackupListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupListInput)(nil)).Elem(), &SolrBackupList{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupListArrayInput)(nil)).Elem(), SolrBackupListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupListMapInput)(nil)).Elem(), SolrBackupListMap{})
	pulumi.RegisterOutputType(SolrBackupListOutput{})
	pulumi.RegisterOutputType(SolrBackupListArrayOutput{})
	pulumi.RegisterOutputType(SolrBackupListMapOutput{})
}
