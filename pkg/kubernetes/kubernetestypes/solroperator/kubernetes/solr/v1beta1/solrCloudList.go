// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SolrCloudList is a list of SolrCloud
type SolrCloudList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of solrclouds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SolrCloudTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewSolrCloudList registers a new resource with the given unique name, arguments, and options.
func NewSolrCloudList(ctx *pulumi.Context,
	name string, args *SolrCloudListArgs, opts ...pulumi.ResourceOption) (*SolrCloudList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("solr.apache.org/v1beta1")
	args.Kind = pulumi.StringPtr("SolrCloudList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolrCloudList
	err := ctx.RegisterResource("kubernetes:solr.apache.org/v1beta1:SolrCloudList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolrCloudList gets an existing SolrCloudList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolrCloudList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolrCloudListState, opts ...pulumi.ResourceOption) (*SolrCloudList, error) {
	var resource SolrCloudList
	err := ctx.ReadResource("kubernetes:solr.apache.org/v1beta1:SolrCloudList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolrCloudList resources.
type solrCloudListState struct {
}

type SolrCloudListState struct {
}

func (SolrCloudListState) ElementType() reflect.Type {
	return reflect.TypeOf((*solrCloudListState)(nil)).Elem()
}

type solrCloudListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of solrclouds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []SolrCloudType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a SolrCloudList resource.
type SolrCloudListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of solrclouds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items SolrCloudTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (SolrCloudListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solrCloudListArgs)(nil)).Elem()
}

type SolrCloudListInput interface {
	pulumi.Input

	ToSolrCloudListOutput() SolrCloudListOutput
	ToSolrCloudListOutputWithContext(ctx context.Context) SolrCloudListOutput
}

func (*SolrCloudList) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrCloudList)(nil)).Elem()
}

func (i *SolrCloudList) ToSolrCloudListOutput() SolrCloudListOutput {
	return i.ToSolrCloudListOutputWithContext(context.Background())
}

func (i *SolrCloudList) ToSolrCloudListOutputWithContext(ctx context.Context) SolrCloudListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudListOutput)
}

// SolrCloudListArrayInput is an input type that accepts SolrCloudListArray and SolrCloudListArrayOutput values.
// You can construct a concrete instance of `SolrCloudListArrayInput` via:
//
//	SolrCloudListArray{ SolrCloudListArgs{...} }
type SolrCloudListArrayInput interface {
	pulumi.Input

	ToSolrCloudListArrayOutput() SolrCloudListArrayOutput
	ToSolrCloudListArrayOutputWithContext(context.Context) SolrCloudListArrayOutput
}

type SolrCloudListArray []SolrCloudListInput

func (SolrCloudListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrCloudList)(nil)).Elem()
}

func (i SolrCloudListArray) ToSolrCloudListArrayOutput() SolrCloudListArrayOutput {
	return i.ToSolrCloudListArrayOutputWithContext(context.Background())
}

func (i SolrCloudListArray) ToSolrCloudListArrayOutputWithContext(ctx context.Context) SolrCloudListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudListArrayOutput)
}

// SolrCloudListMapInput is an input type that accepts SolrCloudListMap and SolrCloudListMapOutput values.
// You can construct a concrete instance of `SolrCloudListMapInput` via:
//
//	SolrCloudListMap{ "key": SolrCloudListArgs{...} }
type SolrCloudListMapInput interface {
	pulumi.Input

	ToSolrCloudListMapOutput() SolrCloudListMapOutput
	ToSolrCloudListMapOutputWithContext(context.Context) SolrCloudListMapOutput
}

type SolrCloudListMap map[string]SolrCloudListInput

func (SolrCloudListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrCloudList)(nil)).Elem()
}

func (i SolrCloudListMap) ToSolrCloudListMapOutput() SolrCloudListMapOutput {
	return i.ToSolrCloudListMapOutputWithContext(context.Background())
}

func (i SolrCloudListMap) ToSolrCloudListMapOutputWithContext(ctx context.Context) SolrCloudListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudListMapOutput)
}

type SolrCloudListOutput struct{ *pulumi.OutputState }

func (SolrCloudListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrCloudList)(nil)).Elem()
}

func (o SolrCloudListOutput) ToSolrCloudListOutput() SolrCloudListOutput {
	return o
}

func (o SolrCloudListOutput) ToSolrCloudListOutputWithContext(ctx context.Context) SolrCloudListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SolrCloudListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SolrCloudList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of solrclouds. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o SolrCloudListOutput) Items() SolrCloudTypeArrayOutput {
	return o.ApplyT(func(v *SolrCloudList) SolrCloudTypeArrayOutput { return v.Items }).(SolrCloudTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SolrCloudListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SolrCloudList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SolrCloudListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *SolrCloudList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type SolrCloudListArrayOutput struct{ *pulumi.OutputState }

func (SolrCloudListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrCloudList)(nil)).Elem()
}

func (o SolrCloudListArrayOutput) ToSolrCloudListArrayOutput() SolrCloudListArrayOutput {
	return o
}

func (o SolrCloudListArrayOutput) ToSolrCloudListArrayOutputWithContext(ctx context.Context) SolrCloudListArrayOutput {
	return o
}

func (o SolrCloudListArrayOutput) Index(i pulumi.IntInput) SolrCloudListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SolrCloudList {
		return vs[0].([]*SolrCloudList)[vs[1].(int)]
	}).(SolrCloudListOutput)
}

type SolrCloudListMapOutput struct{ *pulumi.OutputState }

func (SolrCloudListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrCloudList)(nil)).Elem()
}

func (o SolrCloudListMapOutput) ToSolrCloudListMapOutput() SolrCloudListMapOutput {
	return o
}

func (o SolrCloudListMapOutput) ToSolrCloudListMapOutputWithContext(ctx context.Context) SolrCloudListMapOutput {
	return o
}

func (o SolrCloudListMapOutput) MapIndex(k pulumi.StringInput) SolrCloudListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SolrCloudList {
		return vs[0].(map[string]*SolrCloudList)[vs[1].(string)]
	}).(SolrCloudListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudListInput)(nil)).Elem(), &SolrCloudList{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudListArrayInput)(nil)).Elem(), SolrCloudListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudListMapInput)(nil)).Elem(), SolrCloudListMap{})
	pulumi.RegisterOutputType(SolrCloudListOutput{})
	pulumi.RegisterOutputType(SolrCloudListArrayOutput{})
	pulumi.RegisterOutputType(SolrCloudListMapOutput{})
}
