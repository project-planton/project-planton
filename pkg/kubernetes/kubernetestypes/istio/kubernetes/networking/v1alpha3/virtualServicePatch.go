// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type VirtualServicePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     VirtualServiceSpecPatchPtrOutput `pulumi:"spec"`
	Status   pulumi.MapOutput                 `pulumi:"status"`
}

// NewVirtualServicePatch registers a new resource with the given unique name, arguments, and options.
func NewVirtualServicePatch(ctx *pulumi.Context,
	name string, args *VirtualServicePatchArgs, opts ...pulumi.ResourceOption) (*VirtualServicePatch, error) {
	if args == nil {
		args = &VirtualServicePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1alpha3")
	args.Kind = pulumi.StringPtr("VirtualService")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1:VirtualServicePatch"),
		},
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1beta1:VirtualServicePatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VirtualServicePatch
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1alpha3:VirtualServicePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualServicePatch gets an existing VirtualServicePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualServicePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualServicePatchState, opts ...pulumi.ResourceOption) (*VirtualServicePatch, error) {
	var resource VirtualServicePatch
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1alpha3:VirtualServicePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualServicePatch resources.
type virtualServicePatchState struct {
}

type VirtualServicePatchState struct {
}

func (VirtualServicePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServicePatchState)(nil)).Elem()
}

type virtualServicePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *VirtualServiceSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a VirtualServicePatch resource.
type VirtualServicePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VirtualServiceSpecPatchPtrInput
}

func (VirtualServicePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServicePatchArgs)(nil)).Elem()
}

type VirtualServicePatchInput interface {
	pulumi.Input

	ToVirtualServicePatchOutput() VirtualServicePatchOutput
	ToVirtualServicePatchOutputWithContext(ctx context.Context) VirtualServicePatchOutput
}

func (*VirtualServicePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServicePatch)(nil)).Elem()
}

func (i *VirtualServicePatch) ToVirtualServicePatchOutput() VirtualServicePatchOutput {
	return i.ToVirtualServicePatchOutputWithContext(context.Background())
}

func (i *VirtualServicePatch) ToVirtualServicePatchOutputWithContext(ctx context.Context) VirtualServicePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServicePatchOutput)
}

// VirtualServicePatchArrayInput is an input type that accepts VirtualServicePatchArray and VirtualServicePatchArrayOutput values.
// You can construct a concrete instance of `VirtualServicePatchArrayInput` via:
//
//	VirtualServicePatchArray{ VirtualServicePatchArgs{...} }
type VirtualServicePatchArrayInput interface {
	pulumi.Input

	ToVirtualServicePatchArrayOutput() VirtualServicePatchArrayOutput
	ToVirtualServicePatchArrayOutputWithContext(context.Context) VirtualServicePatchArrayOutput
}

type VirtualServicePatchArray []VirtualServicePatchInput

func (VirtualServicePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualServicePatch)(nil)).Elem()
}

func (i VirtualServicePatchArray) ToVirtualServicePatchArrayOutput() VirtualServicePatchArrayOutput {
	return i.ToVirtualServicePatchArrayOutputWithContext(context.Background())
}

func (i VirtualServicePatchArray) ToVirtualServicePatchArrayOutputWithContext(ctx context.Context) VirtualServicePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServicePatchArrayOutput)
}

// VirtualServicePatchMapInput is an input type that accepts VirtualServicePatchMap and VirtualServicePatchMapOutput values.
// You can construct a concrete instance of `VirtualServicePatchMapInput` via:
//
//	VirtualServicePatchMap{ "key": VirtualServicePatchArgs{...} }
type VirtualServicePatchMapInput interface {
	pulumi.Input

	ToVirtualServicePatchMapOutput() VirtualServicePatchMapOutput
	ToVirtualServicePatchMapOutputWithContext(context.Context) VirtualServicePatchMapOutput
}

type VirtualServicePatchMap map[string]VirtualServicePatchInput

func (VirtualServicePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualServicePatch)(nil)).Elem()
}

func (i VirtualServicePatchMap) ToVirtualServicePatchMapOutput() VirtualServicePatchMapOutput {
	return i.ToVirtualServicePatchMapOutputWithContext(context.Background())
}

func (i VirtualServicePatchMap) ToVirtualServicePatchMapOutputWithContext(ctx context.Context) VirtualServicePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServicePatchMapOutput)
}

type VirtualServicePatchOutput struct{ *pulumi.OutputState }

func (VirtualServicePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServicePatch)(nil)).Elem()
}

func (o VirtualServicePatchOutput) ToVirtualServicePatchOutput() VirtualServicePatchOutput {
	return o
}

func (o VirtualServicePatchOutput) ToVirtualServicePatchOutputWithContext(ctx context.Context) VirtualServicePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VirtualServicePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServicePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VirtualServicePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServicePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VirtualServicePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VirtualServicePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VirtualServicePatchOutput) Spec() VirtualServiceSpecPatchPtrOutput {
	return o.ApplyT(func(v *VirtualServicePatch) VirtualServiceSpecPatchPtrOutput { return v.Spec }).(VirtualServiceSpecPatchPtrOutput)
}

func (o VirtualServicePatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *VirtualServicePatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type VirtualServicePatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServicePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualServicePatch)(nil)).Elem()
}

func (o VirtualServicePatchArrayOutput) ToVirtualServicePatchArrayOutput() VirtualServicePatchArrayOutput {
	return o
}

func (o VirtualServicePatchArrayOutput) ToVirtualServicePatchArrayOutputWithContext(ctx context.Context) VirtualServicePatchArrayOutput {
	return o
}

func (o VirtualServicePatchArrayOutput) Index(i pulumi.IntInput) VirtualServicePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualServicePatch {
		return vs[0].([]*VirtualServicePatch)[vs[1].(int)]
	}).(VirtualServicePatchOutput)
}

type VirtualServicePatchMapOutput struct{ *pulumi.OutputState }

func (VirtualServicePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualServicePatch)(nil)).Elem()
}

func (o VirtualServicePatchMapOutput) ToVirtualServicePatchMapOutput() VirtualServicePatchMapOutput {
	return o
}

func (o VirtualServicePatchMapOutput) ToVirtualServicePatchMapOutputWithContext(ctx context.Context) VirtualServicePatchMapOutput {
	return o
}

func (o VirtualServicePatchMapOutput) MapIndex(k pulumi.StringInput) VirtualServicePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualServicePatch {
		return vs[0].(map[string]*VirtualServicePatch)[vs[1].(string)]
	}).(VirtualServicePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServicePatchInput)(nil)).Elem(), &VirtualServicePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServicePatchArrayInput)(nil)).Elem(), VirtualServicePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServicePatchMapInput)(nil)).Elem(), VirtualServicePatchMap{})
	pulumi.RegisterOutputType(VirtualServicePatchOutput{})
	pulumi.RegisterOutputType(VirtualServicePatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServicePatchMapOutput{})
}
