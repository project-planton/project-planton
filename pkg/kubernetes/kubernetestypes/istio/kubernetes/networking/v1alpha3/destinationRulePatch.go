// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type DestinationRulePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput   `pulumi:"metadata"`
	Spec     DestinationRuleSpecPatchPtrOutput `pulumi:"spec"`
	Status   pulumi.MapOutput                  `pulumi:"status"`
}

// NewDestinationRulePatch registers a new resource with the given unique name, arguments, and options.
func NewDestinationRulePatch(ctx *pulumi.Context,
	name string, args *DestinationRulePatchArgs, opts ...pulumi.ResourceOption) (*DestinationRulePatch, error) {
	if args == nil {
		args = &DestinationRulePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1alpha3")
	args.Kind = pulumi.StringPtr("DestinationRule")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1:DestinationRulePatch"),
		},
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1beta1:DestinationRulePatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource DestinationRulePatch
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1alpha3:DestinationRulePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDestinationRulePatch gets an existing DestinationRulePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDestinationRulePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DestinationRulePatchState, opts ...pulumi.ResourceOption) (*DestinationRulePatch, error) {
	var resource DestinationRulePatch
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1alpha3:DestinationRulePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DestinationRulePatch resources.
type destinationRulePatchState struct {
}

type DestinationRulePatchState struct {
}

func (DestinationRulePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationRulePatchState)(nil)).Elem()
}

type destinationRulePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *DestinationRuleSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a DestinationRulePatch resource.
type DestinationRulePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     DestinationRuleSpecPatchPtrInput
}

func (DestinationRulePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*destinationRulePatchArgs)(nil)).Elem()
}

type DestinationRulePatchInput interface {
	pulumi.Input

	ToDestinationRulePatchOutput() DestinationRulePatchOutput
	ToDestinationRulePatchOutputWithContext(ctx context.Context) DestinationRulePatchOutput
}

func (*DestinationRulePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRulePatch)(nil)).Elem()
}

func (i *DestinationRulePatch) ToDestinationRulePatchOutput() DestinationRulePatchOutput {
	return i.ToDestinationRulePatchOutputWithContext(context.Background())
}

func (i *DestinationRulePatch) ToDestinationRulePatchOutputWithContext(ctx context.Context) DestinationRulePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRulePatchOutput)
}

// DestinationRulePatchArrayInput is an input type that accepts DestinationRulePatchArray and DestinationRulePatchArrayOutput values.
// You can construct a concrete instance of `DestinationRulePatchArrayInput` via:
//
//	DestinationRulePatchArray{ DestinationRulePatchArgs{...} }
type DestinationRulePatchArrayInput interface {
	pulumi.Input

	ToDestinationRulePatchArrayOutput() DestinationRulePatchArrayOutput
	ToDestinationRulePatchArrayOutputWithContext(context.Context) DestinationRulePatchArrayOutput
}

type DestinationRulePatchArray []DestinationRulePatchInput

func (DestinationRulePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationRulePatch)(nil)).Elem()
}

func (i DestinationRulePatchArray) ToDestinationRulePatchArrayOutput() DestinationRulePatchArrayOutput {
	return i.ToDestinationRulePatchArrayOutputWithContext(context.Background())
}

func (i DestinationRulePatchArray) ToDestinationRulePatchArrayOutputWithContext(ctx context.Context) DestinationRulePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRulePatchArrayOutput)
}

// DestinationRulePatchMapInput is an input type that accepts DestinationRulePatchMap and DestinationRulePatchMapOutput values.
// You can construct a concrete instance of `DestinationRulePatchMapInput` via:
//
//	DestinationRulePatchMap{ "key": DestinationRulePatchArgs{...} }
type DestinationRulePatchMapInput interface {
	pulumi.Input

	ToDestinationRulePatchMapOutput() DestinationRulePatchMapOutput
	ToDestinationRulePatchMapOutputWithContext(context.Context) DestinationRulePatchMapOutput
}

type DestinationRulePatchMap map[string]DestinationRulePatchInput

func (DestinationRulePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationRulePatch)(nil)).Elem()
}

func (i DestinationRulePatchMap) ToDestinationRulePatchMapOutput() DestinationRulePatchMapOutput {
	return i.ToDestinationRulePatchMapOutputWithContext(context.Background())
}

func (i DestinationRulePatchMap) ToDestinationRulePatchMapOutputWithContext(ctx context.Context) DestinationRulePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRulePatchMapOutput)
}

type DestinationRulePatchOutput struct{ *pulumi.OutputState }

func (DestinationRulePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRulePatch)(nil)).Elem()
}

func (o DestinationRulePatchOutput) ToDestinationRulePatchOutput() DestinationRulePatchOutput {
	return o
}

func (o DestinationRulePatchOutput) ToDestinationRulePatchOutputWithContext(ctx context.Context) DestinationRulePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DestinationRulePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRulePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DestinationRulePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRulePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o DestinationRulePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *DestinationRulePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o DestinationRulePatchOutput) Spec() DestinationRuleSpecPatchPtrOutput {
	return o.ApplyT(func(v *DestinationRulePatch) DestinationRuleSpecPatchPtrOutput { return v.Spec }).(DestinationRuleSpecPatchPtrOutput)
}

func (o DestinationRulePatchOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *DestinationRulePatch) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type DestinationRulePatchArrayOutput struct{ *pulumi.OutputState }

func (DestinationRulePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DestinationRulePatch)(nil)).Elem()
}

func (o DestinationRulePatchArrayOutput) ToDestinationRulePatchArrayOutput() DestinationRulePatchArrayOutput {
	return o
}

func (o DestinationRulePatchArrayOutput) ToDestinationRulePatchArrayOutputWithContext(ctx context.Context) DestinationRulePatchArrayOutput {
	return o
}

func (o DestinationRulePatchArrayOutput) Index(i pulumi.IntInput) DestinationRulePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DestinationRulePatch {
		return vs[0].([]*DestinationRulePatch)[vs[1].(int)]
	}).(DestinationRulePatchOutput)
}

type DestinationRulePatchMapOutput struct{ *pulumi.OutputState }

func (DestinationRulePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DestinationRulePatch)(nil)).Elem()
}

func (o DestinationRulePatchMapOutput) ToDestinationRulePatchMapOutput() DestinationRulePatchMapOutput {
	return o
}

func (o DestinationRulePatchMapOutput) ToDestinationRulePatchMapOutputWithContext(ctx context.Context) DestinationRulePatchMapOutput {
	return o
}

func (o DestinationRulePatchMapOutput) MapIndex(k pulumi.StringInput) DestinationRulePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DestinationRulePatch {
		return vs[0].(map[string]*DestinationRulePatch)[vs[1].(string)]
	}).(DestinationRulePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRulePatchInput)(nil)).Elem(), &DestinationRulePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRulePatchArrayInput)(nil)).Elem(), DestinationRulePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRulePatchMapInput)(nil)).Elem(), DestinationRulePatchMap{})
	pulumi.RegisterOutputType(DestinationRulePatchOutput{})
	pulumi.RegisterOutputType(DestinationRulePatchArrayOutput{})
	pulumi.RegisterOutputType(DestinationRulePatchMapOutput{})
}
