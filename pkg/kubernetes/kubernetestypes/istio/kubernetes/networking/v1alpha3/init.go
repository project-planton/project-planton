// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha3

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "kubernetes:networking.istio.io/v1alpha3:DestinationRule":
		r = &DestinationRule{}
	case "kubernetes:networking.istio.io/v1alpha3:DestinationRuleList":
		r = &DestinationRuleList{}
	case "kubernetes:networking.istio.io/v1alpha3:DestinationRulePatch":
		r = &DestinationRulePatch{}
	case "kubernetes:networking.istio.io/v1alpha3:EnvoyFilter":
		r = &EnvoyFilter{}
	case "kubernetes:networking.istio.io/v1alpha3:EnvoyFilterList":
		r = &EnvoyFilterList{}
	case "kubernetes:networking.istio.io/v1alpha3:EnvoyFilterPatch":
		r = &EnvoyFilterPatch{}
	case "kubernetes:networking.istio.io/v1alpha3:Gateway":
		r = &Gateway{}
	case "kubernetes:networking.istio.io/v1alpha3:GatewayList":
		r = &GatewayList{}
	case "kubernetes:networking.istio.io/v1alpha3:GatewayPatch":
		r = &GatewayPatch{}
	case "kubernetes:networking.istio.io/v1alpha3:ServiceEntry":
		r = &ServiceEntry{}
	case "kubernetes:networking.istio.io/v1alpha3:ServiceEntryList":
		r = &ServiceEntryList{}
	case "kubernetes:networking.istio.io/v1alpha3:ServiceEntryPatch":
		r = &ServiceEntryPatch{}
	case "kubernetes:networking.istio.io/v1alpha3:Sidecar":
		r = &Sidecar{}
	case "kubernetes:networking.istio.io/v1alpha3:SidecarList":
		r = &SidecarList{}
	case "kubernetes:networking.istio.io/v1alpha3:SidecarPatch":
		r = &SidecarPatch{}
	case "kubernetes:networking.istio.io/v1alpha3:VirtualService":
		r = &VirtualService{}
	case "kubernetes:networking.istio.io/v1alpha3:VirtualServiceList":
		r = &VirtualServiceList{}
	case "kubernetes:networking.istio.io/v1alpha3:VirtualServicePatch":
		r = &VirtualServicePatch{}
	case "kubernetes:networking.istio.io/v1alpha3:WorkloadEntry":
		r = &WorkloadEntry{}
	case "kubernetes:networking.istio.io/v1alpha3:WorkloadEntryList":
		r = &WorkloadEntryList{}
	case "kubernetes:networking.istio.io/v1alpha3:WorkloadEntryPatch":
		r = &WorkloadEntryPatch{}
	case "kubernetes:networking.istio.io/v1alpha3:WorkloadGroup":
		r = &WorkloadGroup{}
	case "kubernetes:networking.istio.io/v1alpha3:WorkloadGroupList":
		r = &WorkloadGroupList{}
	case "kubernetes:networking.istio.io/v1alpha3:WorkloadGroupPatch":
		r = &WorkloadGroupPatch{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := utilities.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"crds",
		"networking.istio.io/v1alpha3",
		&module{version},
	)
}
