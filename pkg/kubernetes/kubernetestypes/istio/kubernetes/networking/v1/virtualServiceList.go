// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VirtualServiceList is a list of VirtualService
type VirtualServiceList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of virtualservices. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VirtualServiceTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVirtualServiceList registers a new resource with the given unique name, arguments, and options.
func NewVirtualServiceList(ctx *pulumi.Context,
	name string, args *VirtualServiceListArgs, opts ...pulumi.ResourceOption) (*VirtualServiceList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1")
	args.Kind = pulumi.StringPtr("VirtualServiceList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VirtualServiceList
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1:VirtualServiceList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualServiceList gets an existing VirtualServiceList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualServiceList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualServiceListState, opts ...pulumi.ResourceOption) (*VirtualServiceList, error) {
	var resource VirtualServiceList
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1:VirtualServiceList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualServiceList resources.
type virtualServiceListState struct {
}

type VirtualServiceListState struct {
}

func (VirtualServiceListState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServiceListState)(nil)).Elem()
}

type virtualServiceListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of virtualservices. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VirtualServiceType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VirtualServiceList resource.
type VirtualServiceListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of virtualservices. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VirtualServiceTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VirtualServiceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServiceListArgs)(nil)).Elem()
}

type VirtualServiceListInput interface {
	pulumi.Input

	ToVirtualServiceListOutput() VirtualServiceListOutput
	ToVirtualServiceListOutputWithContext(ctx context.Context) VirtualServiceListOutput
}

func (*VirtualServiceList) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceList)(nil)).Elem()
}

func (i *VirtualServiceList) ToVirtualServiceListOutput() VirtualServiceListOutput {
	return i.ToVirtualServiceListOutputWithContext(context.Background())
}

func (i *VirtualServiceList) ToVirtualServiceListOutputWithContext(ctx context.Context) VirtualServiceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceListOutput)
}

// VirtualServiceListArrayInput is an input type that accepts VirtualServiceListArray and VirtualServiceListArrayOutput values.
// You can construct a concrete instance of `VirtualServiceListArrayInput` via:
//
//	VirtualServiceListArray{ VirtualServiceListArgs{...} }
type VirtualServiceListArrayInput interface {
	pulumi.Input

	ToVirtualServiceListArrayOutput() VirtualServiceListArrayOutput
	ToVirtualServiceListArrayOutputWithContext(context.Context) VirtualServiceListArrayOutput
}

type VirtualServiceListArray []VirtualServiceListInput

func (VirtualServiceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualServiceList)(nil)).Elem()
}

func (i VirtualServiceListArray) ToVirtualServiceListArrayOutput() VirtualServiceListArrayOutput {
	return i.ToVirtualServiceListArrayOutputWithContext(context.Background())
}

func (i VirtualServiceListArray) ToVirtualServiceListArrayOutputWithContext(ctx context.Context) VirtualServiceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceListArrayOutput)
}

// VirtualServiceListMapInput is an input type that accepts VirtualServiceListMap and VirtualServiceListMapOutput values.
// You can construct a concrete instance of `VirtualServiceListMapInput` via:
//
//	VirtualServiceListMap{ "key": VirtualServiceListArgs{...} }
type VirtualServiceListMapInput interface {
	pulumi.Input

	ToVirtualServiceListMapOutput() VirtualServiceListMapOutput
	ToVirtualServiceListMapOutputWithContext(context.Context) VirtualServiceListMapOutput
}

type VirtualServiceListMap map[string]VirtualServiceListInput

func (VirtualServiceListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualServiceList)(nil)).Elem()
}

func (i VirtualServiceListMap) ToVirtualServiceListMapOutput() VirtualServiceListMapOutput {
	return i.ToVirtualServiceListMapOutputWithContext(context.Background())
}

func (i VirtualServiceListMap) ToVirtualServiceListMapOutputWithContext(ctx context.Context) VirtualServiceListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceListMapOutput)
}

type VirtualServiceListOutput struct{ *pulumi.OutputState }

func (VirtualServiceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceList)(nil)).Elem()
}

func (o VirtualServiceListOutput) ToVirtualServiceListOutput() VirtualServiceListOutput {
	return o
}

func (o VirtualServiceListOutput) ToVirtualServiceListOutputWithContext(ctx context.Context) VirtualServiceListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VirtualServiceListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualServiceList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of virtualservices. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VirtualServiceListOutput) Items() VirtualServiceTypeArrayOutput {
	return o.ApplyT(func(v *VirtualServiceList) VirtualServiceTypeArrayOutput { return v.Items }).(VirtualServiceTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VirtualServiceListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualServiceList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VirtualServiceListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VirtualServiceList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VirtualServiceListArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualServiceList)(nil)).Elem()
}

func (o VirtualServiceListArrayOutput) ToVirtualServiceListArrayOutput() VirtualServiceListArrayOutput {
	return o
}

func (o VirtualServiceListArrayOutput) ToVirtualServiceListArrayOutputWithContext(ctx context.Context) VirtualServiceListArrayOutput {
	return o
}

func (o VirtualServiceListArrayOutput) Index(i pulumi.IntInput) VirtualServiceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualServiceList {
		return vs[0].([]*VirtualServiceList)[vs[1].(int)]
	}).(VirtualServiceListOutput)
}

type VirtualServiceListMapOutput struct{ *pulumi.OutputState }

func (VirtualServiceListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualServiceList)(nil)).Elem()
}

func (o VirtualServiceListMapOutput) ToVirtualServiceListMapOutput() VirtualServiceListMapOutput {
	return o
}

func (o VirtualServiceListMapOutput) ToVirtualServiceListMapOutputWithContext(ctx context.Context) VirtualServiceListMapOutput {
	return o
}

func (o VirtualServiceListMapOutput) MapIndex(k pulumi.StringInput) VirtualServiceListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualServiceList {
		return vs[0].(map[string]*VirtualServiceList)[vs[1].(string)]
	}).(VirtualServiceListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceListInput)(nil)).Elem(), &VirtualServiceList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceListArrayInput)(nil)).Elem(), VirtualServiceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceListMapInput)(nil)).Elem(), VirtualServiceListMap{})
	pulumi.RegisterOutputType(VirtualServiceListOutput{})
	pulumi.RegisterOutputType(VirtualServiceListArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceListMapOutput{})
}
