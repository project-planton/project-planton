// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceEntry struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     ServiceEntrySpecOutput  `pulumi:"spec"`
	Status   pulumi.MapOutput        `pulumi:"status"`
}

// NewServiceEntry registers a new resource with the given unique name, arguments, and options.
func NewServiceEntry(ctx *pulumi.Context,
	name string, args *ServiceEntryArgs, opts ...pulumi.ResourceOption) (*ServiceEntry, error) {
	if args == nil {
		args = &ServiceEntryArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1beta1")
	args.Kind = pulumi.StringPtr("ServiceEntry")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1:ServiceEntry"),
		},
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1alpha3:ServiceEntry"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ServiceEntry
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1beta1:ServiceEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceEntry gets an existing ServiceEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceEntryState, opts ...pulumi.ResourceOption) (*ServiceEntry, error) {
	var resource ServiceEntry
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1beta1:ServiceEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceEntry resources.
type serviceEntryState struct {
}

type ServiceEntryState struct {
}

func (ServiceEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEntryState)(nil)).Elem()
}

type serviceEntryArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ServiceEntrySpec  `pulumi:"spec"`
}

// The set of arguments for constructing a ServiceEntry resource.
type ServiceEntryArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ServiceEntrySpecPtrInput
}

func (ServiceEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceEntryArgs)(nil)).Elem()
}

type ServiceEntryInput interface {
	pulumi.Input

	ToServiceEntryOutput() ServiceEntryOutput
	ToServiceEntryOutputWithContext(ctx context.Context) ServiceEntryOutput
}

func (*ServiceEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntry)(nil)).Elem()
}

func (i *ServiceEntry) ToServiceEntryOutput() ServiceEntryOutput {
	return i.ToServiceEntryOutputWithContext(context.Background())
}

func (i *ServiceEntry) ToServiceEntryOutputWithContext(ctx context.Context) ServiceEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntryOutput)
}

// ServiceEntryArrayInput is an input type that accepts ServiceEntryArray and ServiceEntryArrayOutput values.
// You can construct a concrete instance of `ServiceEntryArrayInput` via:
//
//	ServiceEntryArray{ ServiceEntryArgs{...} }
type ServiceEntryArrayInput interface {
	pulumi.Input

	ToServiceEntryArrayOutput() ServiceEntryArrayOutput
	ToServiceEntryArrayOutputWithContext(context.Context) ServiceEntryArrayOutput
}

type ServiceEntryArray []ServiceEntryInput

func (ServiceEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceEntry)(nil)).Elem()
}

func (i ServiceEntryArray) ToServiceEntryArrayOutput() ServiceEntryArrayOutput {
	return i.ToServiceEntryArrayOutputWithContext(context.Background())
}

func (i ServiceEntryArray) ToServiceEntryArrayOutputWithContext(ctx context.Context) ServiceEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntryArrayOutput)
}

// ServiceEntryMapInput is an input type that accepts ServiceEntryMap and ServiceEntryMapOutput values.
// You can construct a concrete instance of `ServiceEntryMapInput` via:
//
//	ServiceEntryMap{ "key": ServiceEntryArgs{...} }
type ServiceEntryMapInput interface {
	pulumi.Input

	ToServiceEntryMapOutput() ServiceEntryMapOutput
	ToServiceEntryMapOutputWithContext(context.Context) ServiceEntryMapOutput
}

type ServiceEntryMap map[string]ServiceEntryInput

func (ServiceEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceEntry)(nil)).Elem()
}

func (i ServiceEntryMap) ToServiceEntryMapOutput() ServiceEntryMapOutput {
	return i.ToServiceEntryMapOutputWithContext(context.Background())
}

func (i ServiceEntryMap) ToServiceEntryMapOutputWithContext(ctx context.Context) ServiceEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntryMapOutput)
}

type ServiceEntryOutput struct{ *pulumi.OutputState }

func (ServiceEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntry)(nil)).Elem()
}

func (o ServiceEntryOutput) ToServiceEntryOutput() ServiceEntryOutput {
	return o
}

func (o ServiceEntryOutput) ToServiceEntryOutputWithContext(ctx context.Context) ServiceEntryOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceEntryOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEntry) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceEntryOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceEntry) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceEntryOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ServiceEntry) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ServiceEntryOutput) Spec() ServiceEntrySpecOutput {
	return o.ApplyT(func(v *ServiceEntry) ServiceEntrySpecOutput { return v.Spec }).(ServiceEntrySpecOutput)
}

func (o ServiceEntryOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *ServiceEntry) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type ServiceEntryArrayOutput struct{ *pulumi.OutputState }

func (ServiceEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceEntry)(nil)).Elem()
}

func (o ServiceEntryArrayOutput) ToServiceEntryArrayOutput() ServiceEntryArrayOutput {
	return o
}

func (o ServiceEntryArrayOutput) ToServiceEntryArrayOutputWithContext(ctx context.Context) ServiceEntryArrayOutput {
	return o
}

func (o ServiceEntryArrayOutput) Index(i pulumi.IntInput) ServiceEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceEntry {
		return vs[0].([]*ServiceEntry)[vs[1].(int)]
	}).(ServiceEntryOutput)
}

type ServiceEntryMapOutput struct{ *pulumi.OutputState }

func (ServiceEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceEntry)(nil)).Elem()
}

func (o ServiceEntryMapOutput) ToServiceEntryMapOutput() ServiceEntryMapOutput {
	return o
}

func (o ServiceEntryMapOutput) ToServiceEntryMapOutputWithContext(ctx context.Context) ServiceEntryMapOutput {
	return o
}

func (o ServiceEntryMapOutput) MapIndex(k pulumi.StringInput) ServiceEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceEntry {
		return vs[0].(map[string]*ServiceEntry)[vs[1].(string)]
	}).(ServiceEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntryInput)(nil)).Elem(), &ServiceEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntryArrayInput)(nil)).Elem(), ServiceEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntryMapInput)(nil)).Elem(), ServiceEntryMap{})
	pulumi.RegisterOutputType(ServiceEntryOutput{})
	pulumi.RegisterOutputType(ServiceEntryArrayOutput{})
	pulumi.RegisterOutputType(ServiceEntryMapOutput{})
}
