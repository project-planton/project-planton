// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VirtualService struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec     VirtualServiceSpecOutput `pulumi:"spec"`
	Status   pulumi.MapOutput         `pulumi:"status"`
}

// NewVirtualService registers a new resource with the given unique name, arguments, and options.
func NewVirtualService(ctx *pulumi.Context,
	name string, args *VirtualServiceArgs, opts ...pulumi.ResourceOption) (*VirtualService, error) {
	if args == nil {
		args = &VirtualServiceArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("networking.istio.io/v1beta1")
	args.Kind = pulumi.StringPtr("VirtualService")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1:VirtualService"),
		},
		{
			Type: pulumi.String("kubernetes:networking.istio.io/v1alpha3:VirtualService"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VirtualService
	err := ctx.RegisterResource("kubernetes:networking.istio.io/v1beta1:VirtualService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualService gets an existing VirtualService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualServiceState, opts ...pulumi.ResourceOption) (*VirtualService, error) {
	var resource VirtualService
	err := ctx.ReadResource("kubernetes:networking.istio.io/v1beta1:VirtualService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualService resources.
type virtualServiceState struct {
}

type VirtualServiceState struct {
}

func (VirtualServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServiceState)(nil)).Elem()
}

type virtualServiceArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *VirtualServiceSpec `pulumi:"spec"`
}

// The set of arguments for constructing a VirtualService resource.
type VirtualServiceArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VirtualServiceSpecPtrInput
}

func (VirtualServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServiceArgs)(nil)).Elem()
}

type VirtualServiceInput interface {
	pulumi.Input

	ToVirtualServiceOutput() VirtualServiceOutput
	ToVirtualServiceOutputWithContext(ctx context.Context) VirtualServiceOutput
}

func (*VirtualService) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualService)(nil)).Elem()
}

func (i *VirtualService) ToVirtualServiceOutput() VirtualServiceOutput {
	return i.ToVirtualServiceOutputWithContext(context.Background())
}

func (i *VirtualService) ToVirtualServiceOutputWithContext(ctx context.Context) VirtualServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceOutput)
}

// VirtualServiceArrayInput is an input type that accepts VirtualServiceArray and VirtualServiceArrayOutput values.
// You can construct a concrete instance of `VirtualServiceArrayInput` via:
//
//	VirtualServiceArray{ VirtualServiceArgs{...} }
type VirtualServiceArrayInput interface {
	pulumi.Input

	ToVirtualServiceArrayOutput() VirtualServiceArrayOutput
	ToVirtualServiceArrayOutputWithContext(context.Context) VirtualServiceArrayOutput
}

type VirtualServiceArray []VirtualServiceInput

func (VirtualServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualService)(nil)).Elem()
}

func (i VirtualServiceArray) ToVirtualServiceArrayOutput() VirtualServiceArrayOutput {
	return i.ToVirtualServiceArrayOutputWithContext(context.Background())
}

func (i VirtualServiceArray) ToVirtualServiceArrayOutputWithContext(ctx context.Context) VirtualServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceArrayOutput)
}

// VirtualServiceMapInput is an input type that accepts VirtualServiceMap and VirtualServiceMapOutput values.
// You can construct a concrete instance of `VirtualServiceMapInput` via:
//
//	VirtualServiceMap{ "key": VirtualServiceArgs{...} }
type VirtualServiceMapInput interface {
	pulumi.Input

	ToVirtualServiceMapOutput() VirtualServiceMapOutput
	ToVirtualServiceMapOutputWithContext(context.Context) VirtualServiceMapOutput
}

type VirtualServiceMap map[string]VirtualServiceInput

func (VirtualServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualService)(nil)).Elem()
}

func (i VirtualServiceMap) ToVirtualServiceMapOutput() VirtualServiceMapOutput {
	return i.ToVirtualServiceMapOutputWithContext(context.Background())
}

func (i VirtualServiceMap) ToVirtualServiceMapOutputWithContext(ctx context.Context) VirtualServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceMapOutput)
}

type VirtualServiceOutput struct{ *pulumi.OutputState }

func (VirtualServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualService)(nil)).Elem()
}

func (o VirtualServiceOutput) ToVirtualServiceOutput() VirtualServiceOutput {
	return o
}

func (o VirtualServiceOutput) ToVirtualServiceOutputWithContext(ctx context.Context) VirtualServiceOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VirtualServiceOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualService) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VirtualServiceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualService) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VirtualServiceOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VirtualService) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VirtualServiceOutput) Spec() VirtualServiceSpecOutput {
	return o.ApplyT(func(v *VirtualService) VirtualServiceSpecOutput { return v.Spec }).(VirtualServiceSpecOutput)
}

func (o VirtualServiceOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *VirtualService) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type VirtualServiceArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualService)(nil)).Elem()
}

func (o VirtualServiceArrayOutput) ToVirtualServiceArrayOutput() VirtualServiceArrayOutput {
	return o
}

func (o VirtualServiceArrayOutput) ToVirtualServiceArrayOutputWithContext(ctx context.Context) VirtualServiceArrayOutput {
	return o
}

func (o VirtualServiceArrayOutput) Index(i pulumi.IntInput) VirtualServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualService {
		return vs[0].([]*VirtualService)[vs[1].(int)]
	}).(VirtualServiceOutput)
}

type VirtualServiceMapOutput struct{ *pulumi.OutputState }

func (VirtualServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualService)(nil)).Elem()
}

func (o VirtualServiceMapOutput) ToVirtualServiceMapOutput() VirtualServiceMapOutput {
	return o
}

func (o VirtualServiceMapOutput) ToVirtualServiceMapOutputWithContext(ctx context.Context) VirtualServiceMapOutput {
	return o
}

func (o VirtualServiceMapOutput) MapIndex(k pulumi.StringInput) VirtualServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualService {
		return vs[0].(map[string]*VirtualService)[vs[1].(string)]
	}).(VirtualServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceInput)(nil)).Elem(), &VirtualService{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceArrayInput)(nil)).Elem(), VirtualServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceMapInput)(nil)).Elem(), VirtualServiceMap{})
	pulumi.RegisterOutputType(VirtualServiceOutput{})
	pulumi.RegisterOutputType(VirtualServiceArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceMapOutput{})
}
