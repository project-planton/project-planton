// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type WasmPluginType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     *WasmPluginSpec        `pulumi:"spec"`
	Status   map[string]interface{} `pulumi:"status"`
}

// WasmPluginTypeInput is an input type that accepts WasmPluginTypeArgs and WasmPluginTypeOutput values.
// You can construct a concrete instance of `WasmPluginTypeInput` via:
//
//	WasmPluginTypeArgs{...}
type WasmPluginTypeInput interface {
	pulumi.Input

	ToWasmPluginTypeOutput() WasmPluginTypeOutput
	ToWasmPluginTypeOutputWithContext(context.Context) WasmPluginTypeOutput
}

type WasmPluginTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     WasmPluginSpecPtrInput    `pulumi:"spec"`
	Status   pulumi.MapInput           `pulumi:"status"`
}

func (WasmPluginTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginType)(nil)).Elem()
}

func (i WasmPluginTypeArgs) ToWasmPluginTypeOutput() WasmPluginTypeOutput {
	return i.ToWasmPluginTypeOutputWithContext(context.Background())
}

func (i WasmPluginTypeArgs) ToWasmPluginTypeOutputWithContext(ctx context.Context) WasmPluginTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginTypeOutput)
}

// WasmPluginTypeArrayInput is an input type that accepts WasmPluginTypeArray and WasmPluginTypeArrayOutput values.
// You can construct a concrete instance of `WasmPluginTypeArrayInput` via:
//
//	WasmPluginTypeArray{ WasmPluginTypeArgs{...} }
type WasmPluginTypeArrayInput interface {
	pulumi.Input

	ToWasmPluginTypeArrayOutput() WasmPluginTypeArrayOutput
	ToWasmPluginTypeArrayOutputWithContext(context.Context) WasmPluginTypeArrayOutput
}

type WasmPluginTypeArray []WasmPluginTypeInput

func (WasmPluginTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginType)(nil)).Elem()
}

func (i WasmPluginTypeArray) ToWasmPluginTypeArrayOutput() WasmPluginTypeArrayOutput {
	return i.ToWasmPluginTypeArrayOutputWithContext(context.Background())
}

func (i WasmPluginTypeArray) ToWasmPluginTypeArrayOutputWithContext(ctx context.Context) WasmPluginTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginTypeArrayOutput)
}

type WasmPluginTypeOutput struct{ *pulumi.OutputState }

func (WasmPluginTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginType)(nil)).Elem()
}

func (o WasmPluginTypeOutput) ToWasmPluginTypeOutput() WasmPluginTypeOutput {
	return o
}

func (o WasmPluginTypeOutput) ToWasmPluginTypeOutputWithContext(ctx context.Context) WasmPluginTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WasmPluginTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WasmPluginTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o WasmPluginTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v WasmPluginType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o WasmPluginTypeOutput) Spec() WasmPluginSpecPtrOutput {
	return o.ApplyT(func(v WasmPluginType) *WasmPluginSpec { return v.Spec }).(WasmPluginSpecPtrOutput)
}

func (o WasmPluginTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v WasmPluginType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type WasmPluginTypeArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginType)(nil)).Elem()
}

func (o WasmPluginTypeArrayOutput) ToWasmPluginTypeArrayOutput() WasmPluginTypeArrayOutput {
	return o
}

func (o WasmPluginTypeArrayOutput) ToWasmPluginTypeArrayOutputWithContext(ctx context.Context) WasmPluginTypeArrayOutput {
	return o
}

func (o WasmPluginTypeArrayOutput) Index(i pulumi.IntInput) WasmPluginTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginType {
		return vs[0].([]WasmPluginType)[vs[1].(int)]
	}).(WasmPluginTypeOutput)
}

// WasmPluginList is a list of WasmPlugin
type WasmPluginListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of wasmplugins. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []WasmPluginType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// WasmPluginListTypeInput is an input type that accepts WasmPluginListTypeArgs and WasmPluginListTypeOutput values.
// You can construct a concrete instance of `WasmPluginListTypeInput` via:
//
//	WasmPluginListTypeArgs{...}
type WasmPluginListTypeInput interface {
	pulumi.Input

	ToWasmPluginListTypeOutput() WasmPluginListTypeOutput
	ToWasmPluginListTypeOutputWithContext(context.Context) WasmPluginListTypeOutput
}

// WasmPluginList is a list of WasmPlugin
type WasmPluginListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of wasmplugins. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items WasmPluginTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (WasmPluginListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginListType)(nil)).Elem()
}

func (i WasmPluginListTypeArgs) ToWasmPluginListTypeOutput() WasmPluginListTypeOutput {
	return i.ToWasmPluginListTypeOutputWithContext(context.Background())
}

func (i WasmPluginListTypeArgs) ToWasmPluginListTypeOutputWithContext(ctx context.Context) WasmPluginListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginListTypeOutput)
}

// WasmPluginList is a list of WasmPlugin
type WasmPluginListTypeOutput struct{ *pulumi.OutputState }

func (WasmPluginListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginListType)(nil)).Elem()
}

func (o WasmPluginListTypeOutput) ToWasmPluginListTypeOutput() WasmPluginListTypeOutput {
	return o
}

func (o WasmPluginListTypeOutput) ToWasmPluginListTypeOutputWithContext(ctx context.Context) WasmPluginListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WasmPluginListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of wasmplugins. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o WasmPluginListTypeOutput) Items() WasmPluginTypeArrayOutput {
	return o.ApplyT(func(v WasmPluginListType) []WasmPluginType { return v.Items }).(WasmPluginTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WasmPluginListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WasmPluginListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v WasmPluginListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

type WasmPluginPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *WasmPluginSpecPatch    `pulumi:"spec"`
	Status   map[string]interface{}  `pulumi:"status"`
}

// WasmPluginPatchTypeInput is an input type that accepts WasmPluginPatchTypeArgs and WasmPluginPatchTypeOutput values.
// You can construct a concrete instance of `WasmPluginPatchTypeInput` via:
//
//	WasmPluginPatchTypeArgs{...}
type WasmPluginPatchTypeInput interface {
	pulumi.Input

	ToWasmPluginPatchTypeOutput() WasmPluginPatchTypeOutput
	ToWasmPluginPatchTypeOutputWithContext(context.Context) WasmPluginPatchTypeOutput
}

type WasmPluginPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     WasmPluginSpecPatchPtrInput    `pulumi:"spec"`
	Status   pulumi.MapInput                `pulumi:"status"`
}

func (WasmPluginPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginPatchType)(nil)).Elem()
}

func (i WasmPluginPatchTypeArgs) ToWasmPluginPatchTypeOutput() WasmPluginPatchTypeOutput {
	return i.ToWasmPluginPatchTypeOutputWithContext(context.Background())
}

func (i WasmPluginPatchTypeArgs) ToWasmPluginPatchTypeOutputWithContext(ctx context.Context) WasmPluginPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginPatchTypeOutput)
}

type WasmPluginPatchTypeOutput struct{ *pulumi.OutputState }

func (WasmPluginPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginPatchType)(nil)).Elem()
}

func (o WasmPluginPatchTypeOutput) ToWasmPluginPatchTypeOutput() WasmPluginPatchTypeOutput {
	return o
}

func (o WasmPluginPatchTypeOutput) ToWasmPluginPatchTypeOutputWithContext(ctx context.Context) WasmPluginPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WasmPluginPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WasmPluginPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o WasmPluginPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v WasmPluginPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o WasmPluginPatchTypeOutput) Spec() WasmPluginSpecPatchPtrOutput {
	return o.ApplyT(func(v WasmPluginPatchType) *WasmPluginSpecPatch { return v.Spec }).(WasmPluginSpecPatchPtrOutput)
}

func (o WasmPluginPatchTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v WasmPluginPatchType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
type WasmPluginSpec struct {
	// Specifies the failure behavior for the plugin due to fatal errors.
	//
	// Valid Options: FAIL_CLOSE, FAIL_OPEN
	FailStrategy *string `pulumi:"failStrategy"`
	// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
	//
	// Valid Options: IfNotPresent, Always
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Credentials to use for OCI image pulling.
	ImagePullSecret *string `pulumi:"imagePullSecret"`
	// Specifies the criteria to determine which traffic is passed to WasmPlugin.
	Match []WasmPluginSpecMatch `pulumi:"match"`
	// Determines where in the filter chain this `WasmPlugin` is to be injected.
	//
	// Valid Options: AUTHN, AUTHZ, STATS
	Phase *string `pulumi:"phase"`
	// The configuration that will be passed on to the plugin.
	PluginConfig map[string]interface{} `pulumi:"pluginConfig"`
	// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
	PluginName *string `pulumi:"pluginName"`
	// Determines ordering of `WasmPlugins` in the same `phase`.
	Priority *int                    `pulumi:"priority"`
	Selector *WasmPluginSpecSelector `pulumi:"selector"`
	// SHA256 checksum that will be used to verify Wasm module or OCI container.
	Sha256    *string                  `pulumi:"sha256"`
	TargetRef *WasmPluginSpecTargetRef `pulumi:"targetRef"`
	// Optional.
	TargetRefs []WasmPluginSpecTargetRefs `pulumi:"targetRefs"`
	// Specifies the type of Wasm Extension to be used.
	//
	// Valid Options: HTTP, NETWORK
	Type *string `pulumi:"type"`
	// URL of a Wasm module or OCI container.
	Url             *string                 `pulumi:"url"`
	VerificationKey *string                 `pulumi:"verificationKey"`
	VmConfig        *WasmPluginSpecVmConfig `pulumi:"vmConfig"`
}

// WasmPluginSpecInput is an input type that accepts WasmPluginSpecArgs and WasmPluginSpecOutput values.
// You can construct a concrete instance of `WasmPluginSpecInput` via:
//
//	WasmPluginSpecArgs{...}
type WasmPluginSpecInput interface {
	pulumi.Input

	ToWasmPluginSpecOutput() WasmPluginSpecOutput
	ToWasmPluginSpecOutputWithContext(context.Context) WasmPluginSpecOutput
}

// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
type WasmPluginSpecArgs struct {
	// Specifies the failure behavior for the plugin due to fatal errors.
	//
	// Valid Options: FAIL_CLOSE, FAIL_OPEN
	FailStrategy pulumi.StringPtrInput `pulumi:"failStrategy"`
	// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
	//
	// Valid Options: IfNotPresent, Always
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Credentials to use for OCI image pulling.
	ImagePullSecret pulumi.StringPtrInput `pulumi:"imagePullSecret"`
	// Specifies the criteria to determine which traffic is passed to WasmPlugin.
	Match WasmPluginSpecMatchArrayInput `pulumi:"match"`
	// Determines where in the filter chain this `WasmPlugin` is to be injected.
	//
	// Valid Options: AUTHN, AUTHZ, STATS
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// The configuration that will be passed on to the plugin.
	PluginConfig pulumi.MapInput `pulumi:"pluginConfig"`
	// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// Determines ordering of `WasmPlugins` in the same `phase`.
	Priority pulumi.IntPtrInput             `pulumi:"priority"`
	Selector WasmPluginSpecSelectorPtrInput `pulumi:"selector"`
	// SHA256 checksum that will be used to verify Wasm module or OCI container.
	Sha256    pulumi.StringPtrInput           `pulumi:"sha256"`
	TargetRef WasmPluginSpecTargetRefPtrInput `pulumi:"targetRef"`
	// Optional.
	TargetRefs WasmPluginSpecTargetRefsArrayInput `pulumi:"targetRefs"`
	// Specifies the type of Wasm Extension to be used.
	//
	// Valid Options: HTTP, NETWORK
	Type pulumi.StringPtrInput `pulumi:"type"`
	// URL of a Wasm module or OCI container.
	Url             pulumi.StringPtrInput          `pulumi:"url"`
	VerificationKey pulumi.StringPtrInput          `pulumi:"verificationKey"`
	VmConfig        WasmPluginSpecVmConfigPtrInput `pulumi:"vmConfig"`
}

func (WasmPluginSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpec)(nil)).Elem()
}

func (i WasmPluginSpecArgs) ToWasmPluginSpecOutput() WasmPluginSpecOutput {
	return i.ToWasmPluginSpecOutputWithContext(context.Background())
}

func (i WasmPluginSpecArgs) ToWasmPluginSpecOutputWithContext(ctx context.Context) WasmPluginSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecOutput)
}

func (i WasmPluginSpecArgs) ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput {
	return i.ToWasmPluginSpecPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecArgs) ToWasmPluginSpecPtrOutputWithContext(ctx context.Context) WasmPluginSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecOutput).ToWasmPluginSpecPtrOutputWithContext(ctx)
}

// WasmPluginSpecPtrInput is an input type that accepts WasmPluginSpecArgs, WasmPluginSpecPtr and WasmPluginSpecPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecPtrInput` via:
//
//	        WasmPluginSpecArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput
	ToWasmPluginSpecPtrOutputWithContext(context.Context) WasmPluginSpecPtrOutput
}

type wasmPluginSpecPtrType WasmPluginSpecArgs

func WasmPluginSpecPtr(v *WasmPluginSpecArgs) WasmPluginSpecPtrInput {
	return (*wasmPluginSpecPtrType)(v)
}

func (*wasmPluginSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpec)(nil)).Elem()
}

func (i *wasmPluginSpecPtrType) ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput {
	return i.ToWasmPluginSpecPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecPtrType) ToWasmPluginSpecPtrOutputWithContext(ctx context.Context) WasmPluginSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecPtrOutput)
}

// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
type WasmPluginSpecOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpec)(nil)).Elem()
}

func (o WasmPluginSpecOutput) ToWasmPluginSpecOutput() WasmPluginSpecOutput {
	return o
}

func (o WasmPluginSpecOutput) ToWasmPluginSpecOutputWithContext(ctx context.Context) WasmPluginSpecOutput {
	return o
}

func (o WasmPluginSpecOutput) ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput {
	return o.ToWasmPluginSpecPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecOutput) ToWasmPluginSpecPtrOutputWithContext(ctx context.Context) WasmPluginSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpec) *WasmPluginSpec {
		return &v
	}).(WasmPluginSpecPtrOutput)
}

// Specifies the failure behavior for the plugin due to fatal errors.
//
// Valid Options: FAIL_CLOSE, FAIL_OPEN
func (o WasmPluginSpecOutput) FailStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.FailStrategy }).(pulumi.StringPtrOutput)
}

// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
//
// Valid Options: IfNotPresent, Always
func (o WasmPluginSpecOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Credentials to use for OCI image pulling.
func (o WasmPluginSpecOutput) ImagePullSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.ImagePullSecret }).(pulumi.StringPtrOutput)
}

// Specifies the criteria to determine which traffic is passed to WasmPlugin.
func (o WasmPluginSpecOutput) Match() WasmPluginSpecMatchArrayOutput {
	return o.ApplyT(func(v WasmPluginSpec) []WasmPluginSpecMatch { return v.Match }).(WasmPluginSpecMatchArrayOutput)
}

// Determines where in the filter chain this `WasmPlugin` is to be injected.
//
// Valid Options: AUTHN, AUTHZ, STATS
func (o WasmPluginSpecOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// The configuration that will be passed on to the plugin.
func (o WasmPluginSpecOutput) PluginConfig() pulumi.MapOutput {
	return o.ApplyT(func(v WasmPluginSpec) map[string]interface{} { return v.PluginConfig }).(pulumi.MapOutput)
}

// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
func (o WasmPluginSpecOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// Determines ordering of `WasmPlugins` in the same `phase`.
func (o WasmPluginSpecOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o WasmPluginSpecOutput) Selector() WasmPluginSpecSelectorPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *WasmPluginSpecSelector { return v.Selector }).(WasmPluginSpecSelectorPtrOutput)
}

// SHA256 checksum that will be used to verify Wasm module or OCI container.
func (o WasmPluginSpecOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecOutput) TargetRef() WasmPluginSpecTargetRefPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *WasmPluginSpecTargetRef { return v.TargetRef }).(WasmPluginSpecTargetRefPtrOutput)
}

// Optional.
func (o WasmPluginSpecOutput) TargetRefs() WasmPluginSpecTargetRefsArrayOutput {
	return o.ApplyT(func(v WasmPluginSpec) []WasmPluginSpecTargetRefs { return v.TargetRefs }).(WasmPluginSpecTargetRefsArrayOutput)
}

// Specifies the type of Wasm Extension to be used.
//
// Valid Options: HTTP, NETWORK
func (o WasmPluginSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// URL of a Wasm module or OCI container.
func (o WasmPluginSpecOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecOutput) VerificationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.VerificationKey }).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecOutput) VmConfig() WasmPluginSpecVmConfigPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *WasmPluginSpecVmConfig { return v.VmConfig }).(WasmPluginSpecVmConfigPtrOutput)
}

type WasmPluginSpecPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpec)(nil)).Elem()
}

func (o WasmPluginSpecPtrOutput) ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput {
	return o
}

func (o WasmPluginSpecPtrOutput) ToWasmPluginSpecPtrOutputWithContext(ctx context.Context) WasmPluginSpecPtrOutput {
	return o
}

func (o WasmPluginSpecPtrOutput) Elem() WasmPluginSpecOutput {
	return o.ApplyT(func(v *WasmPluginSpec) WasmPluginSpec {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpec
		return ret
	}).(WasmPluginSpecOutput)
}

// Specifies the failure behavior for the plugin due to fatal errors.
//
// Valid Options: FAIL_CLOSE, FAIL_OPEN
func (o WasmPluginSpecPtrOutput) FailStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.FailStrategy
	}).(pulumi.StringPtrOutput)
}

// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
//
// Valid Options: IfNotPresent, Always
func (o WasmPluginSpecPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Credentials to use for OCI image pulling.
func (o WasmPluginSpecPtrOutput) ImagePullSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullSecret
	}).(pulumi.StringPtrOutput)
}

// Specifies the criteria to determine which traffic is passed to WasmPlugin.
func (o WasmPluginSpecPtrOutput) Match() WasmPluginSpecMatchArrayOutput {
	return o.ApplyT(func(v *WasmPluginSpec) []WasmPluginSpecMatch {
		if v == nil {
			return nil
		}
		return v.Match
	}).(WasmPluginSpecMatchArrayOutput)
}

// Determines where in the filter chain this `WasmPlugin` is to be injected.
//
// Valid Options: AUTHN, AUTHZ, STATS
func (o WasmPluginSpecPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// The configuration that will be passed on to the plugin.
func (o WasmPluginSpecPtrOutput) PluginConfig() pulumi.MapOutput {
	return o.ApplyT(func(v *WasmPluginSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PluginConfig
	}).(pulumi.MapOutput)
}

// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
func (o WasmPluginSpecPtrOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.PluginName
	}).(pulumi.StringPtrOutput)
}

// Determines ordering of `WasmPlugins` in the same `phase`.
func (o WasmPluginSpecPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

func (o WasmPluginSpecPtrOutput) Selector() WasmPluginSpecSelectorPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *WasmPluginSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(WasmPluginSpecSelectorPtrOutput)
}

// SHA256 checksum that will be used to verify Wasm module or OCI container.
func (o WasmPluginSpecPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPtrOutput) TargetRef() WasmPluginSpecTargetRefPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *WasmPluginSpecTargetRef {
		if v == nil {
			return nil
		}
		return v.TargetRef
	}).(WasmPluginSpecTargetRefPtrOutput)
}

// Optional.
func (o WasmPluginSpecPtrOutput) TargetRefs() WasmPluginSpecTargetRefsArrayOutput {
	return o.ApplyT(func(v *WasmPluginSpec) []WasmPluginSpecTargetRefs {
		if v == nil {
			return nil
		}
		return v.TargetRefs
	}).(WasmPluginSpecTargetRefsArrayOutput)
}

// Specifies the type of Wasm Extension to be used.
//
// Valid Options: HTTP, NETWORK
func (o WasmPluginSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// URL of a Wasm module or OCI container.
func (o WasmPluginSpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPtrOutput) VerificationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.VerificationKey
	}).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPtrOutput) VmConfig() WasmPluginSpecVmConfigPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *WasmPluginSpecVmConfig {
		if v == nil {
			return nil
		}
		return v.VmConfig
	}).(WasmPluginSpecVmConfigPtrOutput)
}

type WasmPluginSpecMatch struct {
	// Criteria for selecting traffic by their direction.
	//
	// Valid Options: CLIENT, SERVER, CLIENT_AND_SERVER
	Mode *string `pulumi:"mode"`
	// Criteria for selecting traffic by their destination port.
	Ports []WasmPluginSpecMatchPorts `pulumi:"ports"`
}

// WasmPluginSpecMatchInput is an input type that accepts WasmPluginSpecMatchArgs and WasmPluginSpecMatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchInput` via:
//
//	WasmPluginSpecMatchArgs{...}
type WasmPluginSpecMatchInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchOutput() WasmPluginSpecMatchOutput
	ToWasmPluginSpecMatchOutputWithContext(context.Context) WasmPluginSpecMatchOutput
}

type WasmPluginSpecMatchArgs struct {
	// Criteria for selecting traffic by their direction.
	//
	// Valid Options: CLIENT, SERVER, CLIENT_AND_SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Criteria for selecting traffic by their destination port.
	Ports WasmPluginSpecMatchPortsArrayInput `pulumi:"ports"`
}

func (WasmPluginSpecMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatch)(nil)).Elem()
}

func (i WasmPluginSpecMatchArgs) ToWasmPluginSpecMatchOutput() WasmPluginSpecMatchOutput {
	return i.ToWasmPluginSpecMatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchArgs) ToWasmPluginSpecMatchOutputWithContext(ctx context.Context) WasmPluginSpecMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchOutput)
}

// WasmPluginSpecMatchArrayInput is an input type that accepts WasmPluginSpecMatchArray and WasmPluginSpecMatchArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchArrayInput` via:
//
//	WasmPluginSpecMatchArray{ WasmPluginSpecMatchArgs{...} }
type WasmPluginSpecMatchArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchArrayOutput() WasmPluginSpecMatchArrayOutput
	ToWasmPluginSpecMatchArrayOutputWithContext(context.Context) WasmPluginSpecMatchArrayOutput
}

type WasmPluginSpecMatchArray []WasmPluginSpecMatchInput

func (WasmPluginSpecMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatch)(nil)).Elem()
}

func (i WasmPluginSpecMatchArray) ToWasmPluginSpecMatchArrayOutput() WasmPluginSpecMatchArrayOutput {
	return i.ToWasmPluginSpecMatchArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchArray) ToWasmPluginSpecMatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchArrayOutput)
}

type WasmPluginSpecMatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatch)(nil)).Elem()
}

func (o WasmPluginSpecMatchOutput) ToWasmPluginSpecMatchOutput() WasmPluginSpecMatchOutput {
	return o
}

func (o WasmPluginSpecMatchOutput) ToWasmPluginSpecMatchOutputWithContext(ctx context.Context) WasmPluginSpecMatchOutput {
	return o
}

// Criteria for selecting traffic by their direction.
//
// Valid Options: CLIENT, SERVER, CLIENT_AND_SERVER
func (o WasmPluginSpecMatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecMatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Criteria for selecting traffic by their destination port.
func (o WasmPluginSpecMatchOutput) Ports() WasmPluginSpecMatchPortsArrayOutput {
	return o.ApplyT(func(v WasmPluginSpecMatch) []WasmPluginSpecMatchPorts { return v.Ports }).(WasmPluginSpecMatchPortsArrayOutput)
}

type WasmPluginSpecMatchArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatch)(nil)).Elem()
}

func (o WasmPluginSpecMatchArrayOutput) ToWasmPluginSpecMatchArrayOutput() WasmPluginSpecMatchArrayOutput {
	return o
}

func (o WasmPluginSpecMatchArrayOutput) ToWasmPluginSpecMatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchArrayOutput {
	return o
}

func (o WasmPluginSpecMatchArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecMatch {
		return vs[0].([]WasmPluginSpecMatch)[vs[1].(int)]
	}).(WasmPluginSpecMatchOutput)
}

type WasmPluginSpecMatchPatch struct {
	// Criteria for selecting traffic by their direction.
	//
	// Valid Options: CLIENT, SERVER, CLIENT_AND_SERVER
	Mode *string `pulumi:"mode"`
	// Criteria for selecting traffic by their destination port.
	Ports []WasmPluginSpecMatchPortsPatch `pulumi:"ports"`
}

// WasmPluginSpecMatchPatchInput is an input type that accepts WasmPluginSpecMatchPatchArgs and WasmPluginSpecMatchPatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchPatchInput` via:
//
//	WasmPluginSpecMatchPatchArgs{...}
type WasmPluginSpecMatchPatchInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchPatchOutput() WasmPluginSpecMatchPatchOutput
	ToWasmPluginSpecMatchPatchOutputWithContext(context.Context) WasmPluginSpecMatchPatchOutput
}

type WasmPluginSpecMatchPatchArgs struct {
	// Criteria for selecting traffic by their direction.
	//
	// Valid Options: CLIENT, SERVER, CLIENT_AND_SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Criteria for selecting traffic by their destination port.
	Ports WasmPluginSpecMatchPortsPatchArrayInput `pulumi:"ports"`
}

func (WasmPluginSpecMatchPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatchPatch)(nil)).Elem()
}

func (i WasmPluginSpecMatchPatchArgs) ToWasmPluginSpecMatchPatchOutput() WasmPluginSpecMatchPatchOutput {
	return i.ToWasmPluginSpecMatchPatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchPatchArgs) ToWasmPluginSpecMatchPatchOutputWithContext(ctx context.Context) WasmPluginSpecMatchPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchPatchOutput)
}

// WasmPluginSpecMatchPatchArrayInput is an input type that accepts WasmPluginSpecMatchPatchArray and WasmPluginSpecMatchPatchArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchPatchArrayInput` via:
//
//	WasmPluginSpecMatchPatchArray{ WasmPluginSpecMatchPatchArgs{...} }
type WasmPluginSpecMatchPatchArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchPatchArrayOutput() WasmPluginSpecMatchPatchArrayOutput
	ToWasmPluginSpecMatchPatchArrayOutputWithContext(context.Context) WasmPluginSpecMatchPatchArrayOutput
}

type WasmPluginSpecMatchPatchArray []WasmPluginSpecMatchPatchInput

func (WasmPluginSpecMatchPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatchPatch)(nil)).Elem()
}

func (i WasmPluginSpecMatchPatchArray) ToWasmPluginSpecMatchPatchArrayOutput() WasmPluginSpecMatchPatchArrayOutput {
	return i.ToWasmPluginSpecMatchPatchArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchPatchArray) ToWasmPluginSpecMatchPatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchPatchArrayOutput)
}

type WasmPluginSpecMatchPatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatchPatch)(nil)).Elem()
}

func (o WasmPluginSpecMatchPatchOutput) ToWasmPluginSpecMatchPatchOutput() WasmPluginSpecMatchPatchOutput {
	return o
}

func (o WasmPluginSpecMatchPatchOutput) ToWasmPluginSpecMatchPatchOutputWithContext(ctx context.Context) WasmPluginSpecMatchPatchOutput {
	return o
}

// Criteria for selecting traffic by their direction.
//
// Valid Options: CLIENT, SERVER, CLIENT_AND_SERVER
func (o WasmPluginSpecMatchPatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecMatchPatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Criteria for selecting traffic by their destination port.
func (o WasmPluginSpecMatchPatchOutput) Ports() WasmPluginSpecMatchPortsPatchArrayOutput {
	return o.ApplyT(func(v WasmPluginSpecMatchPatch) []WasmPluginSpecMatchPortsPatch { return v.Ports }).(WasmPluginSpecMatchPortsPatchArrayOutput)
}

type WasmPluginSpecMatchPatchArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatchPatch)(nil)).Elem()
}

func (o WasmPluginSpecMatchPatchArrayOutput) ToWasmPluginSpecMatchPatchArrayOutput() WasmPluginSpecMatchPatchArrayOutput {
	return o
}

func (o WasmPluginSpecMatchPatchArrayOutput) ToWasmPluginSpecMatchPatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchPatchArrayOutput {
	return o
}

func (o WasmPluginSpecMatchPatchArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecMatchPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecMatchPatch {
		return vs[0].([]WasmPluginSpecMatchPatch)[vs[1].(int)]
	}).(WasmPluginSpecMatchPatchOutput)
}

type WasmPluginSpecMatchPorts struct {
	Number *int `pulumi:"number"`
}

// WasmPluginSpecMatchPortsInput is an input type that accepts WasmPluginSpecMatchPortsArgs and WasmPluginSpecMatchPortsOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchPortsInput` via:
//
//	WasmPluginSpecMatchPortsArgs{...}
type WasmPluginSpecMatchPortsInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchPortsOutput() WasmPluginSpecMatchPortsOutput
	ToWasmPluginSpecMatchPortsOutputWithContext(context.Context) WasmPluginSpecMatchPortsOutput
}

type WasmPluginSpecMatchPortsArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (WasmPluginSpecMatchPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatchPorts)(nil)).Elem()
}

func (i WasmPluginSpecMatchPortsArgs) ToWasmPluginSpecMatchPortsOutput() WasmPluginSpecMatchPortsOutput {
	return i.ToWasmPluginSpecMatchPortsOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchPortsArgs) ToWasmPluginSpecMatchPortsOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchPortsOutput)
}

// WasmPluginSpecMatchPortsArrayInput is an input type that accepts WasmPluginSpecMatchPortsArray and WasmPluginSpecMatchPortsArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchPortsArrayInput` via:
//
//	WasmPluginSpecMatchPortsArray{ WasmPluginSpecMatchPortsArgs{...} }
type WasmPluginSpecMatchPortsArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchPortsArrayOutput() WasmPluginSpecMatchPortsArrayOutput
	ToWasmPluginSpecMatchPortsArrayOutputWithContext(context.Context) WasmPluginSpecMatchPortsArrayOutput
}

type WasmPluginSpecMatchPortsArray []WasmPluginSpecMatchPortsInput

func (WasmPluginSpecMatchPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatchPorts)(nil)).Elem()
}

func (i WasmPluginSpecMatchPortsArray) ToWasmPluginSpecMatchPortsArrayOutput() WasmPluginSpecMatchPortsArrayOutput {
	return i.ToWasmPluginSpecMatchPortsArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchPortsArray) ToWasmPluginSpecMatchPortsArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchPortsArrayOutput)
}

type WasmPluginSpecMatchPortsOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatchPorts)(nil)).Elem()
}

func (o WasmPluginSpecMatchPortsOutput) ToWasmPluginSpecMatchPortsOutput() WasmPluginSpecMatchPortsOutput {
	return o
}

func (o WasmPluginSpecMatchPortsOutput) ToWasmPluginSpecMatchPortsOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsOutput {
	return o
}

func (o WasmPluginSpecMatchPortsOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecMatchPorts) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type WasmPluginSpecMatchPortsArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatchPorts)(nil)).Elem()
}

func (o WasmPluginSpecMatchPortsArrayOutput) ToWasmPluginSpecMatchPortsArrayOutput() WasmPluginSpecMatchPortsArrayOutput {
	return o
}

func (o WasmPluginSpecMatchPortsArrayOutput) ToWasmPluginSpecMatchPortsArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsArrayOutput {
	return o
}

func (o WasmPluginSpecMatchPortsArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecMatchPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecMatchPorts {
		return vs[0].([]WasmPluginSpecMatchPorts)[vs[1].(int)]
	}).(WasmPluginSpecMatchPortsOutput)
}

type WasmPluginSpecMatchPortsPatch struct {
	Number *int `pulumi:"number"`
}

// WasmPluginSpecMatchPortsPatchInput is an input type that accepts WasmPluginSpecMatchPortsPatchArgs and WasmPluginSpecMatchPortsPatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchPortsPatchInput` via:
//
//	WasmPluginSpecMatchPortsPatchArgs{...}
type WasmPluginSpecMatchPortsPatchInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchPortsPatchOutput() WasmPluginSpecMatchPortsPatchOutput
	ToWasmPluginSpecMatchPortsPatchOutputWithContext(context.Context) WasmPluginSpecMatchPortsPatchOutput
}

type WasmPluginSpecMatchPortsPatchArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (WasmPluginSpecMatchPortsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatchPortsPatch)(nil)).Elem()
}

func (i WasmPluginSpecMatchPortsPatchArgs) ToWasmPluginSpecMatchPortsPatchOutput() WasmPluginSpecMatchPortsPatchOutput {
	return i.ToWasmPluginSpecMatchPortsPatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchPortsPatchArgs) ToWasmPluginSpecMatchPortsPatchOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchPortsPatchOutput)
}

// WasmPluginSpecMatchPortsPatchArrayInput is an input type that accepts WasmPluginSpecMatchPortsPatchArray and WasmPluginSpecMatchPortsPatchArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchPortsPatchArrayInput` via:
//
//	WasmPluginSpecMatchPortsPatchArray{ WasmPluginSpecMatchPortsPatchArgs{...} }
type WasmPluginSpecMatchPortsPatchArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchPortsPatchArrayOutput() WasmPluginSpecMatchPortsPatchArrayOutput
	ToWasmPluginSpecMatchPortsPatchArrayOutputWithContext(context.Context) WasmPluginSpecMatchPortsPatchArrayOutput
}

type WasmPluginSpecMatchPortsPatchArray []WasmPluginSpecMatchPortsPatchInput

func (WasmPluginSpecMatchPortsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatchPortsPatch)(nil)).Elem()
}

func (i WasmPluginSpecMatchPortsPatchArray) ToWasmPluginSpecMatchPortsPatchArrayOutput() WasmPluginSpecMatchPortsPatchArrayOutput {
	return i.ToWasmPluginSpecMatchPortsPatchArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchPortsPatchArray) ToWasmPluginSpecMatchPortsPatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchPortsPatchArrayOutput)
}

type WasmPluginSpecMatchPortsPatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchPortsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatchPortsPatch)(nil)).Elem()
}

func (o WasmPluginSpecMatchPortsPatchOutput) ToWasmPluginSpecMatchPortsPatchOutput() WasmPluginSpecMatchPortsPatchOutput {
	return o
}

func (o WasmPluginSpecMatchPortsPatchOutput) ToWasmPluginSpecMatchPortsPatchOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsPatchOutput {
	return o
}

func (o WasmPluginSpecMatchPortsPatchOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecMatchPortsPatch) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type WasmPluginSpecMatchPortsPatchArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchPortsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatchPortsPatch)(nil)).Elem()
}

func (o WasmPluginSpecMatchPortsPatchArrayOutput) ToWasmPluginSpecMatchPortsPatchArrayOutput() WasmPluginSpecMatchPortsPatchArrayOutput {
	return o
}

func (o WasmPluginSpecMatchPortsPatchArrayOutput) ToWasmPluginSpecMatchPortsPatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsPatchArrayOutput {
	return o
}

func (o WasmPluginSpecMatchPortsPatchArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecMatchPortsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecMatchPortsPatch {
		return vs[0].([]WasmPluginSpecMatchPortsPatch)[vs[1].(int)]
	}).(WasmPluginSpecMatchPortsPatchOutput)
}

// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
type WasmPluginSpecPatch struct {
	// Specifies the failure behavior for the plugin due to fatal errors.
	//
	// Valid Options: FAIL_CLOSE, FAIL_OPEN
	FailStrategy *string `pulumi:"failStrategy"`
	// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
	//
	// Valid Options: IfNotPresent, Always
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Credentials to use for OCI image pulling.
	ImagePullSecret *string `pulumi:"imagePullSecret"`
	// Specifies the criteria to determine which traffic is passed to WasmPlugin.
	Match []WasmPluginSpecMatchPatch `pulumi:"match"`
	// Determines where in the filter chain this `WasmPlugin` is to be injected.
	//
	// Valid Options: AUTHN, AUTHZ, STATS
	Phase *string `pulumi:"phase"`
	// The configuration that will be passed on to the plugin.
	PluginConfig map[string]interface{} `pulumi:"pluginConfig"`
	// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
	PluginName *string `pulumi:"pluginName"`
	// Determines ordering of `WasmPlugins` in the same `phase`.
	Priority *int                         `pulumi:"priority"`
	Selector *WasmPluginSpecSelectorPatch `pulumi:"selector"`
	// SHA256 checksum that will be used to verify Wasm module or OCI container.
	Sha256    *string                       `pulumi:"sha256"`
	TargetRef *WasmPluginSpecTargetRefPatch `pulumi:"targetRef"`
	// Optional.
	TargetRefs []WasmPluginSpecTargetRefsPatch `pulumi:"targetRefs"`
	// Specifies the type of Wasm Extension to be used.
	//
	// Valid Options: HTTP, NETWORK
	Type *string `pulumi:"type"`
	// URL of a Wasm module or OCI container.
	Url             *string                      `pulumi:"url"`
	VerificationKey *string                      `pulumi:"verificationKey"`
	VmConfig        *WasmPluginSpecVmConfigPatch `pulumi:"vmConfig"`
}

// WasmPluginSpecPatchInput is an input type that accepts WasmPluginSpecPatchArgs and WasmPluginSpecPatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecPatchInput` via:
//
//	WasmPluginSpecPatchArgs{...}
type WasmPluginSpecPatchInput interface {
	pulumi.Input

	ToWasmPluginSpecPatchOutput() WasmPluginSpecPatchOutput
	ToWasmPluginSpecPatchOutputWithContext(context.Context) WasmPluginSpecPatchOutput
}

// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
type WasmPluginSpecPatchArgs struct {
	// Specifies the failure behavior for the plugin due to fatal errors.
	//
	// Valid Options: FAIL_CLOSE, FAIL_OPEN
	FailStrategy pulumi.StringPtrInput `pulumi:"failStrategy"`
	// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
	//
	// Valid Options: IfNotPresent, Always
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Credentials to use for OCI image pulling.
	ImagePullSecret pulumi.StringPtrInput `pulumi:"imagePullSecret"`
	// Specifies the criteria to determine which traffic is passed to WasmPlugin.
	Match WasmPluginSpecMatchPatchArrayInput `pulumi:"match"`
	// Determines where in the filter chain this `WasmPlugin` is to be injected.
	//
	// Valid Options: AUTHN, AUTHZ, STATS
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// The configuration that will be passed on to the plugin.
	PluginConfig pulumi.MapInput `pulumi:"pluginConfig"`
	// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// Determines ordering of `WasmPlugins` in the same `phase`.
	Priority pulumi.IntPtrInput                  `pulumi:"priority"`
	Selector WasmPluginSpecSelectorPatchPtrInput `pulumi:"selector"`
	// SHA256 checksum that will be used to verify Wasm module or OCI container.
	Sha256    pulumi.StringPtrInput                `pulumi:"sha256"`
	TargetRef WasmPluginSpecTargetRefPatchPtrInput `pulumi:"targetRef"`
	// Optional.
	TargetRefs WasmPluginSpecTargetRefsPatchArrayInput `pulumi:"targetRefs"`
	// Specifies the type of Wasm Extension to be used.
	//
	// Valid Options: HTTP, NETWORK
	Type pulumi.StringPtrInput `pulumi:"type"`
	// URL of a Wasm module or OCI container.
	Url             pulumi.StringPtrInput               `pulumi:"url"`
	VerificationKey pulumi.StringPtrInput               `pulumi:"verificationKey"`
	VmConfig        WasmPluginSpecVmConfigPatchPtrInput `pulumi:"vmConfig"`
}

func (WasmPluginSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecPatch)(nil)).Elem()
}

func (i WasmPluginSpecPatchArgs) ToWasmPluginSpecPatchOutput() WasmPluginSpecPatchOutput {
	return i.ToWasmPluginSpecPatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecPatchArgs) ToWasmPluginSpecPatchOutputWithContext(ctx context.Context) WasmPluginSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecPatchOutput)
}

func (i WasmPluginSpecPatchArgs) ToWasmPluginSpecPatchPtrOutput() WasmPluginSpecPatchPtrOutput {
	return i.ToWasmPluginSpecPatchPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecPatchArgs) ToWasmPluginSpecPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecPatchOutput).ToWasmPluginSpecPatchPtrOutputWithContext(ctx)
}

// WasmPluginSpecPatchPtrInput is an input type that accepts WasmPluginSpecPatchArgs, WasmPluginSpecPatchPtr and WasmPluginSpecPatchPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecPatchPtrInput` via:
//
//	        WasmPluginSpecPatchArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecPatchPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecPatchPtrOutput() WasmPluginSpecPatchPtrOutput
	ToWasmPluginSpecPatchPtrOutputWithContext(context.Context) WasmPluginSpecPatchPtrOutput
}

type wasmPluginSpecPatchPtrType WasmPluginSpecPatchArgs

func WasmPluginSpecPatchPtr(v *WasmPluginSpecPatchArgs) WasmPluginSpecPatchPtrInput {
	return (*wasmPluginSpecPatchPtrType)(v)
}

func (*wasmPluginSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecPatch)(nil)).Elem()
}

func (i *wasmPluginSpecPatchPtrType) ToWasmPluginSpecPatchPtrOutput() WasmPluginSpecPatchPtrOutput {
	return i.ToWasmPluginSpecPatchPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecPatchPtrType) ToWasmPluginSpecPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecPatchPtrOutput)
}

// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
type WasmPluginSpecPatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecPatch)(nil)).Elem()
}

func (o WasmPluginSpecPatchOutput) ToWasmPluginSpecPatchOutput() WasmPluginSpecPatchOutput {
	return o
}

func (o WasmPluginSpecPatchOutput) ToWasmPluginSpecPatchOutputWithContext(ctx context.Context) WasmPluginSpecPatchOutput {
	return o
}

func (o WasmPluginSpecPatchOutput) ToWasmPluginSpecPatchPtrOutput() WasmPluginSpecPatchPtrOutput {
	return o.ToWasmPluginSpecPatchPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecPatchOutput) ToWasmPluginSpecPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecPatch) *WasmPluginSpecPatch {
		return &v
	}).(WasmPluginSpecPatchPtrOutput)
}

// Specifies the failure behavior for the plugin due to fatal errors.
//
// Valid Options: FAIL_CLOSE, FAIL_OPEN
func (o WasmPluginSpecPatchOutput) FailStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *string { return v.FailStrategy }).(pulumi.StringPtrOutput)
}

// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
//
// Valid Options: IfNotPresent, Always
func (o WasmPluginSpecPatchOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Credentials to use for OCI image pulling.
func (o WasmPluginSpecPatchOutput) ImagePullSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *string { return v.ImagePullSecret }).(pulumi.StringPtrOutput)
}

// Specifies the criteria to determine which traffic is passed to WasmPlugin.
func (o WasmPluginSpecPatchOutput) Match() WasmPluginSpecMatchPatchArrayOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) []WasmPluginSpecMatchPatch { return v.Match }).(WasmPluginSpecMatchPatchArrayOutput)
}

// Determines where in the filter chain this `WasmPlugin` is to be injected.
//
// Valid Options: AUTHN, AUTHZ, STATS
func (o WasmPluginSpecPatchOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// The configuration that will be passed on to the plugin.
func (o WasmPluginSpecPatchOutput) PluginConfig() pulumi.MapOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) map[string]interface{} { return v.PluginConfig }).(pulumi.MapOutput)
}

// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
func (o WasmPluginSpecPatchOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// Determines ordering of `WasmPlugins` in the same `phase`.
func (o WasmPluginSpecPatchOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o WasmPluginSpecPatchOutput) Selector() WasmPluginSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *WasmPluginSpecSelectorPatch { return v.Selector }).(WasmPluginSpecSelectorPatchPtrOutput)
}

// SHA256 checksum that will be used to verify Wasm module or OCI container.
func (o WasmPluginSpecPatchOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPatchOutput) TargetRef() WasmPluginSpecTargetRefPatchPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *WasmPluginSpecTargetRefPatch { return v.TargetRef }).(WasmPluginSpecTargetRefPatchPtrOutput)
}

// Optional.
func (o WasmPluginSpecPatchOutput) TargetRefs() WasmPluginSpecTargetRefsPatchArrayOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) []WasmPluginSpecTargetRefsPatch { return v.TargetRefs }).(WasmPluginSpecTargetRefsPatchArrayOutput)
}

// Specifies the type of Wasm Extension to be used.
//
// Valid Options: HTTP, NETWORK
func (o WasmPluginSpecPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// URL of a Wasm module or OCI container.
func (o WasmPluginSpecPatchOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *string { return v.Url }).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPatchOutput) VerificationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *string { return v.VerificationKey }).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPatchOutput) VmConfig() WasmPluginSpecVmConfigPatchPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecPatch) *WasmPluginSpecVmConfigPatch { return v.VmConfig }).(WasmPluginSpecVmConfigPatchPtrOutput)
}

type WasmPluginSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecPatch)(nil)).Elem()
}

func (o WasmPluginSpecPatchPtrOutput) ToWasmPluginSpecPatchPtrOutput() WasmPluginSpecPatchPtrOutput {
	return o
}

func (o WasmPluginSpecPatchPtrOutput) ToWasmPluginSpecPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecPatchPtrOutput {
	return o
}

func (o WasmPluginSpecPatchPtrOutput) Elem() WasmPluginSpecPatchOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) WasmPluginSpecPatch {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecPatch
		return ret
	}).(WasmPluginSpecPatchOutput)
}

// Specifies the failure behavior for the plugin due to fatal errors.
//
// Valid Options: FAIL_CLOSE, FAIL_OPEN
func (o WasmPluginSpecPatchPtrOutput) FailStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.FailStrategy
	}).(pulumi.StringPtrOutput)
}

// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
//
// Valid Options: IfNotPresent, Always
func (o WasmPluginSpecPatchPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Credentials to use for OCI image pulling.
func (o WasmPluginSpecPatchPtrOutput) ImagePullSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullSecret
	}).(pulumi.StringPtrOutput)
}

// Specifies the criteria to determine which traffic is passed to WasmPlugin.
func (o WasmPluginSpecPatchPtrOutput) Match() WasmPluginSpecMatchPatchArrayOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) []WasmPluginSpecMatchPatch {
		if v == nil {
			return nil
		}
		return v.Match
	}).(WasmPluginSpecMatchPatchArrayOutput)
}

// Determines where in the filter chain this `WasmPlugin` is to be injected.
//
// Valid Options: AUTHN, AUTHZ, STATS
func (o WasmPluginSpecPatchPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// The configuration that will be passed on to the plugin.
func (o WasmPluginSpecPatchPtrOutput) PluginConfig() pulumi.MapOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PluginConfig
	}).(pulumi.MapOutput)
}

// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
func (o WasmPluginSpecPatchPtrOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PluginName
	}).(pulumi.StringPtrOutput)
}

// Determines ordering of `WasmPlugins` in the same `phase`.
func (o WasmPluginSpecPatchPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

func (o WasmPluginSpecPatchPtrOutput) Selector() WasmPluginSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *WasmPluginSpecSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(WasmPluginSpecSelectorPatchPtrOutput)
}

// SHA256 checksum that will be used to verify Wasm module or OCI container.
func (o WasmPluginSpecPatchPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPatchPtrOutput) TargetRef() WasmPluginSpecTargetRefPatchPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *WasmPluginSpecTargetRefPatch {
		if v == nil {
			return nil
		}
		return v.TargetRef
	}).(WasmPluginSpecTargetRefPatchPtrOutput)
}

// Optional.
func (o WasmPluginSpecPatchPtrOutput) TargetRefs() WasmPluginSpecTargetRefsPatchArrayOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) []WasmPluginSpecTargetRefsPatch {
		if v == nil {
			return nil
		}
		return v.TargetRefs
	}).(WasmPluginSpecTargetRefsPatchArrayOutput)
}

// Specifies the type of Wasm Extension to be used.
//
// Valid Options: HTTP, NETWORK
func (o WasmPluginSpecPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// URL of a Wasm module or OCI container.
func (o WasmPluginSpecPatchPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPatchPtrOutput) VerificationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VerificationKey
	}).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPatchPtrOutput) VmConfig() WasmPluginSpecVmConfigPatchPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecPatch) *WasmPluginSpecVmConfigPatch {
		if v == nil {
			return nil
		}
		return v.VmConfig
	}).(WasmPluginSpecVmConfigPatchPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
type WasmPluginSpecSelector struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// WasmPluginSpecSelectorInput is an input type that accepts WasmPluginSpecSelectorArgs and WasmPluginSpecSelectorOutput values.
// You can construct a concrete instance of `WasmPluginSpecSelectorInput` via:
//
//	WasmPluginSpecSelectorArgs{...}
type WasmPluginSpecSelectorInput interface {
	pulumi.Input

	ToWasmPluginSpecSelectorOutput() WasmPluginSpecSelectorOutput
	ToWasmPluginSpecSelectorOutputWithContext(context.Context) WasmPluginSpecSelectorOutput
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
type WasmPluginSpecSelectorArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (WasmPluginSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecSelector)(nil)).Elem()
}

func (i WasmPluginSpecSelectorArgs) ToWasmPluginSpecSelectorOutput() WasmPluginSpecSelectorOutput {
	return i.ToWasmPluginSpecSelectorOutputWithContext(context.Background())
}

func (i WasmPluginSpecSelectorArgs) ToWasmPluginSpecSelectorOutputWithContext(ctx context.Context) WasmPluginSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecSelectorOutput)
}

func (i WasmPluginSpecSelectorArgs) ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput {
	return i.ToWasmPluginSpecSelectorPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecSelectorArgs) ToWasmPluginSpecSelectorPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecSelectorOutput).ToWasmPluginSpecSelectorPtrOutputWithContext(ctx)
}

// WasmPluginSpecSelectorPtrInput is an input type that accepts WasmPluginSpecSelectorArgs, WasmPluginSpecSelectorPtr and WasmPluginSpecSelectorPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecSelectorPtrInput` via:
//
//	        WasmPluginSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecSelectorPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput
	ToWasmPluginSpecSelectorPtrOutputWithContext(context.Context) WasmPluginSpecSelectorPtrOutput
}

type wasmPluginSpecSelectorPtrType WasmPluginSpecSelectorArgs

func WasmPluginSpecSelectorPtr(v *WasmPluginSpecSelectorArgs) WasmPluginSpecSelectorPtrInput {
	return (*wasmPluginSpecSelectorPtrType)(v)
}

func (*wasmPluginSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecSelector)(nil)).Elem()
}

func (i *wasmPluginSpecSelectorPtrType) ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput {
	return i.ToWasmPluginSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecSelectorPtrType) ToWasmPluginSpecSelectorPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecSelectorPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
type WasmPluginSpecSelectorOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecSelector)(nil)).Elem()
}

func (o WasmPluginSpecSelectorOutput) ToWasmPluginSpecSelectorOutput() WasmPluginSpecSelectorOutput {
	return o
}

func (o WasmPluginSpecSelectorOutput) ToWasmPluginSpecSelectorOutputWithContext(ctx context.Context) WasmPluginSpecSelectorOutput {
	return o
}

func (o WasmPluginSpecSelectorOutput) ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput {
	return o.ToWasmPluginSpecSelectorPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecSelectorOutput) ToWasmPluginSpecSelectorPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecSelector) *WasmPluginSpecSelector {
		return &v
	}).(WasmPluginSpecSelectorPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o WasmPluginSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v WasmPluginSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type WasmPluginSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecSelector)(nil)).Elem()
}

func (o WasmPluginSpecSelectorPtrOutput) ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput {
	return o
}

func (o WasmPluginSpecSelectorPtrOutput) ToWasmPluginSpecSelectorPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPtrOutput {
	return o
}

func (o WasmPluginSpecSelectorPtrOutput) Elem() WasmPluginSpecSelectorOutput {
	return o.ApplyT(func(v *WasmPluginSpecSelector) WasmPluginSpecSelector {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecSelector
		return ret
	}).(WasmPluginSpecSelectorOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o WasmPluginSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WasmPluginSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
type WasmPluginSpecSelectorPatch struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// WasmPluginSpecSelectorPatchInput is an input type that accepts WasmPluginSpecSelectorPatchArgs and WasmPluginSpecSelectorPatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecSelectorPatchInput` via:
//
//	WasmPluginSpecSelectorPatchArgs{...}
type WasmPluginSpecSelectorPatchInput interface {
	pulumi.Input

	ToWasmPluginSpecSelectorPatchOutput() WasmPluginSpecSelectorPatchOutput
	ToWasmPluginSpecSelectorPatchOutputWithContext(context.Context) WasmPluginSpecSelectorPatchOutput
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
type WasmPluginSpecSelectorPatchArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (WasmPluginSpecSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecSelectorPatch)(nil)).Elem()
}

func (i WasmPluginSpecSelectorPatchArgs) ToWasmPluginSpecSelectorPatchOutput() WasmPluginSpecSelectorPatchOutput {
	return i.ToWasmPluginSpecSelectorPatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecSelectorPatchArgs) ToWasmPluginSpecSelectorPatchOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecSelectorPatchOutput)
}

func (i WasmPluginSpecSelectorPatchArgs) ToWasmPluginSpecSelectorPatchPtrOutput() WasmPluginSpecSelectorPatchPtrOutput {
	return i.ToWasmPluginSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecSelectorPatchArgs) ToWasmPluginSpecSelectorPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecSelectorPatchOutput).ToWasmPluginSpecSelectorPatchPtrOutputWithContext(ctx)
}

// WasmPluginSpecSelectorPatchPtrInput is an input type that accepts WasmPluginSpecSelectorPatchArgs, WasmPluginSpecSelectorPatchPtr and WasmPluginSpecSelectorPatchPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecSelectorPatchPtrInput` via:
//
//	        WasmPluginSpecSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecSelectorPatchPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecSelectorPatchPtrOutput() WasmPluginSpecSelectorPatchPtrOutput
	ToWasmPluginSpecSelectorPatchPtrOutputWithContext(context.Context) WasmPluginSpecSelectorPatchPtrOutput
}

type wasmPluginSpecSelectorPatchPtrType WasmPluginSpecSelectorPatchArgs

func WasmPluginSpecSelectorPatchPtr(v *WasmPluginSpecSelectorPatchArgs) WasmPluginSpecSelectorPatchPtrInput {
	return (*wasmPluginSpecSelectorPatchPtrType)(v)
}

func (*wasmPluginSpecSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecSelectorPatch)(nil)).Elem()
}

func (i *wasmPluginSpecSelectorPatchPtrType) ToWasmPluginSpecSelectorPatchPtrOutput() WasmPluginSpecSelectorPatchPtrOutput {
	return i.ToWasmPluginSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecSelectorPatchPtrType) ToWasmPluginSpecSelectorPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecSelectorPatchPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
type WasmPluginSpecSelectorPatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecSelectorPatch)(nil)).Elem()
}

func (o WasmPluginSpecSelectorPatchOutput) ToWasmPluginSpecSelectorPatchOutput() WasmPluginSpecSelectorPatchOutput {
	return o
}

func (o WasmPluginSpecSelectorPatchOutput) ToWasmPluginSpecSelectorPatchOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPatchOutput {
	return o
}

func (o WasmPluginSpecSelectorPatchOutput) ToWasmPluginSpecSelectorPatchPtrOutput() WasmPluginSpecSelectorPatchPtrOutput {
	return o.ToWasmPluginSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecSelectorPatchOutput) ToWasmPluginSpecSelectorPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecSelectorPatch) *WasmPluginSpecSelectorPatch {
		return &v
	}).(WasmPluginSpecSelectorPatchPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o WasmPluginSpecSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v WasmPluginSpecSelectorPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type WasmPluginSpecSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecSelectorPatch)(nil)).Elem()
}

func (o WasmPluginSpecSelectorPatchPtrOutput) ToWasmPluginSpecSelectorPatchPtrOutput() WasmPluginSpecSelectorPatchPtrOutput {
	return o
}

func (o WasmPluginSpecSelectorPatchPtrOutput) ToWasmPluginSpecSelectorPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPatchPtrOutput {
	return o
}

func (o WasmPluginSpecSelectorPatchPtrOutput) Elem() WasmPluginSpecSelectorPatchOutput {
	return o.ApplyT(func(v *WasmPluginSpecSelectorPatch) WasmPluginSpecSelectorPatch {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecSelectorPatch
		return ret
	}).(WasmPluginSpecSelectorPatchOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o WasmPluginSpecSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WasmPluginSpecSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type WasmPluginSpecTargetRef struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// WasmPluginSpecTargetRefInput is an input type that accepts WasmPluginSpecTargetRefArgs and WasmPluginSpecTargetRefOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefInput` via:
//
//	WasmPluginSpecTargetRefArgs{...}
type WasmPluginSpecTargetRefInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefOutput() WasmPluginSpecTargetRefOutput
	ToWasmPluginSpecTargetRefOutputWithContext(context.Context) WasmPluginSpecTargetRefOutput
}

type WasmPluginSpecTargetRefArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (WasmPluginSpecTargetRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRef)(nil)).Elem()
}

func (i WasmPluginSpecTargetRefArgs) ToWasmPluginSpecTargetRefOutput() WasmPluginSpecTargetRefOutput {
	return i.ToWasmPluginSpecTargetRefOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefArgs) ToWasmPluginSpecTargetRefOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefOutput)
}

func (i WasmPluginSpecTargetRefArgs) ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput {
	return i.ToWasmPluginSpecTargetRefPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefArgs) ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefOutput).ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx)
}

// WasmPluginSpecTargetRefPtrInput is an input type that accepts WasmPluginSpecTargetRefArgs, WasmPluginSpecTargetRefPtr and WasmPluginSpecTargetRefPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefPtrInput` via:
//
//	        WasmPluginSpecTargetRefArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecTargetRefPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput
	ToWasmPluginSpecTargetRefPtrOutputWithContext(context.Context) WasmPluginSpecTargetRefPtrOutput
}

type wasmPluginSpecTargetRefPtrType WasmPluginSpecTargetRefArgs

func WasmPluginSpecTargetRefPtr(v *WasmPluginSpecTargetRefArgs) WasmPluginSpecTargetRefPtrInput {
	return (*wasmPluginSpecTargetRefPtrType)(v)
}

func (*wasmPluginSpecTargetRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecTargetRef)(nil)).Elem()
}

func (i *wasmPluginSpecTargetRefPtrType) ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput {
	return i.ToWasmPluginSpecTargetRefPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecTargetRefPtrType) ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefPtrOutput)
}

type WasmPluginSpecTargetRefOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRef)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefOutput) ToWasmPluginSpecTargetRefOutput() WasmPluginSpecTargetRefOutput {
	return o
}

func (o WasmPluginSpecTargetRefOutput) ToWasmPluginSpecTargetRefOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefOutput {
	return o
}

func (o WasmPluginSpecTargetRefOutput) ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput {
	return o.ToWasmPluginSpecTargetRefPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecTargetRefOutput) ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecTargetRef) *WasmPluginSpecTargetRef {
		return &v
	}).(WasmPluginSpecTargetRefPtrOutput)
}

// group is the group of the target resource.
func (o WasmPluginSpecTargetRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o WasmPluginSpecTargetRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o WasmPluginSpecTargetRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o WasmPluginSpecTargetRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type WasmPluginSpecTargetRefPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecTargetRef)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefPtrOutput) ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput {
	return o
}

func (o WasmPluginSpecTargetRefPtrOutput) ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPtrOutput {
	return o
}

func (o WasmPluginSpecTargetRefPtrOutput) Elem() WasmPluginSpecTargetRefOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) WasmPluginSpecTargetRef {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecTargetRef
		return ret
	}).(WasmPluginSpecTargetRefOutput)
}

// group is the group of the target resource.
func (o WasmPluginSpecTargetRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o WasmPluginSpecTargetRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o WasmPluginSpecTargetRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o WasmPluginSpecTargetRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type WasmPluginSpecTargetRefPatch struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// WasmPluginSpecTargetRefPatchInput is an input type that accepts WasmPluginSpecTargetRefPatchArgs and WasmPluginSpecTargetRefPatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefPatchInput` via:
//
//	WasmPluginSpecTargetRefPatchArgs{...}
type WasmPluginSpecTargetRefPatchInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefPatchOutput() WasmPluginSpecTargetRefPatchOutput
	ToWasmPluginSpecTargetRefPatchOutputWithContext(context.Context) WasmPluginSpecTargetRefPatchOutput
}

type WasmPluginSpecTargetRefPatchArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (WasmPluginSpecTargetRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRefPatch)(nil)).Elem()
}

func (i WasmPluginSpecTargetRefPatchArgs) ToWasmPluginSpecTargetRefPatchOutput() WasmPluginSpecTargetRefPatchOutput {
	return i.ToWasmPluginSpecTargetRefPatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefPatchArgs) ToWasmPluginSpecTargetRefPatchOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefPatchOutput)
}

func (i WasmPluginSpecTargetRefPatchArgs) ToWasmPluginSpecTargetRefPatchPtrOutput() WasmPluginSpecTargetRefPatchPtrOutput {
	return i.ToWasmPluginSpecTargetRefPatchPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefPatchArgs) ToWasmPluginSpecTargetRefPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefPatchOutput).ToWasmPluginSpecTargetRefPatchPtrOutputWithContext(ctx)
}

// WasmPluginSpecTargetRefPatchPtrInput is an input type that accepts WasmPluginSpecTargetRefPatchArgs, WasmPluginSpecTargetRefPatchPtr and WasmPluginSpecTargetRefPatchPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefPatchPtrInput` via:
//
//	        WasmPluginSpecTargetRefPatchArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecTargetRefPatchPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefPatchPtrOutput() WasmPluginSpecTargetRefPatchPtrOutput
	ToWasmPluginSpecTargetRefPatchPtrOutputWithContext(context.Context) WasmPluginSpecTargetRefPatchPtrOutput
}

type wasmPluginSpecTargetRefPatchPtrType WasmPluginSpecTargetRefPatchArgs

func WasmPluginSpecTargetRefPatchPtr(v *WasmPluginSpecTargetRefPatchArgs) WasmPluginSpecTargetRefPatchPtrInput {
	return (*wasmPluginSpecTargetRefPatchPtrType)(v)
}

func (*wasmPluginSpecTargetRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecTargetRefPatch)(nil)).Elem()
}

func (i *wasmPluginSpecTargetRefPatchPtrType) ToWasmPluginSpecTargetRefPatchPtrOutput() WasmPluginSpecTargetRefPatchPtrOutput {
	return i.ToWasmPluginSpecTargetRefPatchPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecTargetRefPatchPtrType) ToWasmPluginSpecTargetRefPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefPatchPtrOutput)
}

type WasmPluginSpecTargetRefPatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRefPatch)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefPatchOutput) ToWasmPluginSpecTargetRefPatchOutput() WasmPluginSpecTargetRefPatchOutput {
	return o
}

func (o WasmPluginSpecTargetRefPatchOutput) ToWasmPluginSpecTargetRefPatchOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPatchOutput {
	return o
}

func (o WasmPluginSpecTargetRefPatchOutput) ToWasmPluginSpecTargetRefPatchPtrOutput() WasmPluginSpecTargetRefPatchPtrOutput {
	return o.ToWasmPluginSpecTargetRefPatchPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecTargetRefPatchOutput) ToWasmPluginSpecTargetRefPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecTargetRefPatch) *WasmPluginSpecTargetRefPatch {
		return &v
	}).(WasmPluginSpecTargetRefPatchPtrOutput)
}

// group is the group of the target resource.
func (o WasmPluginSpecTargetRefPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o WasmPluginSpecTargetRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o WasmPluginSpecTargetRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o WasmPluginSpecTargetRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type WasmPluginSpecTargetRefPatchPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecTargetRefPatch)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefPatchPtrOutput) ToWasmPluginSpecTargetRefPatchPtrOutput() WasmPluginSpecTargetRefPatchPtrOutput {
	return o
}

func (o WasmPluginSpecTargetRefPatchPtrOutput) ToWasmPluginSpecTargetRefPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPatchPtrOutput {
	return o
}

func (o WasmPluginSpecTargetRefPatchPtrOutput) Elem() WasmPluginSpecTargetRefPatchOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRefPatch) WasmPluginSpecTargetRefPatch {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecTargetRefPatch
		return ret
	}).(WasmPluginSpecTargetRefPatchOutput)
}

// group is the group of the target resource.
func (o WasmPluginSpecTargetRefPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o WasmPluginSpecTargetRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o WasmPluginSpecTargetRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o WasmPluginSpecTargetRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type WasmPluginSpecTargetRefs struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// WasmPluginSpecTargetRefsInput is an input type that accepts WasmPluginSpecTargetRefsArgs and WasmPluginSpecTargetRefsOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefsInput` via:
//
//	WasmPluginSpecTargetRefsArgs{...}
type WasmPluginSpecTargetRefsInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefsOutput() WasmPluginSpecTargetRefsOutput
	ToWasmPluginSpecTargetRefsOutputWithContext(context.Context) WasmPluginSpecTargetRefsOutput
}

type WasmPluginSpecTargetRefsArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (WasmPluginSpecTargetRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRefs)(nil)).Elem()
}

func (i WasmPluginSpecTargetRefsArgs) ToWasmPluginSpecTargetRefsOutput() WasmPluginSpecTargetRefsOutput {
	return i.ToWasmPluginSpecTargetRefsOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefsArgs) ToWasmPluginSpecTargetRefsOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefsOutput)
}

// WasmPluginSpecTargetRefsArrayInput is an input type that accepts WasmPluginSpecTargetRefsArray and WasmPluginSpecTargetRefsArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefsArrayInput` via:
//
//	WasmPluginSpecTargetRefsArray{ WasmPluginSpecTargetRefsArgs{...} }
type WasmPluginSpecTargetRefsArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefsArrayOutput() WasmPluginSpecTargetRefsArrayOutput
	ToWasmPluginSpecTargetRefsArrayOutputWithContext(context.Context) WasmPluginSpecTargetRefsArrayOutput
}

type WasmPluginSpecTargetRefsArray []WasmPluginSpecTargetRefsInput

func (WasmPluginSpecTargetRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecTargetRefs)(nil)).Elem()
}

func (i WasmPluginSpecTargetRefsArray) ToWasmPluginSpecTargetRefsArrayOutput() WasmPluginSpecTargetRefsArrayOutput {
	return i.ToWasmPluginSpecTargetRefsArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefsArray) ToWasmPluginSpecTargetRefsArrayOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefsArrayOutput)
}

type WasmPluginSpecTargetRefsOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRefs)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefsOutput) ToWasmPluginSpecTargetRefsOutput() WasmPluginSpecTargetRefsOutput {
	return o
}

func (o WasmPluginSpecTargetRefsOutput) ToWasmPluginSpecTargetRefsOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsOutput {
	return o
}

// group is the group of the target resource.
func (o WasmPluginSpecTargetRefsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o WasmPluginSpecTargetRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o WasmPluginSpecTargetRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o WasmPluginSpecTargetRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type WasmPluginSpecTargetRefsArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecTargetRefs)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefsArrayOutput) ToWasmPluginSpecTargetRefsArrayOutput() WasmPluginSpecTargetRefsArrayOutput {
	return o
}

func (o WasmPluginSpecTargetRefsArrayOutput) ToWasmPluginSpecTargetRefsArrayOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsArrayOutput {
	return o
}

func (o WasmPluginSpecTargetRefsArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecTargetRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecTargetRefs {
		return vs[0].([]WasmPluginSpecTargetRefs)[vs[1].(int)]
	}).(WasmPluginSpecTargetRefsOutput)
}

type WasmPluginSpecTargetRefsPatch struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// WasmPluginSpecTargetRefsPatchInput is an input type that accepts WasmPluginSpecTargetRefsPatchArgs and WasmPluginSpecTargetRefsPatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefsPatchInput` via:
//
//	WasmPluginSpecTargetRefsPatchArgs{...}
type WasmPluginSpecTargetRefsPatchInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefsPatchOutput() WasmPluginSpecTargetRefsPatchOutput
	ToWasmPluginSpecTargetRefsPatchOutputWithContext(context.Context) WasmPluginSpecTargetRefsPatchOutput
}

type WasmPluginSpecTargetRefsPatchArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (WasmPluginSpecTargetRefsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRefsPatch)(nil)).Elem()
}

func (i WasmPluginSpecTargetRefsPatchArgs) ToWasmPluginSpecTargetRefsPatchOutput() WasmPluginSpecTargetRefsPatchOutput {
	return i.ToWasmPluginSpecTargetRefsPatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefsPatchArgs) ToWasmPluginSpecTargetRefsPatchOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefsPatchOutput)
}

// WasmPluginSpecTargetRefsPatchArrayInput is an input type that accepts WasmPluginSpecTargetRefsPatchArray and WasmPluginSpecTargetRefsPatchArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefsPatchArrayInput` via:
//
//	WasmPluginSpecTargetRefsPatchArray{ WasmPluginSpecTargetRefsPatchArgs{...} }
type WasmPluginSpecTargetRefsPatchArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefsPatchArrayOutput() WasmPluginSpecTargetRefsPatchArrayOutput
	ToWasmPluginSpecTargetRefsPatchArrayOutputWithContext(context.Context) WasmPluginSpecTargetRefsPatchArrayOutput
}

type WasmPluginSpecTargetRefsPatchArray []WasmPluginSpecTargetRefsPatchInput

func (WasmPluginSpecTargetRefsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecTargetRefsPatch)(nil)).Elem()
}

func (i WasmPluginSpecTargetRefsPatchArray) ToWasmPluginSpecTargetRefsPatchArrayOutput() WasmPluginSpecTargetRefsPatchArrayOutput {
	return i.ToWasmPluginSpecTargetRefsPatchArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefsPatchArray) ToWasmPluginSpecTargetRefsPatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefsPatchArrayOutput)
}

type WasmPluginSpecTargetRefsPatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRefsPatch)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefsPatchOutput) ToWasmPluginSpecTargetRefsPatchOutput() WasmPluginSpecTargetRefsPatchOutput {
	return o
}

func (o WasmPluginSpecTargetRefsPatchOutput) ToWasmPluginSpecTargetRefsPatchOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsPatchOutput {
	return o
}

// group is the group of the target resource.
func (o WasmPluginSpecTargetRefsPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefsPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o WasmPluginSpecTargetRefsPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefsPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o WasmPluginSpecTargetRefsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o WasmPluginSpecTargetRefsPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefsPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type WasmPluginSpecTargetRefsPatchArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecTargetRefsPatch)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefsPatchArrayOutput) ToWasmPluginSpecTargetRefsPatchArrayOutput() WasmPluginSpecTargetRefsPatchArrayOutput {
	return o
}

func (o WasmPluginSpecTargetRefsPatchArrayOutput) ToWasmPluginSpecTargetRefsPatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsPatchArrayOutput {
	return o
}

func (o WasmPluginSpecTargetRefsPatchArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecTargetRefsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecTargetRefsPatch {
		return vs[0].([]WasmPluginSpecTargetRefsPatch)[vs[1].(int)]
	}).(WasmPluginSpecTargetRefsPatchOutput)
}

// Configuration for a Wasm VM.
type WasmPluginSpecVmConfig struct {
	// Specifies environment variables to be injected to this VM.
	Env []WasmPluginSpecVmConfigEnv `pulumi:"env"`
}

// WasmPluginSpecVmConfigInput is an input type that accepts WasmPluginSpecVmConfigArgs and WasmPluginSpecVmConfigOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigInput` via:
//
//	WasmPluginSpecVmConfigArgs{...}
type WasmPluginSpecVmConfigInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigOutput() WasmPluginSpecVmConfigOutput
	ToWasmPluginSpecVmConfigOutputWithContext(context.Context) WasmPluginSpecVmConfigOutput
}

// Configuration for a Wasm VM.
type WasmPluginSpecVmConfigArgs struct {
	// Specifies environment variables to be injected to this VM.
	Env WasmPluginSpecVmConfigEnvArrayInput `pulumi:"env"`
}

func (WasmPluginSpecVmConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfig)(nil)).Elem()
}

func (i WasmPluginSpecVmConfigArgs) ToWasmPluginSpecVmConfigOutput() WasmPluginSpecVmConfigOutput {
	return i.ToWasmPluginSpecVmConfigOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigArgs) ToWasmPluginSpecVmConfigOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigOutput)
}

func (i WasmPluginSpecVmConfigArgs) ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput {
	return i.ToWasmPluginSpecVmConfigPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigArgs) ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigOutput).ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx)
}

// WasmPluginSpecVmConfigPtrInput is an input type that accepts WasmPluginSpecVmConfigArgs, WasmPluginSpecVmConfigPtr and WasmPluginSpecVmConfigPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigPtrInput` via:
//
//	        WasmPluginSpecVmConfigArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecVmConfigPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput
	ToWasmPluginSpecVmConfigPtrOutputWithContext(context.Context) WasmPluginSpecVmConfigPtrOutput
}

type wasmPluginSpecVmConfigPtrType WasmPluginSpecVmConfigArgs

func WasmPluginSpecVmConfigPtr(v *WasmPluginSpecVmConfigArgs) WasmPluginSpecVmConfigPtrInput {
	return (*wasmPluginSpecVmConfigPtrType)(v)
}

func (*wasmPluginSpecVmConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecVmConfig)(nil)).Elem()
}

func (i *wasmPluginSpecVmConfigPtrType) ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput {
	return i.ToWasmPluginSpecVmConfigPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecVmConfigPtrType) ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigPtrOutput)
}

// Configuration for a Wasm VM.
type WasmPluginSpecVmConfigOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfig)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigOutput) ToWasmPluginSpecVmConfigOutput() WasmPluginSpecVmConfigOutput {
	return o
}

func (o WasmPluginSpecVmConfigOutput) ToWasmPluginSpecVmConfigOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigOutput {
	return o
}

func (o WasmPluginSpecVmConfigOutput) ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput {
	return o.ToWasmPluginSpecVmConfigPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecVmConfigOutput) ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecVmConfig) *WasmPluginSpecVmConfig {
		return &v
	}).(WasmPluginSpecVmConfigPtrOutput)
}

// Specifies environment variables to be injected to this VM.
func (o WasmPluginSpecVmConfigOutput) Env() WasmPluginSpecVmConfigEnvArrayOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfig) []WasmPluginSpecVmConfigEnv { return v.Env }).(WasmPluginSpecVmConfigEnvArrayOutput)
}

type WasmPluginSpecVmConfigPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecVmConfig)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigPtrOutput) ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput {
	return o
}

func (o WasmPluginSpecVmConfigPtrOutput) ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPtrOutput {
	return o
}

func (o WasmPluginSpecVmConfigPtrOutput) Elem() WasmPluginSpecVmConfigOutput {
	return o.ApplyT(func(v *WasmPluginSpecVmConfig) WasmPluginSpecVmConfig {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecVmConfig
		return ret
	}).(WasmPluginSpecVmConfigOutput)
}

// Specifies environment variables to be injected to this VM.
func (o WasmPluginSpecVmConfigPtrOutput) Env() WasmPluginSpecVmConfigEnvArrayOutput {
	return o.ApplyT(func(v *WasmPluginSpecVmConfig) []WasmPluginSpecVmConfigEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(WasmPluginSpecVmConfigEnvArrayOutput)
}

type WasmPluginSpecVmConfigEnv struct {
	// Name of the environment variable.
	Name *string `pulumi:"name"`
	// Value for the environment variable.
	Value *string `pulumi:"value"`
	// Source for the environment variable's value.
	//
	// Valid Options: INLINE, HOST
	ValueFrom *string `pulumi:"valueFrom"`
}

// WasmPluginSpecVmConfigEnvInput is an input type that accepts WasmPluginSpecVmConfigEnvArgs and WasmPluginSpecVmConfigEnvOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigEnvInput` via:
//
//	WasmPluginSpecVmConfigEnvArgs{...}
type WasmPluginSpecVmConfigEnvInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigEnvOutput() WasmPluginSpecVmConfigEnvOutput
	ToWasmPluginSpecVmConfigEnvOutputWithContext(context.Context) WasmPluginSpecVmConfigEnvOutput
}

type WasmPluginSpecVmConfigEnvArgs struct {
	// Name of the environment variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value for the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value.
	//
	// Valid Options: INLINE, HOST
	ValueFrom pulumi.StringPtrInput `pulumi:"valueFrom"`
}

func (WasmPluginSpecVmConfigEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfigEnv)(nil)).Elem()
}

func (i WasmPluginSpecVmConfigEnvArgs) ToWasmPluginSpecVmConfigEnvOutput() WasmPluginSpecVmConfigEnvOutput {
	return i.ToWasmPluginSpecVmConfigEnvOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigEnvArgs) ToWasmPluginSpecVmConfigEnvOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigEnvOutput)
}

// WasmPluginSpecVmConfigEnvArrayInput is an input type that accepts WasmPluginSpecVmConfigEnvArray and WasmPluginSpecVmConfigEnvArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigEnvArrayInput` via:
//
//	WasmPluginSpecVmConfigEnvArray{ WasmPluginSpecVmConfigEnvArgs{...} }
type WasmPluginSpecVmConfigEnvArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigEnvArrayOutput() WasmPluginSpecVmConfigEnvArrayOutput
	ToWasmPluginSpecVmConfigEnvArrayOutputWithContext(context.Context) WasmPluginSpecVmConfigEnvArrayOutput
}

type WasmPluginSpecVmConfigEnvArray []WasmPluginSpecVmConfigEnvInput

func (WasmPluginSpecVmConfigEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecVmConfigEnv)(nil)).Elem()
}

func (i WasmPluginSpecVmConfigEnvArray) ToWasmPluginSpecVmConfigEnvArrayOutput() WasmPluginSpecVmConfigEnvArrayOutput {
	return i.ToWasmPluginSpecVmConfigEnvArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigEnvArray) ToWasmPluginSpecVmConfigEnvArrayOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigEnvArrayOutput)
}

type WasmPluginSpecVmConfigEnvOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfigEnv)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigEnvOutput) ToWasmPluginSpecVmConfigEnvOutput() WasmPluginSpecVmConfigEnvOutput {
	return o
}

func (o WasmPluginSpecVmConfigEnvOutput) ToWasmPluginSpecVmConfigEnvOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvOutput {
	return o
}

// Name of the environment variable.
func (o WasmPluginSpecVmConfigEnvOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigEnv) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value for the environment variable.
func (o WasmPluginSpecVmConfigEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value.
//
// Valid Options: INLINE, HOST
func (o WasmPluginSpecVmConfigEnvOutput) ValueFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigEnv) *string { return v.ValueFrom }).(pulumi.StringPtrOutput)
}

type WasmPluginSpecVmConfigEnvArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecVmConfigEnv)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigEnvArrayOutput) ToWasmPluginSpecVmConfigEnvArrayOutput() WasmPluginSpecVmConfigEnvArrayOutput {
	return o
}

func (o WasmPluginSpecVmConfigEnvArrayOutput) ToWasmPluginSpecVmConfigEnvArrayOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvArrayOutput {
	return o
}

func (o WasmPluginSpecVmConfigEnvArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecVmConfigEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecVmConfigEnv {
		return vs[0].([]WasmPluginSpecVmConfigEnv)[vs[1].(int)]
	}).(WasmPluginSpecVmConfigEnvOutput)
}

type WasmPluginSpecVmConfigEnvPatch struct {
	// Name of the environment variable.
	Name *string `pulumi:"name"`
	// Value for the environment variable.
	Value *string `pulumi:"value"`
	// Source for the environment variable's value.
	//
	// Valid Options: INLINE, HOST
	ValueFrom *string `pulumi:"valueFrom"`
}

// WasmPluginSpecVmConfigEnvPatchInput is an input type that accepts WasmPluginSpecVmConfigEnvPatchArgs and WasmPluginSpecVmConfigEnvPatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigEnvPatchInput` via:
//
//	WasmPluginSpecVmConfigEnvPatchArgs{...}
type WasmPluginSpecVmConfigEnvPatchInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigEnvPatchOutput() WasmPluginSpecVmConfigEnvPatchOutput
	ToWasmPluginSpecVmConfigEnvPatchOutputWithContext(context.Context) WasmPluginSpecVmConfigEnvPatchOutput
}

type WasmPluginSpecVmConfigEnvPatchArgs struct {
	// Name of the environment variable.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value for the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value.
	//
	// Valid Options: INLINE, HOST
	ValueFrom pulumi.StringPtrInput `pulumi:"valueFrom"`
}

func (WasmPluginSpecVmConfigEnvPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfigEnvPatch)(nil)).Elem()
}

func (i WasmPluginSpecVmConfigEnvPatchArgs) ToWasmPluginSpecVmConfigEnvPatchOutput() WasmPluginSpecVmConfigEnvPatchOutput {
	return i.ToWasmPluginSpecVmConfigEnvPatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigEnvPatchArgs) ToWasmPluginSpecVmConfigEnvPatchOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigEnvPatchOutput)
}

// WasmPluginSpecVmConfigEnvPatchArrayInput is an input type that accepts WasmPluginSpecVmConfigEnvPatchArray and WasmPluginSpecVmConfigEnvPatchArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigEnvPatchArrayInput` via:
//
//	WasmPluginSpecVmConfigEnvPatchArray{ WasmPluginSpecVmConfigEnvPatchArgs{...} }
type WasmPluginSpecVmConfigEnvPatchArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigEnvPatchArrayOutput() WasmPluginSpecVmConfigEnvPatchArrayOutput
	ToWasmPluginSpecVmConfigEnvPatchArrayOutputWithContext(context.Context) WasmPluginSpecVmConfigEnvPatchArrayOutput
}

type WasmPluginSpecVmConfigEnvPatchArray []WasmPluginSpecVmConfigEnvPatchInput

func (WasmPluginSpecVmConfigEnvPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecVmConfigEnvPatch)(nil)).Elem()
}

func (i WasmPluginSpecVmConfigEnvPatchArray) ToWasmPluginSpecVmConfigEnvPatchArrayOutput() WasmPluginSpecVmConfigEnvPatchArrayOutput {
	return i.ToWasmPluginSpecVmConfigEnvPatchArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigEnvPatchArray) ToWasmPluginSpecVmConfigEnvPatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigEnvPatchArrayOutput)
}

type WasmPluginSpecVmConfigEnvPatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigEnvPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfigEnvPatch)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigEnvPatchOutput) ToWasmPluginSpecVmConfigEnvPatchOutput() WasmPluginSpecVmConfigEnvPatchOutput {
	return o
}

func (o WasmPluginSpecVmConfigEnvPatchOutput) ToWasmPluginSpecVmConfigEnvPatchOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvPatchOutput {
	return o
}

// Name of the environment variable.
func (o WasmPluginSpecVmConfigEnvPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigEnvPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value for the environment variable.
func (o WasmPluginSpecVmConfigEnvPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigEnvPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value.
//
// Valid Options: INLINE, HOST
func (o WasmPluginSpecVmConfigEnvPatchOutput) ValueFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigEnvPatch) *string { return v.ValueFrom }).(pulumi.StringPtrOutput)
}

type WasmPluginSpecVmConfigEnvPatchArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigEnvPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecVmConfigEnvPatch)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigEnvPatchArrayOutput) ToWasmPluginSpecVmConfigEnvPatchArrayOutput() WasmPluginSpecVmConfigEnvPatchArrayOutput {
	return o
}

func (o WasmPluginSpecVmConfigEnvPatchArrayOutput) ToWasmPluginSpecVmConfigEnvPatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvPatchArrayOutput {
	return o
}

func (o WasmPluginSpecVmConfigEnvPatchArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecVmConfigEnvPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecVmConfigEnvPatch {
		return vs[0].([]WasmPluginSpecVmConfigEnvPatch)[vs[1].(int)]
	}).(WasmPluginSpecVmConfigEnvPatchOutput)
}

// Configuration for a Wasm VM.
type WasmPluginSpecVmConfigPatch struct {
	// Specifies environment variables to be injected to this VM.
	Env []WasmPluginSpecVmConfigEnvPatch `pulumi:"env"`
}

// WasmPluginSpecVmConfigPatchInput is an input type that accepts WasmPluginSpecVmConfigPatchArgs and WasmPluginSpecVmConfigPatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigPatchInput` via:
//
//	WasmPluginSpecVmConfigPatchArgs{...}
type WasmPluginSpecVmConfigPatchInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigPatchOutput() WasmPluginSpecVmConfigPatchOutput
	ToWasmPluginSpecVmConfigPatchOutputWithContext(context.Context) WasmPluginSpecVmConfigPatchOutput
}

// Configuration for a Wasm VM.
type WasmPluginSpecVmConfigPatchArgs struct {
	// Specifies environment variables to be injected to this VM.
	Env WasmPluginSpecVmConfigEnvPatchArrayInput `pulumi:"env"`
}

func (WasmPluginSpecVmConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfigPatch)(nil)).Elem()
}

func (i WasmPluginSpecVmConfigPatchArgs) ToWasmPluginSpecVmConfigPatchOutput() WasmPluginSpecVmConfigPatchOutput {
	return i.ToWasmPluginSpecVmConfigPatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigPatchArgs) ToWasmPluginSpecVmConfigPatchOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigPatchOutput)
}

func (i WasmPluginSpecVmConfigPatchArgs) ToWasmPluginSpecVmConfigPatchPtrOutput() WasmPluginSpecVmConfigPatchPtrOutput {
	return i.ToWasmPluginSpecVmConfigPatchPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigPatchArgs) ToWasmPluginSpecVmConfigPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigPatchOutput).ToWasmPluginSpecVmConfigPatchPtrOutputWithContext(ctx)
}

// WasmPluginSpecVmConfigPatchPtrInput is an input type that accepts WasmPluginSpecVmConfigPatchArgs, WasmPluginSpecVmConfigPatchPtr and WasmPluginSpecVmConfigPatchPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigPatchPtrInput` via:
//
//	        WasmPluginSpecVmConfigPatchArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecVmConfigPatchPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigPatchPtrOutput() WasmPluginSpecVmConfigPatchPtrOutput
	ToWasmPluginSpecVmConfigPatchPtrOutputWithContext(context.Context) WasmPluginSpecVmConfigPatchPtrOutput
}

type wasmPluginSpecVmConfigPatchPtrType WasmPluginSpecVmConfigPatchArgs

func WasmPluginSpecVmConfigPatchPtr(v *WasmPluginSpecVmConfigPatchArgs) WasmPluginSpecVmConfigPatchPtrInput {
	return (*wasmPluginSpecVmConfigPatchPtrType)(v)
}

func (*wasmPluginSpecVmConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecVmConfigPatch)(nil)).Elem()
}

func (i *wasmPluginSpecVmConfigPatchPtrType) ToWasmPluginSpecVmConfigPatchPtrOutput() WasmPluginSpecVmConfigPatchPtrOutput {
	return i.ToWasmPluginSpecVmConfigPatchPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecVmConfigPatchPtrType) ToWasmPluginSpecVmConfigPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigPatchPtrOutput)
}

// Configuration for a Wasm VM.
type WasmPluginSpecVmConfigPatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfigPatch)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigPatchOutput) ToWasmPluginSpecVmConfigPatchOutput() WasmPluginSpecVmConfigPatchOutput {
	return o
}

func (o WasmPluginSpecVmConfigPatchOutput) ToWasmPluginSpecVmConfigPatchOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPatchOutput {
	return o
}

func (o WasmPluginSpecVmConfigPatchOutput) ToWasmPluginSpecVmConfigPatchPtrOutput() WasmPluginSpecVmConfigPatchPtrOutput {
	return o.ToWasmPluginSpecVmConfigPatchPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecVmConfigPatchOutput) ToWasmPluginSpecVmConfigPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecVmConfigPatch) *WasmPluginSpecVmConfigPatch {
		return &v
	}).(WasmPluginSpecVmConfigPatchPtrOutput)
}

// Specifies environment variables to be injected to this VM.
func (o WasmPluginSpecVmConfigPatchOutput) Env() WasmPluginSpecVmConfigEnvPatchArrayOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigPatch) []WasmPluginSpecVmConfigEnvPatch { return v.Env }).(WasmPluginSpecVmConfigEnvPatchArrayOutput)
}

type WasmPluginSpecVmConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecVmConfigPatch)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigPatchPtrOutput) ToWasmPluginSpecVmConfigPatchPtrOutput() WasmPluginSpecVmConfigPatchPtrOutput {
	return o
}

func (o WasmPluginSpecVmConfigPatchPtrOutput) ToWasmPluginSpecVmConfigPatchPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPatchPtrOutput {
	return o
}

func (o WasmPluginSpecVmConfigPatchPtrOutput) Elem() WasmPluginSpecVmConfigPatchOutput {
	return o.ApplyT(func(v *WasmPluginSpecVmConfigPatch) WasmPluginSpecVmConfigPatch {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecVmConfigPatch
		return ret
	}).(WasmPluginSpecVmConfigPatchOutput)
}

// Specifies environment variables to be injected to this VM.
func (o WasmPluginSpecVmConfigPatchPtrOutput) Env() WasmPluginSpecVmConfigEnvPatchArrayOutput {
	return o.ApplyT(func(v *WasmPluginSpecVmConfigPatch) []WasmPluginSpecVmConfigEnvPatch {
		if v == nil {
			return nil
		}
		return v.Env
	}).(WasmPluginSpecVmConfigEnvPatchArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginTypeInput)(nil)).Elem(), WasmPluginTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginTypeArrayInput)(nil)).Elem(), WasmPluginTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginListTypeInput)(nil)).Elem(), WasmPluginListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginPatchTypeInput)(nil)).Elem(), WasmPluginPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecInput)(nil)).Elem(), WasmPluginSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecPtrInput)(nil)).Elem(), WasmPluginSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchInput)(nil)).Elem(), WasmPluginSpecMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchArrayInput)(nil)).Elem(), WasmPluginSpecMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchPatchInput)(nil)).Elem(), WasmPluginSpecMatchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchPatchArrayInput)(nil)).Elem(), WasmPluginSpecMatchPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchPortsInput)(nil)).Elem(), WasmPluginSpecMatchPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchPortsArrayInput)(nil)).Elem(), WasmPluginSpecMatchPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchPortsPatchInput)(nil)).Elem(), WasmPluginSpecMatchPortsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchPortsPatchArrayInput)(nil)).Elem(), WasmPluginSpecMatchPortsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecPatchInput)(nil)).Elem(), WasmPluginSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecPatchPtrInput)(nil)).Elem(), WasmPluginSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecSelectorInput)(nil)).Elem(), WasmPluginSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecSelectorPtrInput)(nil)).Elem(), WasmPluginSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecSelectorPatchInput)(nil)).Elem(), WasmPluginSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecSelectorPatchPtrInput)(nil)).Elem(), WasmPluginSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefInput)(nil)).Elem(), WasmPluginSpecTargetRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefPtrInput)(nil)).Elem(), WasmPluginSpecTargetRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefPatchInput)(nil)).Elem(), WasmPluginSpecTargetRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefPatchPtrInput)(nil)).Elem(), WasmPluginSpecTargetRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefsInput)(nil)).Elem(), WasmPluginSpecTargetRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefsArrayInput)(nil)).Elem(), WasmPluginSpecTargetRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefsPatchInput)(nil)).Elem(), WasmPluginSpecTargetRefsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefsPatchArrayInput)(nil)).Elem(), WasmPluginSpecTargetRefsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigInput)(nil)).Elem(), WasmPluginSpecVmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigPtrInput)(nil)).Elem(), WasmPluginSpecVmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigEnvInput)(nil)).Elem(), WasmPluginSpecVmConfigEnvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigEnvArrayInput)(nil)).Elem(), WasmPluginSpecVmConfigEnvArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigEnvPatchInput)(nil)).Elem(), WasmPluginSpecVmConfigEnvPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigEnvPatchArrayInput)(nil)).Elem(), WasmPluginSpecVmConfigEnvPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigPatchInput)(nil)).Elem(), WasmPluginSpecVmConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigPatchPtrInput)(nil)).Elem(), WasmPluginSpecVmConfigPatchArgs{})
	pulumi.RegisterOutputType(WasmPluginTypeOutput{})
	pulumi.RegisterOutputType(WasmPluginTypeArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginListTypeOutput{})
	pulumi.RegisterOutputType(WasmPluginPatchTypeOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchPatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchPatchArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchPortsOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchPortsArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchPortsPatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchPortsPatchArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecPatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecSelectorOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecSelectorPatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefPatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefPatchPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefsOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefsArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefsPatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefsPatchArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigEnvOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigEnvArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigEnvPatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigEnvPatchArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigPatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigPatchPtrOutput{})
}
