// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// WasmPluginList is a list of WasmPlugin
type WasmPluginList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of wasmplugins. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items WasmPluginTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewWasmPluginList registers a new resource with the given unique name, arguments, and options.
func NewWasmPluginList(ctx *pulumi.Context,
	name string, args *WasmPluginListArgs, opts ...pulumi.ResourceOption) (*WasmPluginList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("extensions.istio.io/v1alpha1")
	args.Kind = pulumi.StringPtr("WasmPluginList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WasmPluginList
	err := ctx.RegisterResource("kubernetes:extensions.istio.io/v1alpha1:WasmPluginList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWasmPluginList gets an existing WasmPluginList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWasmPluginList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WasmPluginListState, opts ...pulumi.ResourceOption) (*WasmPluginList, error) {
	var resource WasmPluginList
	err := ctx.ReadResource("kubernetes:extensions.istio.io/v1alpha1:WasmPluginList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WasmPluginList resources.
type wasmPluginListState struct {
}

type WasmPluginListState struct {
}

func (WasmPluginListState) ElementType() reflect.Type {
	return reflect.TypeOf((*wasmPluginListState)(nil)).Elem()
}

type wasmPluginListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of wasmplugins. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []WasmPluginType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a WasmPluginList resource.
type WasmPluginListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of wasmplugins. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items WasmPluginTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (WasmPluginListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wasmPluginListArgs)(nil)).Elem()
}

type WasmPluginListInput interface {
	pulumi.Input

	ToWasmPluginListOutput() WasmPluginListOutput
	ToWasmPluginListOutputWithContext(ctx context.Context) WasmPluginListOutput
}

func (*WasmPluginList) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginList)(nil)).Elem()
}

func (i *WasmPluginList) ToWasmPluginListOutput() WasmPluginListOutput {
	return i.ToWasmPluginListOutputWithContext(context.Background())
}

func (i *WasmPluginList) ToWasmPluginListOutputWithContext(ctx context.Context) WasmPluginListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginListOutput)
}

// WasmPluginListArrayInput is an input type that accepts WasmPluginListArray and WasmPluginListArrayOutput values.
// You can construct a concrete instance of `WasmPluginListArrayInput` via:
//
//	WasmPluginListArray{ WasmPluginListArgs{...} }
type WasmPluginListArrayInput interface {
	pulumi.Input

	ToWasmPluginListArrayOutput() WasmPluginListArrayOutput
	ToWasmPluginListArrayOutputWithContext(context.Context) WasmPluginListArrayOutput
}

type WasmPluginListArray []WasmPluginListInput

func (WasmPluginListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WasmPluginList)(nil)).Elem()
}

func (i WasmPluginListArray) ToWasmPluginListArrayOutput() WasmPluginListArrayOutput {
	return i.ToWasmPluginListArrayOutputWithContext(context.Background())
}

func (i WasmPluginListArray) ToWasmPluginListArrayOutputWithContext(ctx context.Context) WasmPluginListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginListArrayOutput)
}

// WasmPluginListMapInput is an input type that accepts WasmPluginListMap and WasmPluginListMapOutput values.
// You can construct a concrete instance of `WasmPluginListMapInput` via:
//
//	WasmPluginListMap{ "key": WasmPluginListArgs{...} }
type WasmPluginListMapInput interface {
	pulumi.Input

	ToWasmPluginListMapOutput() WasmPluginListMapOutput
	ToWasmPluginListMapOutputWithContext(context.Context) WasmPluginListMapOutput
}

type WasmPluginListMap map[string]WasmPluginListInput

func (WasmPluginListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WasmPluginList)(nil)).Elem()
}

func (i WasmPluginListMap) ToWasmPluginListMapOutput() WasmPluginListMapOutput {
	return i.ToWasmPluginListMapOutputWithContext(context.Background())
}

func (i WasmPluginListMap) ToWasmPluginListMapOutputWithContext(ctx context.Context) WasmPluginListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginListMapOutput)
}

type WasmPluginListOutput struct{ *pulumi.OutputState }

func (WasmPluginListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginList)(nil)).Elem()
}

func (o WasmPluginListOutput) ToWasmPluginListOutput() WasmPluginListOutput {
	return o
}

func (o WasmPluginListOutput) ToWasmPluginListOutputWithContext(ctx context.Context) WasmPluginListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WasmPluginListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *WasmPluginList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of wasmplugins. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o WasmPluginListOutput) Items() WasmPluginTypeArrayOutput {
	return o.ApplyT(func(v *WasmPluginList) WasmPluginTypeArrayOutput { return v.Items }).(WasmPluginTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WasmPluginListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *WasmPluginList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WasmPluginListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *WasmPluginList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type WasmPluginListArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WasmPluginList)(nil)).Elem()
}

func (o WasmPluginListArrayOutput) ToWasmPluginListArrayOutput() WasmPluginListArrayOutput {
	return o
}

func (o WasmPluginListArrayOutput) ToWasmPluginListArrayOutputWithContext(ctx context.Context) WasmPluginListArrayOutput {
	return o
}

func (o WasmPluginListArrayOutput) Index(i pulumi.IntInput) WasmPluginListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WasmPluginList {
		return vs[0].([]*WasmPluginList)[vs[1].(int)]
	}).(WasmPluginListOutput)
}

type WasmPluginListMapOutput struct{ *pulumi.OutputState }

func (WasmPluginListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WasmPluginList)(nil)).Elem()
}

func (o WasmPluginListMapOutput) ToWasmPluginListMapOutput() WasmPluginListMapOutput {
	return o
}

func (o WasmPluginListMapOutput) ToWasmPluginListMapOutputWithContext(ctx context.Context) WasmPluginListMapOutput {
	return o
}

func (o WasmPluginListMapOutput) MapIndex(k pulumi.StringInput) WasmPluginListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WasmPluginList {
		return vs[0].(map[string]*WasmPluginList)[vs[1].(string)]
	}).(WasmPluginListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginListInput)(nil)).Elem(), &WasmPluginList{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginListArrayInput)(nil)).Elem(), WasmPluginListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginListMapInput)(nil)).Elem(), WasmPluginListMap{})
	pulumi.RegisterOutputType(WasmPluginListOutput{})
	pulumi.RegisterOutputType(WasmPluginListArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginListMapOutput{})
}
