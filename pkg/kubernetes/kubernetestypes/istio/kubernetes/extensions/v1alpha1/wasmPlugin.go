// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WasmPlugin struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     WasmPluginSpecOutput    `pulumi:"spec"`
	Status   pulumi.MapOutput        `pulumi:"status"`
}

// NewWasmPlugin registers a new resource with the given unique name, arguments, and options.
func NewWasmPlugin(ctx *pulumi.Context,
	name string, args *WasmPluginArgs, opts ...pulumi.ResourceOption) (*WasmPlugin, error) {
	if args == nil {
		args = &WasmPluginArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("extensions.istio.io/v1alpha1")
	args.Kind = pulumi.StringPtr("WasmPlugin")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource WasmPlugin
	err := ctx.RegisterResource("kubernetes:extensions.istio.io/v1alpha1:WasmPlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWasmPlugin gets an existing WasmPlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWasmPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WasmPluginState, opts ...pulumi.ResourceOption) (*WasmPlugin, error) {
	var resource WasmPlugin
	err := ctx.ReadResource("kubernetes:extensions.istio.io/v1alpha1:WasmPlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WasmPlugin resources.
type wasmPluginState struct {
}

type WasmPluginState struct {
}

func (WasmPluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*wasmPluginState)(nil)).Elem()
}

type wasmPluginArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *WasmPluginSpec    `pulumi:"spec"`
}

// The set of arguments for constructing a WasmPlugin resource.
type WasmPluginArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     WasmPluginSpecPtrInput
}

func (WasmPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wasmPluginArgs)(nil)).Elem()
}

type WasmPluginInput interface {
	pulumi.Input

	ToWasmPluginOutput() WasmPluginOutput
	ToWasmPluginOutputWithContext(ctx context.Context) WasmPluginOutput
}

func (*WasmPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPlugin)(nil)).Elem()
}

func (i *WasmPlugin) ToWasmPluginOutput() WasmPluginOutput {
	return i.ToWasmPluginOutputWithContext(context.Background())
}

func (i *WasmPlugin) ToWasmPluginOutputWithContext(ctx context.Context) WasmPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginOutput)
}

// WasmPluginArrayInput is an input type that accepts WasmPluginArray and WasmPluginArrayOutput values.
// You can construct a concrete instance of `WasmPluginArrayInput` via:
//
//	WasmPluginArray{ WasmPluginArgs{...} }
type WasmPluginArrayInput interface {
	pulumi.Input

	ToWasmPluginArrayOutput() WasmPluginArrayOutput
	ToWasmPluginArrayOutputWithContext(context.Context) WasmPluginArrayOutput
}

type WasmPluginArray []WasmPluginInput

func (WasmPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WasmPlugin)(nil)).Elem()
}

func (i WasmPluginArray) ToWasmPluginArrayOutput() WasmPluginArrayOutput {
	return i.ToWasmPluginArrayOutputWithContext(context.Background())
}

func (i WasmPluginArray) ToWasmPluginArrayOutputWithContext(ctx context.Context) WasmPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginArrayOutput)
}

// WasmPluginMapInput is an input type that accepts WasmPluginMap and WasmPluginMapOutput values.
// You can construct a concrete instance of `WasmPluginMapInput` via:
//
//	WasmPluginMap{ "key": WasmPluginArgs{...} }
type WasmPluginMapInput interface {
	pulumi.Input

	ToWasmPluginMapOutput() WasmPluginMapOutput
	ToWasmPluginMapOutputWithContext(context.Context) WasmPluginMapOutput
}

type WasmPluginMap map[string]WasmPluginInput

func (WasmPluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WasmPlugin)(nil)).Elem()
}

func (i WasmPluginMap) ToWasmPluginMapOutput() WasmPluginMapOutput {
	return i.ToWasmPluginMapOutputWithContext(context.Background())
}

func (i WasmPluginMap) ToWasmPluginMapOutputWithContext(ctx context.Context) WasmPluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginMapOutput)
}

type WasmPluginOutput struct{ *pulumi.OutputState }

func (WasmPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPlugin)(nil)).Elem()
}

func (o WasmPluginOutput) ToWasmPluginOutput() WasmPluginOutput {
	return o
}

func (o WasmPluginOutput) ToWasmPluginOutputWithContext(ctx context.Context) WasmPluginOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o WasmPluginOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o WasmPluginOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o WasmPluginOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *WasmPlugin) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o WasmPluginOutput) Spec() WasmPluginSpecOutput {
	return o.ApplyT(func(v *WasmPlugin) WasmPluginSpecOutput { return v.Spec }).(WasmPluginSpecOutput)
}

func (o WasmPluginOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *WasmPlugin) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

type WasmPluginArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WasmPlugin)(nil)).Elem()
}

func (o WasmPluginArrayOutput) ToWasmPluginArrayOutput() WasmPluginArrayOutput {
	return o
}

func (o WasmPluginArrayOutput) ToWasmPluginArrayOutputWithContext(ctx context.Context) WasmPluginArrayOutput {
	return o
}

func (o WasmPluginArrayOutput) Index(i pulumi.IntInput) WasmPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WasmPlugin {
		return vs[0].([]*WasmPlugin)[vs[1].(int)]
	}).(WasmPluginOutput)
}

type WasmPluginMapOutput struct{ *pulumi.OutputState }

func (WasmPluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WasmPlugin)(nil)).Elem()
}

func (o WasmPluginMapOutput) ToWasmPluginMapOutput() WasmPluginMapOutput {
	return o
}

func (o WasmPluginMapOutput) ToWasmPluginMapOutputWithContext(ctx context.Context) WasmPluginMapOutput {
	return o
}

func (o WasmPluginMapOutput) MapIndex(k pulumi.StringInput) WasmPluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WasmPlugin {
		return vs[0].(map[string]*WasmPlugin)[vs[1].(string)]
	}).(WasmPluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginInput)(nil)).Elem(), &WasmPlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginArrayInput)(nil)).Elem(), WasmPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginMapInput)(nil)).Elem(), WasmPluginMap{})
	pulumi.RegisterOutputType(WasmPluginOutput{})
	pulumi.RegisterOutputType(WasmPluginArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginMapOutput{})
}
