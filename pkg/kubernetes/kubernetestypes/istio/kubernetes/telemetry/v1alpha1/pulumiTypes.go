// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type TelemetryType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     *TelemetrySpec         `pulumi:"spec"`
	Status   map[string]interface{} `pulumi:"status"`
}

// TelemetryTypeInput is an input type that accepts TelemetryTypeArgs and TelemetryTypeOutput values.
// You can construct a concrete instance of `TelemetryTypeInput` via:
//
//	TelemetryTypeArgs{...}
type TelemetryTypeInput interface {
	pulumi.Input

	ToTelemetryTypeOutput() TelemetryTypeOutput
	ToTelemetryTypeOutputWithContext(context.Context) TelemetryTypeOutput
}

type TelemetryTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     TelemetrySpecPtrInput     `pulumi:"spec"`
	Status   pulumi.MapInput           `pulumi:"status"`
}

func (TelemetryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetryType)(nil)).Elem()
}

func (i TelemetryTypeArgs) ToTelemetryTypeOutput() TelemetryTypeOutput {
	return i.ToTelemetryTypeOutputWithContext(context.Background())
}

func (i TelemetryTypeArgs) ToTelemetryTypeOutputWithContext(ctx context.Context) TelemetryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryTypeOutput)
}

// TelemetryTypeArrayInput is an input type that accepts TelemetryTypeArray and TelemetryTypeArrayOutput values.
// You can construct a concrete instance of `TelemetryTypeArrayInput` via:
//
//	TelemetryTypeArray{ TelemetryTypeArgs{...} }
type TelemetryTypeArrayInput interface {
	pulumi.Input

	ToTelemetryTypeArrayOutput() TelemetryTypeArrayOutput
	ToTelemetryTypeArrayOutputWithContext(context.Context) TelemetryTypeArrayOutput
}

type TelemetryTypeArray []TelemetryTypeInput

func (TelemetryTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetryType)(nil)).Elem()
}

func (i TelemetryTypeArray) ToTelemetryTypeArrayOutput() TelemetryTypeArrayOutput {
	return i.ToTelemetryTypeArrayOutputWithContext(context.Background())
}

func (i TelemetryTypeArray) ToTelemetryTypeArrayOutputWithContext(ctx context.Context) TelemetryTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryTypeArrayOutput)
}

type TelemetryTypeOutput struct{ *pulumi.OutputState }

func (TelemetryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetryType)(nil)).Elem()
}

func (o TelemetryTypeOutput) ToTelemetryTypeOutput() TelemetryTypeOutput {
	return o
}

func (o TelemetryTypeOutput) ToTelemetryTypeOutputWithContext(ctx context.Context) TelemetryTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TelemetryTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetryType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TelemetryTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetryType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TelemetryTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v TelemetryType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o TelemetryTypeOutput) Spec() TelemetrySpecPtrOutput {
	return o.ApplyT(func(v TelemetryType) *TelemetrySpec { return v.Spec }).(TelemetrySpecPtrOutput)
}

func (o TelemetryTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v TelemetryType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

type TelemetryTypeArrayOutput struct{ *pulumi.OutputState }

func (TelemetryTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetryType)(nil)).Elem()
}

func (o TelemetryTypeArrayOutput) ToTelemetryTypeArrayOutput() TelemetryTypeArrayOutput {
	return o
}

func (o TelemetryTypeArrayOutput) ToTelemetryTypeArrayOutputWithContext(ctx context.Context) TelemetryTypeArrayOutput {
	return o
}

func (o TelemetryTypeArrayOutput) Index(i pulumi.IntInput) TelemetryTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetryType {
		return vs[0].([]TelemetryType)[vs[1].(int)]
	}).(TelemetryTypeOutput)
}

// TelemetryList is a list of Telemetry
type TelemetryListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of telemetries. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []TelemetryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// TelemetryListTypeInput is an input type that accepts TelemetryListTypeArgs and TelemetryListTypeOutput values.
// You can construct a concrete instance of `TelemetryListTypeInput` via:
//
//	TelemetryListTypeArgs{...}
type TelemetryListTypeInput interface {
	pulumi.Input

	ToTelemetryListTypeOutput() TelemetryListTypeOutput
	ToTelemetryListTypeOutputWithContext(context.Context) TelemetryListTypeOutput
}

// TelemetryList is a list of Telemetry
type TelemetryListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of telemetries. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items TelemetryTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (TelemetryListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetryListType)(nil)).Elem()
}

func (i TelemetryListTypeArgs) ToTelemetryListTypeOutput() TelemetryListTypeOutput {
	return i.ToTelemetryListTypeOutputWithContext(context.Background())
}

func (i TelemetryListTypeArgs) ToTelemetryListTypeOutputWithContext(ctx context.Context) TelemetryListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryListTypeOutput)
}

// TelemetryList is a list of Telemetry
type TelemetryListTypeOutput struct{ *pulumi.OutputState }

func (TelemetryListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetryListType)(nil)).Elem()
}

func (o TelemetryListTypeOutput) ToTelemetryListTypeOutput() TelemetryListTypeOutput {
	return o
}

func (o TelemetryListTypeOutput) ToTelemetryListTypeOutputWithContext(ctx context.Context) TelemetryListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TelemetryListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetryListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of telemetries. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o TelemetryListTypeOutput) Items() TelemetryTypeArrayOutput {
	return o.ApplyT(func(v TelemetryListType) []TelemetryType { return v.Items }).(TelemetryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TelemetryListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetryListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TelemetryListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v TelemetryListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

type TelemetryPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *TelemetrySpecPatch     `pulumi:"spec"`
	Status   map[string]interface{}  `pulumi:"status"`
}

// TelemetryPatchTypeInput is an input type that accepts TelemetryPatchTypeArgs and TelemetryPatchTypeOutput values.
// You can construct a concrete instance of `TelemetryPatchTypeInput` via:
//
//	TelemetryPatchTypeArgs{...}
type TelemetryPatchTypeInput interface {
	pulumi.Input

	ToTelemetryPatchTypeOutput() TelemetryPatchTypeOutput
	ToTelemetryPatchTypeOutputWithContext(context.Context) TelemetryPatchTypeOutput
}

type TelemetryPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     TelemetrySpecPatchPtrInput     `pulumi:"spec"`
	Status   pulumi.MapInput                `pulumi:"status"`
}

func (TelemetryPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetryPatchType)(nil)).Elem()
}

func (i TelemetryPatchTypeArgs) ToTelemetryPatchTypeOutput() TelemetryPatchTypeOutput {
	return i.ToTelemetryPatchTypeOutputWithContext(context.Background())
}

func (i TelemetryPatchTypeArgs) ToTelemetryPatchTypeOutputWithContext(ctx context.Context) TelemetryPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryPatchTypeOutput)
}

type TelemetryPatchTypeOutput struct{ *pulumi.OutputState }

func (TelemetryPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetryPatchType)(nil)).Elem()
}

func (o TelemetryPatchTypeOutput) ToTelemetryPatchTypeOutput() TelemetryPatchTypeOutput {
	return o
}

func (o TelemetryPatchTypeOutput) ToTelemetryPatchTypeOutputWithContext(ctx context.Context) TelemetryPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TelemetryPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetryPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TelemetryPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetryPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o TelemetryPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v TelemetryPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o TelemetryPatchTypeOutput) Spec() TelemetrySpecPatchPtrOutput {
	return o.ApplyT(func(v TelemetryPatchType) *TelemetrySpecPatch { return v.Spec }).(TelemetrySpecPatchPtrOutput)
}

func (o TelemetryPatchTypeOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v TelemetryPatchType) map[string]interface{} { return v.Status }).(pulumi.MapOutput)
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpec struct {
	// Optional.
	AccessLogging []TelemetrySpecAccessLogging `pulumi:"accessLogging"`
	// Optional.
	Metrics   []TelemetrySpecMetrics  `pulumi:"metrics"`
	Selector  *TelemetrySpecSelector  `pulumi:"selector"`
	TargetRef *TelemetrySpecTargetRef `pulumi:"targetRef"`
	// Optional.
	TargetRefs []TelemetrySpecTargetRefs `pulumi:"targetRefs"`
	// Optional.
	Tracing []TelemetrySpecTracing `pulumi:"tracing"`
}

// TelemetrySpecInput is an input type that accepts TelemetrySpecArgs and TelemetrySpecOutput values.
// You can construct a concrete instance of `TelemetrySpecInput` via:
//
//	TelemetrySpecArgs{...}
type TelemetrySpecInput interface {
	pulumi.Input

	ToTelemetrySpecOutput() TelemetrySpecOutput
	ToTelemetrySpecOutputWithContext(context.Context) TelemetrySpecOutput
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpecArgs struct {
	// Optional.
	AccessLogging TelemetrySpecAccessLoggingArrayInput `pulumi:"accessLogging"`
	// Optional.
	Metrics   TelemetrySpecMetricsArrayInput `pulumi:"metrics"`
	Selector  TelemetrySpecSelectorPtrInput  `pulumi:"selector"`
	TargetRef TelemetrySpecTargetRefPtrInput `pulumi:"targetRef"`
	// Optional.
	TargetRefs TelemetrySpecTargetRefsArrayInput `pulumi:"targetRefs"`
	// Optional.
	Tracing TelemetrySpecTracingArrayInput `pulumi:"tracing"`
}

func (TelemetrySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpec)(nil)).Elem()
}

func (i TelemetrySpecArgs) ToTelemetrySpecOutput() TelemetrySpecOutput {
	return i.ToTelemetrySpecOutputWithContext(context.Background())
}

func (i TelemetrySpecArgs) ToTelemetrySpecOutputWithContext(ctx context.Context) TelemetrySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecOutput)
}

func (i TelemetrySpecArgs) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return i.ToTelemetrySpecPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecArgs) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecOutput).ToTelemetrySpecPtrOutputWithContext(ctx)
}

// TelemetrySpecPtrInput is an input type that accepts TelemetrySpecArgs, TelemetrySpecPtr and TelemetrySpecPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecPtrInput` via:
//
//	        TelemetrySpecArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecPtrInput interface {
	pulumi.Input

	ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput
	ToTelemetrySpecPtrOutputWithContext(context.Context) TelemetrySpecPtrOutput
}

type telemetrySpecPtrType TelemetrySpecArgs

func TelemetrySpecPtr(v *TelemetrySpecArgs) TelemetrySpecPtrInput {
	return (*telemetrySpecPtrType)(v)
}

func (*telemetrySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpec)(nil)).Elem()
}

func (i *telemetrySpecPtrType) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return i.ToTelemetrySpecPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecPtrType) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecPtrOutput)
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpecOutput struct{ *pulumi.OutputState }

func (TelemetrySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpec)(nil)).Elem()
}

func (o TelemetrySpecOutput) ToTelemetrySpecOutput() TelemetrySpecOutput {
	return o
}

func (o TelemetrySpecOutput) ToTelemetrySpecOutputWithContext(ctx context.Context) TelemetrySpecOutput {
	return o
}

func (o TelemetrySpecOutput) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return o.ToTelemetrySpecPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecOutput) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpec) *TelemetrySpec {
		return &v
	}).(TelemetrySpecPtrOutput)
}

// Optional.
func (o TelemetrySpecOutput) AccessLogging() TelemetrySpecAccessLoggingArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecAccessLogging { return v.AccessLogging }).(TelemetrySpecAccessLoggingArrayOutput)
}

// Optional.
func (o TelemetrySpecOutput) Metrics() TelemetrySpecMetricsArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecMetrics { return v.Metrics }).(TelemetrySpecMetricsArrayOutput)
}

func (o TelemetrySpecOutput) Selector() TelemetrySpecSelectorPtrOutput {
	return o.ApplyT(func(v TelemetrySpec) *TelemetrySpecSelector { return v.Selector }).(TelemetrySpecSelectorPtrOutput)
}

func (o TelemetrySpecOutput) TargetRef() TelemetrySpecTargetRefPtrOutput {
	return o.ApplyT(func(v TelemetrySpec) *TelemetrySpecTargetRef { return v.TargetRef }).(TelemetrySpecTargetRefPtrOutput)
}

// Optional.
func (o TelemetrySpecOutput) TargetRefs() TelemetrySpecTargetRefsArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecTargetRefs { return v.TargetRefs }).(TelemetrySpecTargetRefsArrayOutput)
}

// Optional.
func (o TelemetrySpecOutput) Tracing() TelemetrySpecTracingArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecTracing { return v.Tracing }).(TelemetrySpecTracingArrayOutput)
}

type TelemetrySpecPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpec)(nil)).Elem()
}

func (o TelemetrySpecPtrOutput) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return o
}

func (o TelemetrySpecPtrOutput) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return o
}

func (o TelemetrySpecPtrOutput) Elem() TelemetrySpecOutput {
	return o.ApplyT(func(v *TelemetrySpec) TelemetrySpec {
		if v != nil {
			return *v
		}
		var ret TelemetrySpec
		return ret
	}).(TelemetrySpecOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) AccessLogging() TelemetrySpecAccessLoggingArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecAccessLogging {
		if v == nil {
			return nil
		}
		return v.AccessLogging
	}).(TelemetrySpecAccessLoggingArrayOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) Metrics() TelemetrySpecMetricsArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(TelemetrySpecMetricsArrayOutput)
}

func (o TelemetrySpecPtrOutput) Selector() TelemetrySpecSelectorPtrOutput {
	return o.ApplyT(func(v *TelemetrySpec) *TelemetrySpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(TelemetrySpecSelectorPtrOutput)
}

func (o TelemetrySpecPtrOutput) TargetRef() TelemetrySpecTargetRefPtrOutput {
	return o.ApplyT(func(v *TelemetrySpec) *TelemetrySpecTargetRef {
		if v == nil {
			return nil
		}
		return v.TargetRef
	}).(TelemetrySpecTargetRefPtrOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) TargetRefs() TelemetrySpecTargetRefsArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecTargetRefs {
		if v == nil {
			return nil
		}
		return v.TargetRefs
	}).(TelemetrySpecTargetRefsArrayOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) Tracing() TelemetrySpecTracingArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecTracing {
		if v == nil {
			return nil
		}
		return v.Tracing
	}).(TelemetrySpecTracingArrayOutput)
}

type TelemetrySpecAccessLogging struct {
	// Controls logging.
	Disabled *bool                             `pulumi:"disabled"`
	Filter   *TelemetrySpecAccessLoggingFilter `pulumi:"filter"`
	Match    *TelemetrySpecAccessLoggingMatch  `pulumi:"match"`
	// Optional.
	Providers []TelemetrySpecAccessLoggingProviders `pulumi:"providers"`
}

// TelemetrySpecAccessLoggingInput is an input type that accepts TelemetrySpecAccessLoggingArgs and TelemetrySpecAccessLoggingOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingInput` via:
//
//	TelemetrySpecAccessLoggingArgs{...}
type TelemetrySpecAccessLoggingInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingOutput() TelemetrySpecAccessLoggingOutput
	ToTelemetrySpecAccessLoggingOutputWithContext(context.Context) TelemetrySpecAccessLoggingOutput
}

type TelemetrySpecAccessLoggingArgs struct {
	// Controls logging.
	Disabled pulumi.BoolPtrInput                      `pulumi:"disabled"`
	Filter   TelemetrySpecAccessLoggingFilterPtrInput `pulumi:"filter"`
	Match    TelemetrySpecAccessLoggingMatchPtrInput  `pulumi:"match"`
	// Optional.
	Providers TelemetrySpecAccessLoggingProvidersArrayInput `pulumi:"providers"`
}

func (TelemetrySpecAccessLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLogging)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingArgs) ToTelemetrySpecAccessLoggingOutput() TelemetrySpecAccessLoggingOutput {
	return i.ToTelemetrySpecAccessLoggingOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingArgs) ToTelemetrySpecAccessLoggingOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingOutput)
}

// TelemetrySpecAccessLoggingArrayInput is an input type that accepts TelemetrySpecAccessLoggingArray and TelemetrySpecAccessLoggingArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingArrayInput` via:
//
//	TelemetrySpecAccessLoggingArray{ TelemetrySpecAccessLoggingArgs{...} }
type TelemetrySpecAccessLoggingArrayInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingArrayOutput() TelemetrySpecAccessLoggingArrayOutput
	ToTelemetrySpecAccessLoggingArrayOutputWithContext(context.Context) TelemetrySpecAccessLoggingArrayOutput
}

type TelemetrySpecAccessLoggingArray []TelemetrySpecAccessLoggingInput

func (TelemetrySpecAccessLoggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLogging)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingArray) ToTelemetrySpecAccessLoggingArrayOutput() TelemetrySpecAccessLoggingArrayOutput {
	return i.ToTelemetrySpecAccessLoggingArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingArray) ToTelemetrySpecAccessLoggingArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingArrayOutput)
}

type TelemetrySpecAccessLoggingOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLogging)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingOutput) ToTelemetrySpecAccessLoggingOutput() TelemetrySpecAccessLoggingOutput {
	return o
}

func (o TelemetrySpecAccessLoggingOutput) ToTelemetrySpecAccessLoggingOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingOutput {
	return o
}

// Controls logging.
func (o TelemetrySpecAccessLoggingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLogging) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o TelemetrySpecAccessLoggingOutput) Filter() TelemetrySpecAccessLoggingFilterPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLogging) *TelemetrySpecAccessLoggingFilter { return v.Filter }).(TelemetrySpecAccessLoggingFilterPtrOutput)
}

func (o TelemetrySpecAccessLoggingOutput) Match() TelemetrySpecAccessLoggingMatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLogging) *TelemetrySpecAccessLoggingMatch { return v.Match }).(TelemetrySpecAccessLoggingMatchPtrOutput)
}

// Optional.
func (o TelemetrySpecAccessLoggingOutput) Providers() TelemetrySpecAccessLoggingProvidersArrayOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLogging) []TelemetrySpecAccessLoggingProviders { return v.Providers }).(TelemetrySpecAccessLoggingProvidersArrayOutput)
}

type TelemetrySpecAccessLoggingArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLogging)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingArrayOutput) ToTelemetrySpecAccessLoggingArrayOutput() TelemetrySpecAccessLoggingArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingArrayOutput) ToTelemetrySpecAccessLoggingArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingArrayOutput) Index(i pulumi.IntInput) TelemetrySpecAccessLoggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecAccessLogging {
		return vs[0].([]TelemetrySpecAccessLogging)[vs[1].(int)]
	}).(TelemetrySpecAccessLoggingOutput)
}

// Optional.
type TelemetrySpecAccessLoggingFilter struct {
	// CEL expression for selecting when requests/connections should be logged.
	Expression *string `pulumi:"expression"`
}

// TelemetrySpecAccessLoggingFilterInput is an input type that accepts TelemetrySpecAccessLoggingFilterArgs and TelemetrySpecAccessLoggingFilterOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingFilterInput` via:
//
//	TelemetrySpecAccessLoggingFilterArgs{...}
type TelemetrySpecAccessLoggingFilterInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingFilterOutput() TelemetrySpecAccessLoggingFilterOutput
	ToTelemetrySpecAccessLoggingFilterOutputWithContext(context.Context) TelemetrySpecAccessLoggingFilterOutput
}

// Optional.
type TelemetrySpecAccessLoggingFilterArgs struct {
	// CEL expression for selecting when requests/connections should be logged.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
}

func (TelemetrySpecAccessLoggingFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingFilter)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingFilterArgs) ToTelemetrySpecAccessLoggingFilterOutput() TelemetrySpecAccessLoggingFilterOutput {
	return i.ToTelemetrySpecAccessLoggingFilterOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingFilterArgs) ToTelemetrySpecAccessLoggingFilterOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingFilterOutput)
}

func (i TelemetrySpecAccessLoggingFilterArgs) ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput {
	return i.ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingFilterArgs) ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingFilterOutput).ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx)
}

// TelemetrySpecAccessLoggingFilterPtrInput is an input type that accepts TelemetrySpecAccessLoggingFilterArgs, TelemetrySpecAccessLoggingFilterPtr and TelemetrySpecAccessLoggingFilterPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingFilterPtrInput` via:
//
//	        TelemetrySpecAccessLoggingFilterArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecAccessLoggingFilterPtrInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput
	ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(context.Context) TelemetrySpecAccessLoggingFilterPtrOutput
}

type telemetrySpecAccessLoggingFilterPtrType TelemetrySpecAccessLoggingFilterArgs

func TelemetrySpecAccessLoggingFilterPtr(v *TelemetrySpecAccessLoggingFilterArgs) TelemetrySpecAccessLoggingFilterPtrInput {
	return (*telemetrySpecAccessLoggingFilterPtrType)(v)
}

func (*telemetrySpecAccessLoggingFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingFilter)(nil)).Elem()
}

func (i *telemetrySpecAccessLoggingFilterPtrType) ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput {
	return i.ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecAccessLoggingFilterPtrType) ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingFilterPtrOutput)
}

// Optional.
type TelemetrySpecAccessLoggingFilterOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingFilter)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingFilterOutput) ToTelemetrySpecAccessLoggingFilterOutput() TelemetrySpecAccessLoggingFilterOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterOutput) ToTelemetrySpecAccessLoggingFilterOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterOutput) ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput {
	return o.ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecAccessLoggingFilterOutput) ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecAccessLoggingFilter) *TelemetrySpecAccessLoggingFilter {
		return &v
	}).(TelemetrySpecAccessLoggingFilterPtrOutput)
}

// CEL expression for selecting when requests/connections should be logged.
func (o TelemetrySpecAccessLoggingFilterOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingFilter) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingFilterPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingFilter)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingFilterPtrOutput) ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterPtrOutput) ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterPtrOutput) Elem() TelemetrySpecAccessLoggingFilterOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingFilter) TelemetrySpecAccessLoggingFilter {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecAccessLoggingFilter
		return ret
	}).(TelemetrySpecAccessLoggingFilterOutput)
}

// CEL expression for selecting when requests/connections should be logged.
func (o TelemetrySpecAccessLoggingFilterPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingFilter) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional.
type TelemetrySpecAccessLoggingFilterPatch struct {
	// CEL expression for selecting when requests/connections should be logged.
	Expression *string `pulumi:"expression"`
}

// TelemetrySpecAccessLoggingFilterPatchInput is an input type that accepts TelemetrySpecAccessLoggingFilterPatchArgs and TelemetrySpecAccessLoggingFilterPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingFilterPatchInput` via:
//
//	TelemetrySpecAccessLoggingFilterPatchArgs{...}
type TelemetrySpecAccessLoggingFilterPatchInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingFilterPatchOutput() TelemetrySpecAccessLoggingFilterPatchOutput
	ToTelemetrySpecAccessLoggingFilterPatchOutputWithContext(context.Context) TelemetrySpecAccessLoggingFilterPatchOutput
}

// Optional.
type TelemetrySpecAccessLoggingFilterPatchArgs struct {
	// CEL expression for selecting when requests/connections should be logged.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
}

func (TelemetrySpecAccessLoggingFilterPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingFilterPatch)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingFilterPatchArgs) ToTelemetrySpecAccessLoggingFilterPatchOutput() TelemetrySpecAccessLoggingFilterPatchOutput {
	return i.ToTelemetrySpecAccessLoggingFilterPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingFilterPatchArgs) ToTelemetrySpecAccessLoggingFilterPatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingFilterPatchOutput)
}

func (i TelemetrySpecAccessLoggingFilterPatchArgs) ToTelemetrySpecAccessLoggingFilterPatchPtrOutput() TelemetrySpecAccessLoggingFilterPatchPtrOutput {
	return i.ToTelemetrySpecAccessLoggingFilterPatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingFilterPatchArgs) ToTelemetrySpecAccessLoggingFilterPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingFilterPatchOutput).ToTelemetrySpecAccessLoggingFilterPatchPtrOutputWithContext(ctx)
}

// TelemetrySpecAccessLoggingFilterPatchPtrInput is an input type that accepts TelemetrySpecAccessLoggingFilterPatchArgs, TelemetrySpecAccessLoggingFilterPatchPtr and TelemetrySpecAccessLoggingFilterPatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingFilterPatchPtrInput` via:
//
//	        TelemetrySpecAccessLoggingFilterPatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecAccessLoggingFilterPatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingFilterPatchPtrOutput() TelemetrySpecAccessLoggingFilterPatchPtrOutput
	ToTelemetrySpecAccessLoggingFilterPatchPtrOutputWithContext(context.Context) TelemetrySpecAccessLoggingFilterPatchPtrOutput
}

type telemetrySpecAccessLoggingFilterPatchPtrType TelemetrySpecAccessLoggingFilterPatchArgs

func TelemetrySpecAccessLoggingFilterPatchPtr(v *TelemetrySpecAccessLoggingFilterPatchArgs) TelemetrySpecAccessLoggingFilterPatchPtrInput {
	return (*telemetrySpecAccessLoggingFilterPatchPtrType)(v)
}

func (*telemetrySpecAccessLoggingFilterPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingFilterPatch)(nil)).Elem()
}

func (i *telemetrySpecAccessLoggingFilterPatchPtrType) ToTelemetrySpecAccessLoggingFilterPatchPtrOutput() TelemetrySpecAccessLoggingFilterPatchPtrOutput {
	return i.ToTelemetrySpecAccessLoggingFilterPatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecAccessLoggingFilterPatchPtrType) ToTelemetrySpecAccessLoggingFilterPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingFilterPatchPtrOutput)
}

// Optional.
type TelemetrySpecAccessLoggingFilterPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingFilterPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingFilterPatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingFilterPatchOutput) ToTelemetrySpecAccessLoggingFilterPatchOutput() TelemetrySpecAccessLoggingFilterPatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterPatchOutput) ToTelemetrySpecAccessLoggingFilterPatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterPatchOutput) ToTelemetrySpecAccessLoggingFilterPatchPtrOutput() TelemetrySpecAccessLoggingFilterPatchPtrOutput {
	return o.ToTelemetrySpecAccessLoggingFilterPatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecAccessLoggingFilterPatchOutput) ToTelemetrySpecAccessLoggingFilterPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecAccessLoggingFilterPatch) *TelemetrySpecAccessLoggingFilterPatch {
		return &v
	}).(TelemetrySpecAccessLoggingFilterPatchPtrOutput)
}

// CEL expression for selecting when requests/connections should be logged.
func (o TelemetrySpecAccessLoggingFilterPatchOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingFilterPatch) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingFilterPatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingFilterPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingFilterPatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingFilterPatchPtrOutput) ToTelemetrySpecAccessLoggingFilterPatchPtrOutput() TelemetrySpecAccessLoggingFilterPatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterPatchPtrOutput) ToTelemetrySpecAccessLoggingFilterPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterPatchPtrOutput) Elem() TelemetrySpecAccessLoggingFilterPatchOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingFilterPatch) TelemetrySpecAccessLoggingFilterPatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecAccessLoggingFilterPatch
		return ret
	}).(TelemetrySpecAccessLoggingFilterPatchOutput)
}

// CEL expression for selecting when requests/connections should be logged.
func (o TelemetrySpecAccessLoggingFilterPatchPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingFilterPatch) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatch struct {
	// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecAccessLoggingMatchInput is an input type that accepts TelemetrySpecAccessLoggingMatchArgs and TelemetrySpecAccessLoggingMatchOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingMatchInput` via:
//
//	TelemetrySpecAccessLoggingMatchArgs{...}
type TelemetrySpecAccessLoggingMatchInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingMatchOutput() TelemetrySpecAccessLoggingMatchOutput
	ToTelemetrySpecAccessLoggingMatchOutputWithContext(context.Context) TelemetrySpecAccessLoggingMatchOutput
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatchArgs struct {
	// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecAccessLoggingMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingMatch)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingMatchArgs) ToTelemetrySpecAccessLoggingMatchOutput() TelemetrySpecAccessLoggingMatchOutput {
	return i.ToTelemetrySpecAccessLoggingMatchOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingMatchArgs) ToTelemetrySpecAccessLoggingMatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingMatchOutput)
}

func (i TelemetrySpecAccessLoggingMatchArgs) ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput {
	return i.ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingMatchArgs) ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingMatchOutput).ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx)
}

// TelemetrySpecAccessLoggingMatchPtrInput is an input type that accepts TelemetrySpecAccessLoggingMatchArgs, TelemetrySpecAccessLoggingMatchPtr and TelemetrySpecAccessLoggingMatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingMatchPtrInput` via:
//
//	        TelemetrySpecAccessLoggingMatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecAccessLoggingMatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput
	ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(context.Context) TelemetrySpecAccessLoggingMatchPtrOutput
}

type telemetrySpecAccessLoggingMatchPtrType TelemetrySpecAccessLoggingMatchArgs

func TelemetrySpecAccessLoggingMatchPtr(v *TelemetrySpecAccessLoggingMatchArgs) TelemetrySpecAccessLoggingMatchPtrInput {
	return (*telemetrySpecAccessLoggingMatchPtrType)(v)
}

func (*telemetrySpecAccessLoggingMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingMatch)(nil)).Elem()
}

func (i *telemetrySpecAccessLoggingMatchPtrType) ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput {
	return i.ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecAccessLoggingMatchPtrType) ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingMatchPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingMatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingMatchOutput) ToTelemetrySpecAccessLoggingMatchOutput() TelemetrySpecAccessLoggingMatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchOutput) ToTelemetrySpecAccessLoggingMatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchOutput) ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput {
	return o.ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecAccessLoggingMatchOutput) ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecAccessLoggingMatch) *TelemetrySpecAccessLoggingMatch {
		return &v
	}).(TelemetrySpecAccessLoggingMatchPtrOutput)
}

// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecAccessLoggingMatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingMatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingMatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingMatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingMatchPtrOutput) ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchPtrOutput) ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchPtrOutput) Elem() TelemetrySpecAccessLoggingMatchOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingMatch) TelemetrySpecAccessLoggingMatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecAccessLoggingMatch
		return ret
	}).(TelemetrySpecAccessLoggingMatchOutput)
}

// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecAccessLoggingMatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingMatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatchPatch struct {
	// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecAccessLoggingMatchPatchInput is an input type that accepts TelemetrySpecAccessLoggingMatchPatchArgs and TelemetrySpecAccessLoggingMatchPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingMatchPatchInput` via:
//
//	TelemetrySpecAccessLoggingMatchPatchArgs{...}
type TelemetrySpecAccessLoggingMatchPatchInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingMatchPatchOutput() TelemetrySpecAccessLoggingMatchPatchOutput
	ToTelemetrySpecAccessLoggingMatchPatchOutputWithContext(context.Context) TelemetrySpecAccessLoggingMatchPatchOutput
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatchPatchArgs struct {
	// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecAccessLoggingMatchPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingMatchPatch)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingMatchPatchArgs) ToTelemetrySpecAccessLoggingMatchPatchOutput() TelemetrySpecAccessLoggingMatchPatchOutput {
	return i.ToTelemetrySpecAccessLoggingMatchPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingMatchPatchArgs) ToTelemetrySpecAccessLoggingMatchPatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingMatchPatchOutput)
}

func (i TelemetrySpecAccessLoggingMatchPatchArgs) ToTelemetrySpecAccessLoggingMatchPatchPtrOutput() TelemetrySpecAccessLoggingMatchPatchPtrOutput {
	return i.ToTelemetrySpecAccessLoggingMatchPatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingMatchPatchArgs) ToTelemetrySpecAccessLoggingMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingMatchPatchOutput).ToTelemetrySpecAccessLoggingMatchPatchPtrOutputWithContext(ctx)
}

// TelemetrySpecAccessLoggingMatchPatchPtrInput is an input type that accepts TelemetrySpecAccessLoggingMatchPatchArgs, TelemetrySpecAccessLoggingMatchPatchPtr and TelemetrySpecAccessLoggingMatchPatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingMatchPatchPtrInput` via:
//
//	        TelemetrySpecAccessLoggingMatchPatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecAccessLoggingMatchPatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingMatchPatchPtrOutput() TelemetrySpecAccessLoggingMatchPatchPtrOutput
	ToTelemetrySpecAccessLoggingMatchPatchPtrOutputWithContext(context.Context) TelemetrySpecAccessLoggingMatchPatchPtrOutput
}

type telemetrySpecAccessLoggingMatchPatchPtrType TelemetrySpecAccessLoggingMatchPatchArgs

func TelemetrySpecAccessLoggingMatchPatchPtr(v *TelemetrySpecAccessLoggingMatchPatchArgs) TelemetrySpecAccessLoggingMatchPatchPtrInput {
	return (*telemetrySpecAccessLoggingMatchPatchPtrType)(v)
}

func (*telemetrySpecAccessLoggingMatchPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingMatchPatch)(nil)).Elem()
}

func (i *telemetrySpecAccessLoggingMatchPatchPtrType) ToTelemetrySpecAccessLoggingMatchPatchPtrOutput() TelemetrySpecAccessLoggingMatchPatchPtrOutput {
	return i.ToTelemetrySpecAccessLoggingMatchPatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecAccessLoggingMatchPatchPtrType) ToTelemetrySpecAccessLoggingMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingMatchPatchPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatchPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingMatchPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingMatchPatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingMatchPatchOutput) ToTelemetrySpecAccessLoggingMatchPatchOutput() TelemetrySpecAccessLoggingMatchPatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchPatchOutput) ToTelemetrySpecAccessLoggingMatchPatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchPatchOutput) ToTelemetrySpecAccessLoggingMatchPatchPtrOutput() TelemetrySpecAccessLoggingMatchPatchPtrOutput {
	return o.ToTelemetrySpecAccessLoggingMatchPatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecAccessLoggingMatchPatchOutput) ToTelemetrySpecAccessLoggingMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecAccessLoggingMatchPatch) *TelemetrySpecAccessLoggingMatchPatch {
		return &v
	}).(TelemetrySpecAccessLoggingMatchPatchPtrOutput)
}

// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecAccessLoggingMatchPatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingMatchPatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingMatchPatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingMatchPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingMatchPatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingMatchPatchPtrOutput) ToTelemetrySpecAccessLoggingMatchPatchPtrOutput() TelemetrySpecAccessLoggingMatchPatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchPatchPtrOutput) ToTelemetrySpecAccessLoggingMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchPatchPtrOutput) Elem() TelemetrySpecAccessLoggingMatchPatchOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingMatchPatch) TelemetrySpecAccessLoggingMatchPatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecAccessLoggingMatchPatch
		return ret
	}).(TelemetrySpecAccessLoggingMatchPatchOutput)
}

// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecAccessLoggingMatchPatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingMatchPatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingPatch struct {
	// Controls logging.
	Disabled *bool                                  `pulumi:"disabled"`
	Filter   *TelemetrySpecAccessLoggingFilterPatch `pulumi:"filter"`
	Match    *TelemetrySpecAccessLoggingMatchPatch  `pulumi:"match"`
	// Optional.
	Providers []TelemetrySpecAccessLoggingProvidersPatch `pulumi:"providers"`
}

// TelemetrySpecAccessLoggingPatchInput is an input type that accepts TelemetrySpecAccessLoggingPatchArgs and TelemetrySpecAccessLoggingPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingPatchInput` via:
//
//	TelemetrySpecAccessLoggingPatchArgs{...}
type TelemetrySpecAccessLoggingPatchInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingPatchOutput() TelemetrySpecAccessLoggingPatchOutput
	ToTelemetrySpecAccessLoggingPatchOutputWithContext(context.Context) TelemetrySpecAccessLoggingPatchOutput
}

type TelemetrySpecAccessLoggingPatchArgs struct {
	// Controls logging.
	Disabled pulumi.BoolPtrInput                           `pulumi:"disabled"`
	Filter   TelemetrySpecAccessLoggingFilterPatchPtrInput `pulumi:"filter"`
	Match    TelemetrySpecAccessLoggingMatchPatchPtrInput  `pulumi:"match"`
	// Optional.
	Providers TelemetrySpecAccessLoggingProvidersPatchArrayInput `pulumi:"providers"`
}

func (TelemetrySpecAccessLoggingPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingPatch)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingPatchArgs) ToTelemetrySpecAccessLoggingPatchOutput() TelemetrySpecAccessLoggingPatchOutput {
	return i.ToTelemetrySpecAccessLoggingPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingPatchArgs) ToTelemetrySpecAccessLoggingPatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingPatchOutput)
}

// TelemetrySpecAccessLoggingPatchArrayInput is an input type that accepts TelemetrySpecAccessLoggingPatchArray and TelemetrySpecAccessLoggingPatchArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingPatchArrayInput` via:
//
//	TelemetrySpecAccessLoggingPatchArray{ TelemetrySpecAccessLoggingPatchArgs{...} }
type TelemetrySpecAccessLoggingPatchArrayInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingPatchArrayOutput() TelemetrySpecAccessLoggingPatchArrayOutput
	ToTelemetrySpecAccessLoggingPatchArrayOutputWithContext(context.Context) TelemetrySpecAccessLoggingPatchArrayOutput
}

type TelemetrySpecAccessLoggingPatchArray []TelemetrySpecAccessLoggingPatchInput

func (TelemetrySpecAccessLoggingPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLoggingPatch)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingPatchArray) ToTelemetrySpecAccessLoggingPatchArrayOutput() TelemetrySpecAccessLoggingPatchArrayOutput {
	return i.ToTelemetrySpecAccessLoggingPatchArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingPatchArray) ToTelemetrySpecAccessLoggingPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingPatchArrayOutput)
}

type TelemetrySpecAccessLoggingPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingPatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingPatchOutput) ToTelemetrySpecAccessLoggingPatchOutput() TelemetrySpecAccessLoggingPatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingPatchOutput) ToTelemetrySpecAccessLoggingPatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingPatchOutput {
	return o
}

// Controls logging.
func (o TelemetrySpecAccessLoggingPatchOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingPatch) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o TelemetrySpecAccessLoggingPatchOutput) Filter() TelemetrySpecAccessLoggingFilterPatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingPatch) *TelemetrySpecAccessLoggingFilterPatch { return v.Filter }).(TelemetrySpecAccessLoggingFilterPatchPtrOutput)
}

func (o TelemetrySpecAccessLoggingPatchOutput) Match() TelemetrySpecAccessLoggingMatchPatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingPatch) *TelemetrySpecAccessLoggingMatchPatch { return v.Match }).(TelemetrySpecAccessLoggingMatchPatchPtrOutput)
}

// Optional.
func (o TelemetrySpecAccessLoggingPatchOutput) Providers() TelemetrySpecAccessLoggingProvidersPatchArrayOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingPatch) []TelemetrySpecAccessLoggingProvidersPatch { return v.Providers }).(TelemetrySpecAccessLoggingProvidersPatchArrayOutput)
}

type TelemetrySpecAccessLoggingPatchArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLoggingPatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingPatchArrayOutput) ToTelemetrySpecAccessLoggingPatchArrayOutput() TelemetrySpecAccessLoggingPatchArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingPatchArrayOutput) ToTelemetrySpecAccessLoggingPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingPatchArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingPatchArrayOutput) Index(i pulumi.IntInput) TelemetrySpecAccessLoggingPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecAccessLoggingPatch {
		return vs[0].([]TelemetrySpecAccessLoggingPatch)[vs[1].(int)]
	}).(TelemetrySpecAccessLoggingPatchOutput)
}

type TelemetrySpecAccessLoggingProviders struct {
	// Required.
	Name *string `pulumi:"name"`
}

// TelemetrySpecAccessLoggingProvidersInput is an input type that accepts TelemetrySpecAccessLoggingProvidersArgs and TelemetrySpecAccessLoggingProvidersOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingProvidersInput` via:
//
//	TelemetrySpecAccessLoggingProvidersArgs{...}
type TelemetrySpecAccessLoggingProvidersInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingProvidersOutput() TelemetrySpecAccessLoggingProvidersOutput
	ToTelemetrySpecAccessLoggingProvidersOutputWithContext(context.Context) TelemetrySpecAccessLoggingProvidersOutput
}

type TelemetrySpecAccessLoggingProvidersArgs struct {
	// Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TelemetrySpecAccessLoggingProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingProviders)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingProvidersArgs) ToTelemetrySpecAccessLoggingProvidersOutput() TelemetrySpecAccessLoggingProvidersOutput {
	return i.ToTelemetrySpecAccessLoggingProvidersOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingProvidersArgs) ToTelemetrySpecAccessLoggingProvidersOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingProvidersOutput)
}

// TelemetrySpecAccessLoggingProvidersArrayInput is an input type that accepts TelemetrySpecAccessLoggingProvidersArray and TelemetrySpecAccessLoggingProvidersArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingProvidersArrayInput` via:
//
//	TelemetrySpecAccessLoggingProvidersArray{ TelemetrySpecAccessLoggingProvidersArgs{...} }
type TelemetrySpecAccessLoggingProvidersArrayInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingProvidersArrayOutput() TelemetrySpecAccessLoggingProvidersArrayOutput
	ToTelemetrySpecAccessLoggingProvidersArrayOutputWithContext(context.Context) TelemetrySpecAccessLoggingProvidersArrayOutput
}

type TelemetrySpecAccessLoggingProvidersArray []TelemetrySpecAccessLoggingProvidersInput

func (TelemetrySpecAccessLoggingProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLoggingProviders)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingProvidersArray) ToTelemetrySpecAccessLoggingProvidersArrayOutput() TelemetrySpecAccessLoggingProvidersArrayOutput {
	return i.ToTelemetrySpecAccessLoggingProvidersArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingProvidersArray) ToTelemetrySpecAccessLoggingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingProvidersArrayOutput)
}

type TelemetrySpecAccessLoggingProvidersOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingProviders)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingProvidersOutput) ToTelemetrySpecAccessLoggingProvidersOutput() TelemetrySpecAccessLoggingProvidersOutput {
	return o
}

func (o TelemetrySpecAccessLoggingProvidersOutput) ToTelemetrySpecAccessLoggingProvidersOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersOutput {
	return o
}

// Required.
func (o TelemetrySpecAccessLoggingProvidersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingProviders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingProvidersArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLoggingProviders)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingProvidersArrayOutput) ToTelemetrySpecAccessLoggingProvidersArrayOutput() TelemetrySpecAccessLoggingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingProvidersArrayOutput) ToTelemetrySpecAccessLoggingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingProvidersArrayOutput) Index(i pulumi.IntInput) TelemetrySpecAccessLoggingProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecAccessLoggingProviders {
		return vs[0].([]TelemetrySpecAccessLoggingProviders)[vs[1].(int)]
	}).(TelemetrySpecAccessLoggingProvidersOutput)
}

type TelemetrySpecAccessLoggingProvidersPatch struct {
	// Required.
	Name *string `pulumi:"name"`
}

// TelemetrySpecAccessLoggingProvidersPatchInput is an input type that accepts TelemetrySpecAccessLoggingProvidersPatchArgs and TelemetrySpecAccessLoggingProvidersPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingProvidersPatchInput` via:
//
//	TelemetrySpecAccessLoggingProvidersPatchArgs{...}
type TelemetrySpecAccessLoggingProvidersPatchInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingProvidersPatchOutput() TelemetrySpecAccessLoggingProvidersPatchOutput
	ToTelemetrySpecAccessLoggingProvidersPatchOutputWithContext(context.Context) TelemetrySpecAccessLoggingProvidersPatchOutput
}

type TelemetrySpecAccessLoggingProvidersPatchArgs struct {
	// Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TelemetrySpecAccessLoggingProvidersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingProvidersPatch)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingProvidersPatchArgs) ToTelemetrySpecAccessLoggingProvidersPatchOutput() TelemetrySpecAccessLoggingProvidersPatchOutput {
	return i.ToTelemetrySpecAccessLoggingProvidersPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingProvidersPatchArgs) ToTelemetrySpecAccessLoggingProvidersPatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingProvidersPatchOutput)
}

// TelemetrySpecAccessLoggingProvidersPatchArrayInput is an input type that accepts TelemetrySpecAccessLoggingProvidersPatchArray and TelemetrySpecAccessLoggingProvidersPatchArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingProvidersPatchArrayInput` via:
//
//	TelemetrySpecAccessLoggingProvidersPatchArray{ TelemetrySpecAccessLoggingProvidersPatchArgs{...} }
type TelemetrySpecAccessLoggingProvidersPatchArrayInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingProvidersPatchArrayOutput() TelemetrySpecAccessLoggingProvidersPatchArrayOutput
	ToTelemetrySpecAccessLoggingProvidersPatchArrayOutputWithContext(context.Context) TelemetrySpecAccessLoggingProvidersPatchArrayOutput
}

type TelemetrySpecAccessLoggingProvidersPatchArray []TelemetrySpecAccessLoggingProvidersPatchInput

func (TelemetrySpecAccessLoggingProvidersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLoggingProvidersPatch)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingProvidersPatchArray) ToTelemetrySpecAccessLoggingProvidersPatchArrayOutput() TelemetrySpecAccessLoggingProvidersPatchArrayOutput {
	return i.ToTelemetrySpecAccessLoggingProvidersPatchArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingProvidersPatchArray) ToTelemetrySpecAccessLoggingProvidersPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingProvidersPatchArrayOutput)
}

type TelemetrySpecAccessLoggingProvidersPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingProvidersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingProvidersPatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingProvidersPatchOutput) ToTelemetrySpecAccessLoggingProvidersPatchOutput() TelemetrySpecAccessLoggingProvidersPatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingProvidersPatchOutput) ToTelemetrySpecAccessLoggingProvidersPatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersPatchOutput {
	return o
}

// Required.
func (o TelemetrySpecAccessLoggingProvidersPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingProvidersPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingProvidersPatchArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingProvidersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLoggingProvidersPatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingProvidersPatchArrayOutput) ToTelemetrySpecAccessLoggingProvidersPatchArrayOutput() TelemetrySpecAccessLoggingProvidersPatchArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingProvidersPatchArrayOutput) ToTelemetrySpecAccessLoggingProvidersPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersPatchArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingProvidersPatchArrayOutput) Index(i pulumi.IntInput) TelemetrySpecAccessLoggingProvidersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecAccessLoggingProvidersPatch {
		return vs[0].([]TelemetrySpecAccessLoggingProvidersPatch)[vs[1].(int)]
	}).(TelemetrySpecAccessLoggingProvidersPatchOutput)
}

type TelemetrySpecMetrics struct {
	// Optional.
	Overrides []TelemetrySpecMetricsOverrides `pulumi:"overrides"`
	// Optional.
	Providers []TelemetrySpecMetricsProviders `pulumi:"providers"`
	// Optional.
	ReportingInterval *string `pulumi:"reportingInterval"`
}

// TelemetrySpecMetricsInput is an input type that accepts TelemetrySpecMetricsArgs and TelemetrySpecMetricsOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsInput` via:
//
//	TelemetrySpecMetricsArgs{...}
type TelemetrySpecMetricsInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOutput() TelemetrySpecMetricsOutput
	ToTelemetrySpecMetricsOutputWithContext(context.Context) TelemetrySpecMetricsOutput
}

type TelemetrySpecMetricsArgs struct {
	// Optional.
	Overrides TelemetrySpecMetricsOverridesArrayInput `pulumi:"overrides"`
	// Optional.
	Providers TelemetrySpecMetricsProvidersArrayInput `pulumi:"providers"`
	// Optional.
	ReportingInterval pulumi.StringPtrInput `pulumi:"reportingInterval"`
}

func (TelemetrySpecMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetrics)(nil)).Elem()
}

func (i TelemetrySpecMetricsArgs) ToTelemetrySpecMetricsOutput() TelemetrySpecMetricsOutput {
	return i.ToTelemetrySpecMetricsOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsArgs) ToTelemetrySpecMetricsOutputWithContext(ctx context.Context) TelemetrySpecMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOutput)
}

// TelemetrySpecMetricsArrayInput is an input type that accepts TelemetrySpecMetricsArray and TelemetrySpecMetricsArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsArrayInput` via:
//
//	TelemetrySpecMetricsArray{ TelemetrySpecMetricsArgs{...} }
type TelemetrySpecMetricsArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsArrayOutput() TelemetrySpecMetricsArrayOutput
	ToTelemetrySpecMetricsArrayOutputWithContext(context.Context) TelemetrySpecMetricsArrayOutput
}

type TelemetrySpecMetricsArray []TelemetrySpecMetricsInput

func (TelemetrySpecMetricsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetrics)(nil)).Elem()
}

func (i TelemetrySpecMetricsArray) ToTelemetrySpecMetricsArrayOutput() TelemetrySpecMetricsArrayOutput {
	return i.ToTelemetrySpecMetricsArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsArray) ToTelemetrySpecMetricsArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsArrayOutput)
}

type TelemetrySpecMetricsOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetrics)(nil)).Elem()
}

func (o TelemetrySpecMetricsOutput) ToTelemetrySpecMetricsOutput() TelemetrySpecMetricsOutput {
	return o
}

func (o TelemetrySpecMetricsOutput) ToTelemetrySpecMetricsOutputWithContext(ctx context.Context) TelemetrySpecMetricsOutput {
	return o
}

// Optional.
func (o TelemetrySpecMetricsOutput) Overrides() TelemetrySpecMetricsOverridesArrayOutput {
	return o.ApplyT(func(v TelemetrySpecMetrics) []TelemetrySpecMetricsOverrides { return v.Overrides }).(TelemetrySpecMetricsOverridesArrayOutput)
}

// Optional.
func (o TelemetrySpecMetricsOutput) Providers() TelemetrySpecMetricsProvidersArrayOutput {
	return o.ApplyT(func(v TelemetrySpecMetrics) []TelemetrySpecMetricsProviders { return v.Providers }).(TelemetrySpecMetricsProvidersArrayOutput)
}

// Optional.
func (o TelemetrySpecMetricsOutput) ReportingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetrics) *string { return v.ReportingInterval }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetrics)(nil)).Elem()
}

func (o TelemetrySpecMetricsArrayOutput) ToTelemetrySpecMetricsArrayOutput() TelemetrySpecMetricsArrayOutput {
	return o
}

func (o TelemetrySpecMetricsArrayOutput) ToTelemetrySpecMetricsArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsArrayOutput {
	return o
}

func (o TelemetrySpecMetricsArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetrics {
		return vs[0].([]TelemetrySpecMetrics)[vs[1].(int)]
	}).(TelemetrySpecMetricsOutput)
}

type TelemetrySpecMetricsOverrides struct {
	// Optional.
	Disabled *bool                               `pulumi:"disabled"`
	Match    *TelemetrySpecMetricsOverridesMatch `pulumi:"match"`
	// Optional.
	TagOverrides map[string]map[string]string `pulumi:"tagOverrides"`
}

// TelemetrySpecMetricsOverridesInput is an input type that accepts TelemetrySpecMetricsOverridesArgs and TelemetrySpecMetricsOverridesOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesInput` via:
//
//	TelemetrySpecMetricsOverridesArgs{...}
type TelemetrySpecMetricsOverridesInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesOutput() TelemetrySpecMetricsOverridesOutput
	ToTelemetrySpecMetricsOverridesOutputWithContext(context.Context) TelemetrySpecMetricsOverridesOutput
}

type TelemetrySpecMetricsOverridesArgs struct {
	// Optional.
	Disabled pulumi.BoolPtrInput                        `pulumi:"disabled"`
	Match    TelemetrySpecMetricsOverridesMatchPtrInput `pulumi:"match"`
	// Optional.
	TagOverrides pulumi.StringMapMapInput `pulumi:"tagOverrides"`
}

func (TelemetrySpecMetricsOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesArgs) ToTelemetrySpecMetricsOverridesOutput() TelemetrySpecMetricsOverridesOutput {
	return i.ToTelemetrySpecMetricsOverridesOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesArgs) ToTelemetrySpecMetricsOverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesOutput)
}

// TelemetrySpecMetricsOverridesArrayInput is an input type that accepts TelemetrySpecMetricsOverridesArray and TelemetrySpecMetricsOverridesArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesArrayInput` via:
//
//	TelemetrySpecMetricsOverridesArray{ TelemetrySpecMetricsOverridesArgs{...} }
type TelemetrySpecMetricsOverridesArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesArrayOutput() TelemetrySpecMetricsOverridesArrayOutput
	ToTelemetrySpecMetricsOverridesArrayOutputWithContext(context.Context) TelemetrySpecMetricsOverridesArrayOutput
}

type TelemetrySpecMetricsOverridesArray []TelemetrySpecMetricsOverridesInput

func (TelemetrySpecMetricsOverridesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesArray) ToTelemetrySpecMetricsOverridesArrayOutput() TelemetrySpecMetricsOverridesArrayOutput {
	return i.ToTelemetrySpecMetricsOverridesArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesArray) ToTelemetrySpecMetricsOverridesArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesArrayOutput)
}

type TelemetrySpecMetricsOverridesOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesOutput) ToTelemetrySpecMetricsOverridesOutput() TelemetrySpecMetricsOverridesOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesOutput) ToTelemetrySpecMetricsOverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesOutput {
	return o
}

// Optional.
func (o TelemetrySpecMetricsOverridesOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverrides) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o TelemetrySpecMetricsOverridesOutput) Match() TelemetrySpecMetricsOverridesMatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverrides) *TelemetrySpecMetricsOverridesMatch { return v.Match }).(TelemetrySpecMetricsOverridesMatchPtrOutput)
}

// Optional.
func (o TelemetrySpecMetricsOverridesOutput) TagOverrides() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverrides) map[string]map[string]string { return v.TagOverrides }).(pulumi.StringMapMapOutput)
}

type TelemetrySpecMetricsOverridesArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesArrayOutput) ToTelemetrySpecMetricsOverridesArrayOutput() TelemetrySpecMetricsOverridesArrayOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesArrayOutput) ToTelemetrySpecMetricsOverridesArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesArrayOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsOverridesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetricsOverrides {
		return vs[0].([]TelemetrySpecMetricsOverrides)[vs[1].(int)]
	}).(TelemetrySpecMetricsOverridesOutput)
}

// Match allows providing the scope of the override.
type TelemetrySpecMetricsOverridesMatch struct {
	// Allows free-form specification of a metric.
	CustomMetric *string `pulumi:"customMetric"`
	// One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
	//
	// Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
	Metric *string `pulumi:"metric"`
	// Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecMetricsOverridesMatchInput is an input type that accepts TelemetrySpecMetricsOverridesMatchArgs and TelemetrySpecMetricsOverridesMatchOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesMatchInput` via:
//
//	TelemetrySpecMetricsOverridesMatchArgs{...}
type TelemetrySpecMetricsOverridesMatchInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesMatchOutput() TelemetrySpecMetricsOverridesMatchOutput
	ToTelemetrySpecMetricsOverridesMatchOutputWithContext(context.Context) TelemetrySpecMetricsOverridesMatchOutput
}

// Match allows providing the scope of the override.
type TelemetrySpecMetricsOverridesMatchArgs struct {
	// Allows free-form specification of a metric.
	CustomMetric pulumi.StringPtrInput `pulumi:"customMetric"`
	// One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
	//
	// Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
	Metric pulumi.StringPtrInput `pulumi:"metric"`
	// Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecMetricsOverridesMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesMatch)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesMatchArgs) ToTelemetrySpecMetricsOverridesMatchOutput() TelemetrySpecMetricsOverridesMatchOutput {
	return i.ToTelemetrySpecMetricsOverridesMatchOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesMatchArgs) ToTelemetrySpecMetricsOverridesMatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesMatchOutput)
}

func (i TelemetrySpecMetricsOverridesMatchArgs) ToTelemetrySpecMetricsOverridesMatchPtrOutput() TelemetrySpecMetricsOverridesMatchPtrOutput {
	return i.ToTelemetrySpecMetricsOverridesMatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesMatchArgs) ToTelemetrySpecMetricsOverridesMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesMatchOutput).ToTelemetrySpecMetricsOverridesMatchPtrOutputWithContext(ctx)
}

// TelemetrySpecMetricsOverridesMatchPtrInput is an input type that accepts TelemetrySpecMetricsOverridesMatchArgs, TelemetrySpecMetricsOverridesMatchPtr and TelemetrySpecMetricsOverridesMatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesMatchPtrInput` via:
//
//	        TelemetrySpecMetricsOverridesMatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecMetricsOverridesMatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesMatchPtrOutput() TelemetrySpecMetricsOverridesMatchPtrOutput
	ToTelemetrySpecMetricsOverridesMatchPtrOutputWithContext(context.Context) TelemetrySpecMetricsOverridesMatchPtrOutput
}

type telemetrySpecMetricsOverridesMatchPtrType TelemetrySpecMetricsOverridesMatchArgs

func TelemetrySpecMetricsOverridesMatchPtr(v *TelemetrySpecMetricsOverridesMatchArgs) TelemetrySpecMetricsOverridesMatchPtrInput {
	return (*telemetrySpecMetricsOverridesMatchPtrType)(v)
}

func (*telemetrySpecMetricsOverridesMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecMetricsOverridesMatch)(nil)).Elem()
}

func (i *telemetrySpecMetricsOverridesMatchPtrType) ToTelemetrySpecMetricsOverridesMatchPtrOutput() TelemetrySpecMetricsOverridesMatchPtrOutput {
	return i.ToTelemetrySpecMetricsOverridesMatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecMetricsOverridesMatchPtrType) ToTelemetrySpecMetricsOverridesMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesMatchPtrOutput)
}

// Match allows providing the scope of the override.
type TelemetrySpecMetricsOverridesMatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesMatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesMatchOutput) ToTelemetrySpecMetricsOverridesMatchOutput() TelemetrySpecMetricsOverridesMatchOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesMatchOutput) ToTelemetrySpecMetricsOverridesMatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesMatchOutput) ToTelemetrySpecMetricsOverridesMatchPtrOutput() TelemetrySpecMetricsOverridesMatchPtrOutput {
	return o.ToTelemetrySpecMetricsOverridesMatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecMetricsOverridesMatchOutput) ToTelemetrySpecMetricsOverridesMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecMetricsOverridesMatch) *TelemetrySpecMetricsOverridesMatch {
		return &v
	}).(TelemetrySpecMetricsOverridesMatchPtrOutput)
}

// Allows free-form specification of a metric.
func (o TelemetrySpecMetricsOverridesMatchOutput) CustomMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesMatch) *string { return v.CustomMetric }).(pulumi.StringPtrOutput)
}

// One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
//
// Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
func (o TelemetrySpecMetricsOverridesMatchOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesMatch) *string { return v.Metric }).(pulumi.StringPtrOutput)
}

// Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecMetricsOverridesMatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesMatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsOverridesMatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecMetricsOverridesMatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesMatchPtrOutput) ToTelemetrySpecMetricsOverridesMatchPtrOutput() TelemetrySpecMetricsOverridesMatchPtrOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesMatchPtrOutput) ToTelemetrySpecMetricsOverridesMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPtrOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesMatchPtrOutput) Elem() TelemetrySpecMetricsOverridesMatchOutput {
	return o.ApplyT(func(v *TelemetrySpecMetricsOverridesMatch) TelemetrySpecMetricsOverridesMatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecMetricsOverridesMatch
		return ret
	}).(TelemetrySpecMetricsOverridesMatchOutput)
}

// Allows free-form specification of a metric.
func (o TelemetrySpecMetricsOverridesMatchPtrOutput) CustomMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecMetricsOverridesMatch) *string {
		if v == nil {
			return nil
		}
		return v.CustomMetric
	}).(pulumi.StringPtrOutput)
}

// One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
//
// Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
func (o TelemetrySpecMetricsOverridesMatchPtrOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecMetricsOverridesMatch) *string {
		if v == nil {
			return nil
		}
		return v.Metric
	}).(pulumi.StringPtrOutput)
}

// Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecMetricsOverridesMatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecMetricsOverridesMatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Match allows providing the scope of the override.
type TelemetrySpecMetricsOverridesMatchPatch struct {
	// Allows free-form specification of a metric.
	CustomMetric *string `pulumi:"customMetric"`
	// One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
	//
	// Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
	Metric *string `pulumi:"metric"`
	// Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecMetricsOverridesMatchPatchInput is an input type that accepts TelemetrySpecMetricsOverridesMatchPatchArgs and TelemetrySpecMetricsOverridesMatchPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesMatchPatchInput` via:
//
//	TelemetrySpecMetricsOverridesMatchPatchArgs{...}
type TelemetrySpecMetricsOverridesMatchPatchInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesMatchPatchOutput() TelemetrySpecMetricsOverridesMatchPatchOutput
	ToTelemetrySpecMetricsOverridesMatchPatchOutputWithContext(context.Context) TelemetrySpecMetricsOverridesMatchPatchOutput
}

// Match allows providing the scope of the override.
type TelemetrySpecMetricsOverridesMatchPatchArgs struct {
	// Allows free-form specification of a metric.
	CustomMetric pulumi.StringPtrInput `pulumi:"customMetric"`
	// One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
	//
	// Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
	Metric pulumi.StringPtrInput `pulumi:"metric"`
	// Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecMetricsOverridesMatchPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesMatchPatch)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesMatchPatchArgs) ToTelemetrySpecMetricsOverridesMatchPatchOutput() TelemetrySpecMetricsOverridesMatchPatchOutput {
	return i.ToTelemetrySpecMetricsOverridesMatchPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesMatchPatchArgs) ToTelemetrySpecMetricsOverridesMatchPatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesMatchPatchOutput)
}

func (i TelemetrySpecMetricsOverridesMatchPatchArgs) ToTelemetrySpecMetricsOverridesMatchPatchPtrOutput() TelemetrySpecMetricsOverridesMatchPatchPtrOutput {
	return i.ToTelemetrySpecMetricsOverridesMatchPatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesMatchPatchArgs) ToTelemetrySpecMetricsOverridesMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesMatchPatchOutput).ToTelemetrySpecMetricsOverridesMatchPatchPtrOutputWithContext(ctx)
}

// TelemetrySpecMetricsOverridesMatchPatchPtrInput is an input type that accepts TelemetrySpecMetricsOverridesMatchPatchArgs, TelemetrySpecMetricsOverridesMatchPatchPtr and TelemetrySpecMetricsOverridesMatchPatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesMatchPatchPtrInput` via:
//
//	        TelemetrySpecMetricsOverridesMatchPatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecMetricsOverridesMatchPatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesMatchPatchPtrOutput() TelemetrySpecMetricsOverridesMatchPatchPtrOutput
	ToTelemetrySpecMetricsOverridesMatchPatchPtrOutputWithContext(context.Context) TelemetrySpecMetricsOverridesMatchPatchPtrOutput
}

type telemetrySpecMetricsOverridesMatchPatchPtrType TelemetrySpecMetricsOverridesMatchPatchArgs

func TelemetrySpecMetricsOverridesMatchPatchPtr(v *TelemetrySpecMetricsOverridesMatchPatchArgs) TelemetrySpecMetricsOverridesMatchPatchPtrInput {
	return (*telemetrySpecMetricsOverridesMatchPatchPtrType)(v)
}

func (*telemetrySpecMetricsOverridesMatchPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecMetricsOverridesMatchPatch)(nil)).Elem()
}

func (i *telemetrySpecMetricsOverridesMatchPatchPtrType) ToTelemetrySpecMetricsOverridesMatchPatchPtrOutput() TelemetrySpecMetricsOverridesMatchPatchPtrOutput {
	return i.ToTelemetrySpecMetricsOverridesMatchPatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecMetricsOverridesMatchPatchPtrType) ToTelemetrySpecMetricsOverridesMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesMatchPatchPtrOutput)
}

// Match allows providing the scope of the override.
type TelemetrySpecMetricsOverridesMatchPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesMatchPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesMatchPatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesMatchPatchOutput) ToTelemetrySpecMetricsOverridesMatchPatchOutput() TelemetrySpecMetricsOverridesMatchPatchOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesMatchPatchOutput) ToTelemetrySpecMetricsOverridesMatchPatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPatchOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesMatchPatchOutput) ToTelemetrySpecMetricsOverridesMatchPatchPtrOutput() TelemetrySpecMetricsOverridesMatchPatchPtrOutput {
	return o.ToTelemetrySpecMetricsOverridesMatchPatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecMetricsOverridesMatchPatchOutput) ToTelemetrySpecMetricsOverridesMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecMetricsOverridesMatchPatch) *TelemetrySpecMetricsOverridesMatchPatch {
		return &v
	}).(TelemetrySpecMetricsOverridesMatchPatchPtrOutput)
}

// Allows free-form specification of a metric.
func (o TelemetrySpecMetricsOverridesMatchPatchOutput) CustomMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesMatchPatch) *string { return v.CustomMetric }).(pulumi.StringPtrOutput)
}

// One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
//
// Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
func (o TelemetrySpecMetricsOverridesMatchPatchOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesMatchPatch) *string { return v.Metric }).(pulumi.StringPtrOutput)
}

// Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecMetricsOverridesMatchPatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesMatchPatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsOverridesMatchPatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesMatchPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecMetricsOverridesMatchPatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesMatchPatchPtrOutput) ToTelemetrySpecMetricsOverridesMatchPatchPtrOutput() TelemetrySpecMetricsOverridesMatchPatchPtrOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesMatchPatchPtrOutput) ToTelemetrySpecMetricsOverridesMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesMatchPatchPtrOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesMatchPatchPtrOutput) Elem() TelemetrySpecMetricsOverridesMatchPatchOutput {
	return o.ApplyT(func(v *TelemetrySpecMetricsOverridesMatchPatch) TelemetrySpecMetricsOverridesMatchPatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecMetricsOverridesMatchPatch
		return ret
	}).(TelemetrySpecMetricsOverridesMatchPatchOutput)
}

// Allows free-form specification of a metric.
func (o TelemetrySpecMetricsOverridesMatchPatchPtrOutput) CustomMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecMetricsOverridesMatchPatch) *string {
		if v == nil {
			return nil
		}
		return v.CustomMetric
	}).(pulumi.StringPtrOutput)
}

// One of the well-known [Istio Standard Metrics](https://istio.io/latest/docs/reference/config/metrics/).
//
// Valid Options: ALL_METRICS, REQUEST_COUNT, REQUEST_DURATION, REQUEST_SIZE, RESPONSE_SIZE, TCP_OPENED_CONNECTIONS, TCP_CLOSED_CONNECTIONS, TCP_SENT_BYTES, TCP_RECEIVED_BYTES, GRPC_REQUEST_MESSAGES, GRPC_RESPONSE_MESSAGES
func (o TelemetrySpecMetricsOverridesMatchPatchPtrOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecMetricsOverridesMatchPatch) *string {
		if v == nil {
			return nil
		}
		return v.Metric
	}).(pulumi.StringPtrOutput)
}

// Controls which mode of metrics generation is selected: `CLIENT`, `SERVER`, or `CLIENT_AND_SERVER`.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecMetricsOverridesMatchPatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecMetricsOverridesMatchPatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsOverridesPatch struct {
	// Optional.
	Disabled *bool                                    `pulumi:"disabled"`
	Match    *TelemetrySpecMetricsOverridesMatchPatch `pulumi:"match"`
	// Optional.
	TagOverrides map[string]map[string]string `pulumi:"tagOverrides"`
}

// TelemetrySpecMetricsOverridesPatchInput is an input type that accepts TelemetrySpecMetricsOverridesPatchArgs and TelemetrySpecMetricsOverridesPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesPatchInput` via:
//
//	TelemetrySpecMetricsOverridesPatchArgs{...}
type TelemetrySpecMetricsOverridesPatchInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesPatchOutput() TelemetrySpecMetricsOverridesPatchOutput
	ToTelemetrySpecMetricsOverridesPatchOutputWithContext(context.Context) TelemetrySpecMetricsOverridesPatchOutput
}

type TelemetrySpecMetricsOverridesPatchArgs struct {
	// Optional.
	Disabled pulumi.BoolPtrInput                             `pulumi:"disabled"`
	Match    TelemetrySpecMetricsOverridesMatchPatchPtrInput `pulumi:"match"`
	// Optional.
	TagOverrides pulumi.StringMapMapInput `pulumi:"tagOverrides"`
}

func (TelemetrySpecMetricsOverridesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesPatch)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesPatchArgs) ToTelemetrySpecMetricsOverridesPatchOutput() TelemetrySpecMetricsOverridesPatchOutput {
	return i.ToTelemetrySpecMetricsOverridesPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesPatchArgs) ToTelemetrySpecMetricsOverridesPatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesPatchOutput)
}

// TelemetrySpecMetricsOverridesPatchArrayInput is an input type that accepts TelemetrySpecMetricsOverridesPatchArray and TelemetrySpecMetricsOverridesPatchArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesPatchArrayInput` via:
//
//	TelemetrySpecMetricsOverridesPatchArray{ TelemetrySpecMetricsOverridesPatchArgs{...} }
type TelemetrySpecMetricsOverridesPatchArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesPatchArrayOutput() TelemetrySpecMetricsOverridesPatchArrayOutput
	ToTelemetrySpecMetricsOverridesPatchArrayOutputWithContext(context.Context) TelemetrySpecMetricsOverridesPatchArrayOutput
}

type TelemetrySpecMetricsOverridesPatchArray []TelemetrySpecMetricsOverridesPatchInput

func (TelemetrySpecMetricsOverridesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsOverridesPatch)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesPatchArray) ToTelemetrySpecMetricsOverridesPatchArrayOutput() TelemetrySpecMetricsOverridesPatchArrayOutput {
	return i.ToTelemetrySpecMetricsOverridesPatchArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesPatchArray) ToTelemetrySpecMetricsOverridesPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesPatchArrayOutput)
}

type TelemetrySpecMetricsOverridesPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesPatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesPatchOutput) ToTelemetrySpecMetricsOverridesPatchOutput() TelemetrySpecMetricsOverridesPatchOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesPatchOutput) ToTelemetrySpecMetricsOverridesPatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesPatchOutput {
	return o
}

// Optional.
func (o TelemetrySpecMetricsOverridesPatchOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesPatch) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o TelemetrySpecMetricsOverridesPatchOutput) Match() TelemetrySpecMetricsOverridesMatchPatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesPatch) *TelemetrySpecMetricsOverridesMatchPatch { return v.Match }).(TelemetrySpecMetricsOverridesMatchPatchPtrOutput)
}

// Optional.
func (o TelemetrySpecMetricsOverridesPatchOutput) TagOverrides() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesPatch) map[string]map[string]string { return v.TagOverrides }).(pulumi.StringMapMapOutput)
}

type TelemetrySpecMetricsOverridesPatchArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsOverridesPatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesPatchArrayOutput) ToTelemetrySpecMetricsOverridesPatchArrayOutput() TelemetrySpecMetricsOverridesPatchArrayOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesPatchArrayOutput) ToTelemetrySpecMetricsOverridesPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesPatchArrayOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesPatchArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsOverridesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetricsOverridesPatch {
		return vs[0].([]TelemetrySpecMetricsOverridesPatch)[vs[1].(int)]
	}).(TelemetrySpecMetricsOverridesPatchOutput)
}

type TelemetrySpecMetricsPatch struct {
	// Optional.
	Overrides []TelemetrySpecMetricsOverridesPatch `pulumi:"overrides"`
	// Optional.
	Providers []TelemetrySpecMetricsProvidersPatch `pulumi:"providers"`
	// Optional.
	ReportingInterval *string `pulumi:"reportingInterval"`
}

// TelemetrySpecMetricsPatchInput is an input type that accepts TelemetrySpecMetricsPatchArgs and TelemetrySpecMetricsPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsPatchInput` via:
//
//	TelemetrySpecMetricsPatchArgs{...}
type TelemetrySpecMetricsPatchInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsPatchOutput() TelemetrySpecMetricsPatchOutput
	ToTelemetrySpecMetricsPatchOutputWithContext(context.Context) TelemetrySpecMetricsPatchOutput
}

type TelemetrySpecMetricsPatchArgs struct {
	// Optional.
	Overrides TelemetrySpecMetricsOverridesPatchArrayInput `pulumi:"overrides"`
	// Optional.
	Providers TelemetrySpecMetricsProvidersPatchArrayInput `pulumi:"providers"`
	// Optional.
	ReportingInterval pulumi.StringPtrInput `pulumi:"reportingInterval"`
}

func (TelemetrySpecMetricsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsPatch)(nil)).Elem()
}

func (i TelemetrySpecMetricsPatchArgs) ToTelemetrySpecMetricsPatchOutput() TelemetrySpecMetricsPatchOutput {
	return i.ToTelemetrySpecMetricsPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsPatchArgs) ToTelemetrySpecMetricsPatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsPatchOutput)
}

// TelemetrySpecMetricsPatchArrayInput is an input type that accepts TelemetrySpecMetricsPatchArray and TelemetrySpecMetricsPatchArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsPatchArrayInput` via:
//
//	TelemetrySpecMetricsPatchArray{ TelemetrySpecMetricsPatchArgs{...} }
type TelemetrySpecMetricsPatchArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsPatchArrayOutput() TelemetrySpecMetricsPatchArrayOutput
	ToTelemetrySpecMetricsPatchArrayOutputWithContext(context.Context) TelemetrySpecMetricsPatchArrayOutput
}

type TelemetrySpecMetricsPatchArray []TelemetrySpecMetricsPatchInput

func (TelemetrySpecMetricsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsPatch)(nil)).Elem()
}

func (i TelemetrySpecMetricsPatchArray) ToTelemetrySpecMetricsPatchArrayOutput() TelemetrySpecMetricsPatchArrayOutput {
	return i.ToTelemetrySpecMetricsPatchArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsPatchArray) ToTelemetrySpecMetricsPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsPatchArrayOutput)
}

type TelemetrySpecMetricsPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsPatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsPatchOutput) ToTelemetrySpecMetricsPatchOutput() TelemetrySpecMetricsPatchOutput {
	return o
}

func (o TelemetrySpecMetricsPatchOutput) ToTelemetrySpecMetricsPatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsPatchOutput {
	return o
}

// Optional.
func (o TelemetrySpecMetricsPatchOutput) Overrides() TelemetrySpecMetricsOverridesPatchArrayOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsPatch) []TelemetrySpecMetricsOverridesPatch { return v.Overrides }).(TelemetrySpecMetricsOverridesPatchArrayOutput)
}

// Optional.
func (o TelemetrySpecMetricsPatchOutput) Providers() TelemetrySpecMetricsProvidersPatchArrayOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsPatch) []TelemetrySpecMetricsProvidersPatch { return v.Providers }).(TelemetrySpecMetricsProvidersPatchArrayOutput)
}

// Optional.
func (o TelemetrySpecMetricsPatchOutput) ReportingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsPatch) *string { return v.ReportingInterval }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsPatchArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsPatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsPatchArrayOutput) ToTelemetrySpecMetricsPatchArrayOutput() TelemetrySpecMetricsPatchArrayOutput {
	return o
}

func (o TelemetrySpecMetricsPatchArrayOutput) ToTelemetrySpecMetricsPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsPatchArrayOutput {
	return o
}

func (o TelemetrySpecMetricsPatchArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetricsPatch {
		return vs[0].([]TelemetrySpecMetricsPatch)[vs[1].(int)]
	}).(TelemetrySpecMetricsPatchOutput)
}

type TelemetrySpecMetricsProviders struct {
	// Required.
	Name *string `pulumi:"name"`
}

// TelemetrySpecMetricsProvidersInput is an input type that accepts TelemetrySpecMetricsProvidersArgs and TelemetrySpecMetricsProvidersOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsProvidersInput` via:
//
//	TelemetrySpecMetricsProvidersArgs{...}
type TelemetrySpecMetricsProvidersInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsProvidersOutput() TelemetrySpecMetricsProvidersOutput
	ToTelemetrySpecMetricsProvidersOutputWithContext(context.Context) TelemetrySpecMetricsProvidersOutput
}

type TelemetrySpecMetricsProvidersArgs struct {
	// Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TelemetrySpecMetricsProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (i TelemetrySpecMetricsProvidersArgs) ToTelemetrySpecMetricsProvidersOutput() TelemetrySpecMetricsProvidersOutput {
	return i.ToTelemetrySpecMetricsProvidersOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsProvidersArgs) ToTelemetrySpecMetricsProvidersOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsProvidersOutput)
}

// TelemetrySpecMetricsProvidersArrayInput is an input type that accepts TelemetrySpecMetricsProvidersArray and TelemetrySpecMetricsProvidersArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsProvidersArrayInput` via:
//
//	TelemetrySpecMetricsProvidersArray{ TelemetrySpecMetricsProvidersArgs{...} }
type TelemetrySpecMetricsProvidersArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsProvidersArrayOutput() TelemetrySpecMetricsProvidersArrayOutput
	ToTelemetrySpecMetricsProvidersArrayOutputWithContext(context.Context) TelemetrySpecMetricsProvidersArrayOutput
}

type TelemetrySpecMetricsProvidersArray []TelemetrySpecMetricsProvidersInput

func (TelemetrySpecMetricsProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (i TelemetrySpecMetricsProvidersArray) ToTelemetrySpecMetricsProvidersArrayOutput() TelemetrySpecMetricsProvidersArrayOutput {
	return i.ToTelemetrySpecMetricsProvidersArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsProvidersArray) ToTelemetrySpecMetricsProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsProvidersArrayOutput)
}

type TelemetrySpecMetricsProvidersOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (o TelemetrySpecMetricsProvidersOutput) ToTelemetrySpecMetricsProvidersOutput() TelemetrySpecMetricsProvidersOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersOutput) ToTelemetrySpecMetricsProvidersOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersOutput {
	return o
}

// Required.
func (o TelemetrySpecMetricsProvidersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsProviders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsProvidersArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (o TelemetrySpecMetricsProvidersArrayOutput) ToTelemetrySpecMetricsProvidersArrayOutput() TelemetrySpecMetricsProvidersArrayOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersArrayOutput) ToTelemetrySpecMetricsProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersArrayOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetricsProviders {
		return vs[0].([]TelemetrySpecMetricsProviders)[vs[1].(int)]
	}).(TelemetrySpecMetricsProvidersOutput)
}

type TelemetrySpecMetricsProvidersPatch struct {
	// Required.
	Name *string `pulumi:"name"`
}

// TelemetrySpecMetricsProvidersPatchInput is an input type that accepts TelemetrySpecMetricsProvidersPatchArgs and TelemetrySpecMetricsProvidersPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsProvidersPatchInput` via:
//
//	TelemetrySpecMetricsProvidersPatchArgs{...}
type TelemetrySpecMetricsProvidersPatchInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsProvidersPatchOutput() TelemetrySpecMetricsProvidersPatchOutput
	ToTelemetrySpecMetricsProvidersPatchOutputWithContext(context.Context) TelemetrySpecMetricsProvidersPatchOutput
}

type TelemetrySpecMetricsProvidersPatchArgs struct {
	// Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TelemetrySpecMetricsProvidersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsProvidersPatch)(nil)).Elem()
}

func (i TelemetrySpecMetricsProvidersPatchArgs) ToTelemetrySpecMetricsProvidersPatchOutput() TelemetrySpecMetricsProvidersPatchOutput {
	return i.ToTelemetrySpecMetricsProvidersPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsProvidersPatchArgs) ToTelemetrySpecMetricsProvidersPatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsProvidersPatchOutput)
}

// TelemetrySpecMetricsProvidersPatchArrayInput is an input type that accepts TelemetrySpecMetricsProvidersPatchArray and TelemetrySpecMetricsProvidersPatchArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsProvidersPatchArrayInput` via:
//
//	TelemetrySpecMetricsProvidersPatchArray{ TelemetrySpecMetricsProvidersPatchArgs{...} }
type TelemetrySpecMetricsProvidersPatchArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsProvidersPatchArrayOutput() TelemetrySpecMetricsProvidersPatchArrayOutput
	ToTelemetrySpecMetricsProvidersPatchArrayOutputWithContext(context.Context) TelemetrySpecMetricsProvidersPatchArrayOutput
}

type TelemetrySpecMetricsProvidersPatchArray []TelemetrySpecMetricsProvidersPatchInput

func (TelemetrySpecMetricsProvidersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsProvidersPatch)(nil)).Elem()
}

func (i TelemetrySpecMetricsProvidersPatchArray) ToTelemetrySpecMetricsProvidersPatchArrayOutput() TelemetrySpecMetricsProvidersPatchArrayOutput {
	return i.ToTelemetrySpecMetricsProvidersPatchArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsProvidersPatchArray) ToTelemetrySpecMetricsProvidersPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsProvidersPatchArrayOutput)
}

type TelemetrySpecMetricsProvidersPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsProvidersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsProvidersPatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsProvidersPatchOutput) ToTelemetrySpecMetricsProvidersPatchOutput() TelemetrySpecMetricsProvidersPatchOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersPatchOutput) ToTelemetrySpecMetricsProvidersPatchOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersPatchOutput {
	return o
}

// Required.
func (o TelemetrySpecMetricsProvidersPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsProvidersPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsProvidersPatchArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsProvidersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsProvidersPatch)(nil)).Elem()
}

func (o TelemetrySpecMetricsProvidersPatchArrayOutput) ToTelemetrySpecMetricsProvidersPatchArrayOutput() TelemetrySpecMetricsProvidersPatchArrayOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersPatchArrayOutput) ToTelemetrySpecMetricsProvidersPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersPatchArrayOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersPatchArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsProvidersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetricsProvidersPatch {
		return vs[0].([]TelemetrySpecMetricsProvidersPatch)[vs[1].(int)]
	}).(TelemetrySpecMetricsProvidersPatchOutput)
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpecPatch struct {
	// Optional.
	AccessLogging []TelemetrySpecAccessLoggingPatch `pulumi:"accessLogging"`
	// Optional.
	Metrics   []TelemetrySpecMetricsPatch  `pulumi:"metrics"`
	Selector  *TelemetrySpecSelectorPatch  `pulumi:"selector"`
	TargetRef *TelemetrySpecTargetRefPatch `pulumi:"targetRef"`
	// Optional.
	TargetRefs []TelemetrySpecTargetRefsPatch `pulumi:"targetRefs"`
	// Optional.
	Tracing []TelemetrySpecTracingPatch `pulumi:"tracing"`
}

// TelemetrySpecPatchInput is an input type that accepts TelemetrySpecPatchArgs and TelemetrySpecPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecPatchInput` via:
//
//	TelemetrySpecPatchArgs{...}
type TelemetrySpecPatchInput interface {
	pulumi.Input

	ToTelemetrySpecPatchOutput() TelemetrySpecPatchOutput
	ToTelemetrySpecPatchOutputWithContext(context.Context) TelemetrySpecPatchOutput
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpecPatchArgs struct {
	// Optional.
	AccessLogging TelemetrySpecAccessLoggingPatchArrayInput `pulumi:"accessLogging"`
	// Optional.
	Metrics   TelemetrySpecMetricsPatchArrayInput `pulumi:"metrics"`
	Selector  TelemetrySpecSelectorPatchPtrInput  `pulumi:"selector"`
	TargetRef TelemetrySpecTargetRefPatchPtrInput `pulumi:"targetRef"`
	// Optional.
	TargetRefs TelemetrySpecTargetRefsPatchArrayInput `pulumi:"targetRefs"`
	// Optional.
	Tracing TelemetrySpecTracingPatchArrayInput `pulumi:"tracing"`
}

func (TelemetrySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecPatch)(nil)).Elem()
}

func (i TelemetrySpecPatchArgs) ToTelemetrySpecPatchOutput() TelemetrySpecPatchOutput {
	return i.ToTelemetrySpecPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecPatchArgs) ToTelemetrySpecPatchOutputWithContext(ctx context.Context) TelemetrySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecPatchOutput)
}

func (i TelemetrySpecPatchArgs) ToTelemetrySpecPatchPtrOutput() TelemetrySpecPatchPtrOutput {
	return i.ToTelemetrySpecPatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecPatchArgs) ToTelemetrySpecPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecPatchOutput).ToTelemetrySpecPatchPtrOutputWithContext(ctx)
}

// TelemetrySpecPatchPtrInput is an input type that accepts TelemetrySpecPatchArgs, TelemetrySpecPatchPtr and TelemetrySpecPatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecPatchPtrInput` via:
//
//	        TelemetrySpecPatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecPatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecPatchPtrOutput() TelemetrySpecPatchPtrOutput
	ToTelemetrySpecPatchPtrOutputWithContext(context.Context) TelemetrySpecPatchPtrOutput
}

type telemetrySpecPatchPtrType TelemetrySpecPatchArgs

func TelemetrySpecPatchPtr(v *TelemetrySpecPatchArgs) TelemetrySpecPatchPtrInput {
	return (*telemetrySpecPatchPtrType)(v)
}

func (*telemetrySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecPatch)(nil)).Elem()
}

func (i *telemetrySpecPatchPtrType) ToTelemetrySpecPatchPtrOutput() TelemetrySpecPatchPtrOutput {
	return i.ToTelemetrySpecPatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecPatchPtrType) ToTelemetrySpecPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecPatchPtrOutput)
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpecPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecPatch)(nil)).Elem()
}

func (o TelemetrySpecPatchOutput) ToTelemetrySpecPatchOutput() TelemetrySpecPatchOutput {
	return o
}

func (o TelemetrySpecPatchOutput) ToTelemetrySpecPatchOutputWithContext(ctx context.Context) TelemetrySpecPatchOutput {
	return o
}

func (o TelemetrySpecPatchOutput) ToTelemetrySpecPatchPtrOutput() TelemetrySpecPatchPtrOutput {
	return o.ToTelemetrySpecPatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecPatchOutput) ToTelemetrySpecPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecPatch) *TelemetrySpecPatch {
		return &v
	}).(TelemetrySpecPatchPtrOutput)
}

// Optional.
func (o TelemetrySpecPatchOutput) AccessLogging() TelemetrySpecAccessLoggingPatchArrayOutput {
	return o.ApplyT(func(v TelemetrySpecPatch) []TelemetrySpecAccessLoggingPatch { return v.AccessLogging }).(TelemetrySpecAccessLoggingPatchArrayOutput)
}

// Optional.
func (o TelemetrySpecPatchOutput) Metrics() TelemetrySpecMetricsPatchArrayOutput {
	return o.ApplyT(func(v TelemetrySpecPatch) []TelemetrySpecMetricsPatch { return v.Metrics }).(TelemetrySpecMetricsPatchArrayOutput)
}

func (o TelemetrySpecPatchOutput) Selector() TelemetrySpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecPatch) *TelemetrySpecSelectorPatch { return v.Selector }).(TelemetrySpecSelectorPatchPtrOutput)
}

func (o TelemetrySpecPatchOutput) TargetRef() TelemetrySpecTargetRefPatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecPatch) *TelemetrySpecTargetRefPatch { return v.TargetRef }).(TelemetrySpecTargetRefPatchPtrOutput)
}

// Optional.
func (o TelemetrySpecPatchOutput) TargetRefs() TelemetrySpecTargetRefsPatchArrayOutput {
	return o.ApplyT(func(v TelemetrySpecPatch) []TelemetrySpecTargetRefsPatch { return v.TargetRefs }).(TelemetrySpecTargetRefsPatchArrayOutput)
}

// Optional.
func (o TelemetrySpecPatchOutput) Tracing() TelemetrySpecTracingPatchArrayOutput {
	return o.ApplyT(func(v TelemetrySpecPatch) []TelemetrySpecTracingPatch { return v.Tracing }).(TelemetrySpecTracingPatchArrayOutput)
}

type TelemetrySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecPatch)(nil)).Elem()
}

func (o TelemetrySpecPatchPtrOutput) ToTelemetrySpecPatchPtrOutput() TelemetrySpecPatchPtrOutput {
	return o
}

func (o TelemetrySpecPatchPtrOutput) ToTelemetrySpecPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecPatchPtrOutput {
	return o
}

func (o TelemetrySpecPatchPtrOutput) Elem() TelemetrySpecPatchOutput {
	return o.ApplyT(func(v *TelemetrySpecPatch) TelemetrySpecPatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecPatch
		return ret
	}).(TelemetrySpecPatchOutput)
}

// Optional.
func (o TelemetrySpecPatchPtrOutput) AccessLogging() TelemetrySpecAccessLoggingPatchArrayOutput {
	return o.ApplyT(func(v *TelemetrySpecPatch) []TelemetrySpecAccessLoggingPatch {
		if v == nil {
			return nil
		}
		return v.AccessLogging
	}).(TelemetrySpecAccessLoggingPatchArrayOutput)
}

// Optional.
func (o TelemetrySpecPatchPtrOutput) Metrics() TelemetrySpecMetricsPatchArrayOutput {
	return o.ApplyT(func(v *TelemetrySpecPatch) []TelemetrySpecMetricsPatch {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(TelemetrySpecMetricsPatchArrayOutput)
}

func (o TelemetrySpecPatchPtrOutput) Selector() TelemetrySpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecPatch) *TelemetrySpecSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(TelemetrySpecSelectorPatchPtrOutput)
}

func (o TelemetrySpecPatchPtrOutput) TargetRef() TelemetrySpecTargetRefPatchPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecPatch) *TelemetrySpecTargetRefPatch {
		if v == nil {
			return nil
		}
		return v.TargetRef
	}).(TelemetrySpecTargetRefPatchPtrOutput)
}

// Optional.
func (o TelemetrySpecPatchPtrOutput) TargetRefs() TelemetrySpecTargetRefsPatchArrayOutput {
	return o.ApplyT(func(v *TelemetrySpecPatch) []TelemetrySpecTargetRefsPatch {
		if v == nil {
			return nil
		}
		return v.TargetRefs
	}).(TelemetrySpecTargetRefsPatchArrayOutput)
}

// Optional.
func (o TelemetrySpecPatchPtrOutput) Tracing() TelemetrySpecTracingPatchArrayOutput {
	return o.ApplyT(func(v *TelemetrySpecPatch) []TelemetrySpecTracingPatch {
		if v == nil {
			return nil
		}
		return v.Tracing
	}).(TelemetrySpecTracingPatchArrayOutput)
}

// Optional.
type TelemetrySpecSelector struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// TelemetrySpecSelectorInput is an input type that accepts TelemetrySpecSelectorArgs and TelemetrySpecSelectorOutput values.
// You can construct a concrete instance of `TelemetrySpecSelectorInput` via:
//
//	TelemetrySpecSelectorArgs{...}
type TelemetrySpecSelectorInput interface {
	pulumi.Input

	ToTelemetrySpecSelectorOutput() TelemetrySpecSelectorOutput
	ToTelemetrySpecSelectorOutputWithContext(context.Context) TelemetrySpecSelectorOutput
}

// Optional.
type TelemetrySpecSelectorArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (TelemetrySpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecSelector)(nil)).Elem()
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorOutput() TelemetrySpecSelectorOutput {
	return i.ToTelemetrySpecSelectorOutputWithContext(context.Background())
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorOutputWithContext(ctx context.Context) TelemetrySpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorOutput)
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return i.ToTelemetrySpecSelectorPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorOutput).ToTelemetrySpecSelectorPtrOutputWithContext(ctx)
}

// TelemetrySpecSelectorPtrInput is an input type that accepts TelemetrySpecSelectorArgs, TelemetrySpecSelectorPtr and TelemetrySpecSelectorPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecSelectorPtrInput` via:
//
//	        TelemetrySpecSelectorArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecSelectorPtrInput interface {
	pulumi.Input

	ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput
	ToTelemetrySpecSelectorPtrOutputWithContext(context.Context) TelemetrySpecSelectorPtrOutput
}

type telemetrySpecSelectorPtrType TelemetrySpecSelectorArgs

func TelemetrySpecSelectorPtr(v *TelemetrySpecSelectorArgs) TelemetrySpecSelectorPtrInput {
	return (*telemetrySpecSelectorPtrType)(v)
}

func (*telemetrySpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecSelector)(nil)).Elem()
}

func (i *telemetrySpecSelectorPtrType) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return i.ToTelemetrySpecSelectorPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecSelectorPtrType) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorPtrOutput)
}

// Optional.
type TelemetrySpecSelectorOutput struct{ *pulumi.OutputState }

func (TelemetrySpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecSelector)(nil)).Elem()
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorOutput() TelemetrySpecSelectorOutput {
	return o
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorOutputWithContext(ctx context.Context) TelemetrySpecSelectorOutput {
	return o
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return o.ToTelemetrySpecSelectorPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecSelector) *TelemetrySpecSelector {
		return &v
	}).(TelemetrySpecSelectorPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o TelemetrySpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TelemetrySpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type TelemetrySpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecSelector)(nil)).Elem()
}

func (o TelemetrySpecSelectorPtrOutput) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return o
}

func (o TelemetrySpecSelectorPtrOutput) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return o
}

func (o TelemetrySpecSelectorPtrOutput) Elem() TelemetrySpecSelectorOutput {
	return o.ApplyT(func(v *TelemetrySpecSelector) TelemetrySpecSelector {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecSelector
		return ret
	}).(TelemetrySpecSelectorOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o TelemetrySpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TelemetrySpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// Optional.
type TelemetrySpecSelectorPatch struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// TelemetrySpecSelectorPatchInput is an input type that accepts TelemetrySpecSelectorPatchArgs and TelemetrySpecSelectorPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecSelectorPatchInput` via:
//
//	TelemetrySpecSelectorPatchArgs{...}
type TelemetrySpecSelectorPatchInput interface {
	pulumi.Input

	ToTelemetrySpecSelectorPatchOutput() TelemetrySpecSelectorPatchOutput
	ToTelemetrySpecSelectorPatchOutputWithContext(context.Context) TelemetrySpecSelectorPatchOutput
}

// Optional.
type TelemetrySpecSelectorPatchArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (TelemetrySpecSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecSelectorPatch)(nil)).Elem()
}

func (i TelemetrySpecSelectorPatchArgs) ToTelemetrySpecSelectorPatchOutput() TelemetrySpecSelectorPatchOutput {
	return i.ToTelemetrySpecSelectorPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecSelectorPatchArgs) ToTelemetrySpecSelectorPatchOutputWithContext(ctx context.Context) TelemetrySpecSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorPatchOutput)
}

func (i TelemetrySpecSelectorPatchArgs) ToTelemetrySpecSelectorPatchPtrOutput() TelemetrySpecSelectorPatchPtrOutput {
	return i.ToTelemetrySpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecSelectorPatchArgs) ToTelemetrySpecSelectorPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorPatchOutput).ToTelemetrySpecSelectorPatchPtrOutputWithContext(ctx)
}

// TelemetrySpecSelectorPatchPtrInput is an input type that accepts TelemetrySpecSelectorPatchArgs, TelemetrySpecSelectorPatchPtr and TelemetrySpecSelectorPatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecSelectorPatchPtrInput` via:
//
//	        TelemetrySpecSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecSelectorPatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecSelectorPatchPtrOutput() TelemetrySpecSelectorPatchPtrOutput
	ToTelemetrySpecSelectorPatchPtrOutputWithContext(context.Context) TelemetrySpecSelectorPatchPtrOutput
}

type telemetrySpecSelectorPatchPtrType TelemetrySpecSelectorPatchArgs

func TelemetrySpecSelectorPatchPtr(v *TelemetrySpecSelectorPatchArgs) TelemetrySpecSelectorPatchPtrInput {
	return (*telemetrySpecSelectorPatchPtrType)(v)
}

func (*telemetrySpecSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecSelectorPatch)(nil)).Elem()
}

func (i *telemetrySpecSelectorPatchPtrType) ToTelemetrySpecSelectorPatchPtrOutput() TelemetrySpecSelectorPatchPtrOutput {
	return i.ToTelemetrySpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecSelectorPatchPtrType) ToTelemetrySpecSelectorPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorPatchPtrOutput)
}

// Optional.
type TelemetrySpecSelectorPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecSelectorPatch)(nil)).Elem()
}

func (o TelemetrySpecSelectorPatchOutput) ToTelemetrySpecSelectorPatchOutput() TelemetrySpecSelectorPatchOutput {
	return o
}

func (o TelemetrySpecSelectorPatchOutput) ToTelemetrySpecSelectorPatchOutputWithContext(ctx context.Context) TelemetrySpecSelectorPatchOutput {
	return o
}

func (o TelemetrySpecSelectorPatchOutput) ToTelemetrySpecSelectorPatchPtrOutput() TelemetrySpecSelectorPatchPtrOutput {
	return o.ToTelemetrySpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecSelectorPatchOutput) ToTelemetrySpecSelectorPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecSelectorPatch) *TelemetrySpecSelectorPatch {
		return &v
	}).(TelemetrySpecSelectorPatchPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o TelemetrySpecSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TelemetrySpecSelectorPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type TelemetrySpecSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecSelectorPatch)(nil)).Elem()
}

func (o TelemetrySpecSelectorPatchPtrOutput) ToTelemetrySpecSelectorPatchPtrOutput() TelemetrySpecSelectorPatchPtrOutput {
	return o
}

func (o TelemetrySpecSelectorPatchPtrOutput) ToTelemetrySpecSelectorPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPatchPtrOutput {
	return o
}

func (o TelemetrySpecSelectorPatchPtrOutput) Elem() TelemetrySpecSelectorPatchOutput {
	return o.ApplyT(func(v *TelemetrySpecSelectorPatch) TelemetrySpecSelectorPatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecSelectorPatch
		return ret
	}).(TelemetrySpecSelectorPatchOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o TelemetrySpecSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TelemetrySpecSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type TelemetrySpecTargetRef struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// TelemetrySpecTargetRefInput is an input type that accepts TelemetrySpecTargetRefArgs and TelemetrySpecTargetRefOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefInput` via:
//
//	TelemetrySpecTargetRefArgs{...}
type TelemetrySpecTargetRefInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefOutput() TelemetrySpecTargetRefOutput
	ToTelemetrySpecTargetRefOutputWithContext(context.Context) TelemetrySpecTargetRefOutput
}

type TelemetrySpecTargetRefArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TelemetrySpecTargetRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRef)(nil)).Elem()
}

func (i TelemetrySpecTargetRefArgs) ToTelemetrySpecTargetRefOutput() TelemetrySpecTargetRefOutput {
	return i.ToTelemetrySpecTargetRefOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefArgs) ToTelemetrySpecTargetRefOutputWithContext(ctx context.Context) TelemetrySpecTargetRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefOutput)
}

func (i TelemetrySpecTargetRefArgs) ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput {
	return i.ToTelemetrySpecTargetRefPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefArgs) ToTelemetrySpecTargetRefPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefOutput).ToTelemetrySpecTargetRefPtrOutputWithContext(ctx)
}

// TelemetrySpecTargetRefPtrInput is an input type that accepts TelemetrySpecTargetRefArgs, TelemetrySpecTargetRefPtr and TelemetrySpecTargetRefPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefPtrInput` via:
//
//	        TelemetrySpecTargetRefArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecTargetRefPtrInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput
	ToTelemetrySpecTargetRefPtrOutputWithContext(context.Context) TelemetrySpecTargetRefPtrOutput
}

type telemetrySpecTargetRefPtrType TelemetrySpecTargetRefArgs

func TelemetrySpecTargetRefPtr(v *TelemetrySpecTargetRefArgs) TelemetrySpecTargetRefPtrInput {
	return (*telemetrySpecTargetRefPtrType)(v)
}

func (*telemetrySpecTargetRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTargetRef)(nil)).Elem()
}

func (i *telemetrySpecTargetRefPtrType) ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput {
	return i.ToTelemetrySpecTargetRefPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecTargetRefPtrType) ToTelemetrySpecTargetRefPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefPtrOutput)
}

type TelemetrySpecTargetRefOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRef)(nil)).Elem()
}

func (o TelemetrySpecTargetRefOutput) ToTelemetrySpecTargetRefOutput() TelemetrySpecTargetRefOutput {
	return o
}

func (o TelemetrySpecTargetRefOutput) ToTelemetrySpecTargetRefOutputWithContext(ctx context.Context) TelemetrySpecTargetRefOutput {
	return o
}

func (o TelemetrySpecTargetRefOutput) ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput {
	return o.ToTelemetrySpecTargetRefPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecTargetRefOutput) ToTelemetrySpecTargetRefPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecTargetRef) *TelemetrySpecTargetRef {
		return &v
	}).(TelemetrySpecTargetRefPtrOutput)
}

// group is the group of the target resource.
func (o TelemetrySpecTargetRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o TelemetrySpecTargetRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o TelemetrySpecTargetRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o TelemetrySpecTargetRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTargetRefPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTargetRef)(nil)).Elem()
}

func (o TelemetrySpecTargetRefPtrOutput) ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput {
	return o
}

func (o TelemetrySpecTargetRefPtrOutput) ToTelemetrySpecTargetRefPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPtrOutput {
	return o
}

func (o TelemetrySpecTargetRefPtrOutput) Elem() TelemetrySpecTargetRefOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) TelemetrySpecTargetRef {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecTargetRef
		return ret
	}).(TelemetrySpecTargetRefOutput)
}

// group is the group of the target resource.
func (o TelemetrySpecTargetRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o TelemetrySpecTargetRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o TelemetrySpecTargetRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o TelemetrySpecTargetRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecTargetRefPatch struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// TelemetrySpecTargetRefPatchInput is an input type that accepts TelemetrySpecTargetRefPatchArgs and TelemetrySpecTargetRefPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefPatchInput` via:
//
//	TelemetrySpecTargetRefPatchArgs{...}
type TelemetrySpecTargetRefPatchInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefPatchOutput() TelemetrySpecTargetRefPatchOutput
	ToTelemetrySpecTargetRefPatchOutputWithContext(context.Context) TelemetrySpecTargetRefPatchOutput
}

type TelemetrySpecTargetRefPatchArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TelemetrySpecTargetRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRefPatch)(nil)).Elem()
}

func (i TelemetrySpecTargetRefPatchArgs) ToTelemetrySpecTargetRefPatchOutput() TelemetrySpecTargetRefPatchOutput {
	return i.ToTelemetrySpecTargetRefPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefPatchArgs) ToTelemetrySpecTargetRefPatchOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefPatchOutput)
}

func (i TelemetrySpecTargetRefPatchArgs) ToTelemetrySpecTargetRefPatchPtrOutput() TelemetrySpecTargetRefPatchPtrOutput {
	return i.ToTelemetrySpecTargetRefPatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefPatchArgs) ToTelemetrySpecTargetRefPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefPatchOutput).ToTelemetrySpecTargetRefPatchPtrOutputWithContext(ctx)
}

// TelemetrySpecTargetRefPatchPtrInput is an input type that accepts TelemetrySpecTargetRefPatchArgs, TelemetrySpecTargetRefPatchPtr and TelemetrySpecTargetRefPatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefPatchPtrInput` via:
//
//	        TelemetrySpecTargetRefPatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecTargetRefPatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefPatchPtrOutput() TelemetrySpecTargetRefPatchPtrOutput
	ToTelemetrySpecTargetRefPatchPtrOutputWithContext(context.Context) TelemetrySpecTargetRefPatchPtrOutput
}

type telemetrySpecTargetRefPatchPtrType TelemetrySpecTargetRefPatchArgs

func TelemetrySpecTargetRefPatchPtr(v *TelemetrySpecTargetRefPatchArgs) TelemetrySpecTargetRefPatchPtrInput {
	return (*telemetrySpecTargetRefPatchPtrType)(v)
}

func (*telemetrySpecTargetRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTargetRefPatch)(nil)).Elem()
}

func (i *telemetrySpecTargetRefPatchPtrType) ToTelemetrySpecTargetRefPatchPtrOutput() TelemetrySpecTargetRefPatchPtrOutput {
	return i.ToTelemetrySpecTargetRefPatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecTargetRefPatchPtrType) ToTelemetrySpecTargetRefPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefPatchPtrOutput)
}

type TelemetrySpecTargetRefPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRefPatch)(nil)).Elem()
}

func (o TelemetrySpecTargetRefPatchOutput) ToTelemetrySpecTargetRefPatchOutput() TelemetrySpecTargetRefPatchOutput {
	return o
}

func (o TelemetrySpecTargetRefPatchOutput) ToTelemetrySpecTargetRefPatchOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPatchOutput {
	return o
}

func (o TelemetrySpecTargetRefPatchOutput) ToTelemetrySpecTargetRefPatchPtrOutput() TelemetrySpecTargetRefPatchPtrOutput {
	return o.ToTelemetrySpecTargetRefPatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecTargetRefPatchOutput) ToTelemetrySpecTargetRefPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecTargetRefPatch) *TelemetrySpecTargetRefPatch {
		return &v
	}).(TelemetrySpecTargetRefPatchPtrOutput)
}

// group is the group of the target resource.
func (o TelemetrySpecTargetRefPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o TelemetrySpecTargetRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o TelemetrySpecTargetRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o TelemetrySpecTargetRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTargetRefPatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTargetRefPatch)(nil)).Elem()
}

func (o TelemetrySpecTargetRefPatchPtrOutput) ToTelemetrySpecTargetRefPatchPtrOutput() TelemetrySpecTargetRefPatchPtrOutput {
	return o
}

func (o TelemetrySpecTargetRefPatchPtrOutput) ToTelemetrySpecTargetRefPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPatchPtrOutput {
	return o
}

func (o TelemetrySpecTargetRefPatchPtrOutput) Elem() TelemetrySpecTargetRefPatchOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRefPatch) TelemetrySpecTargetRefPatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecTargetRefPatch
		return ret
	}).(TelemetrySpecTargetRefPatchOutput)
}

// group is the group of the target resource.
func (o TelemetrySpecTargetRefPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o TelemetrySpecTargetRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o TelemetrySpecTargetRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o TelemetrySpecTargetRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecTargetRefs struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// TelemetrySpecTargetRefsInput is an input type that accepts TelemetrySpecTargetRefsArgs and TelemetrySpecTargetRefsOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefsInput` via:
//
//	TelemetrySpecTargetRefsArgs{...}
type TelemetrySpecTargetRefsInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefsOutput() TelemetrySpecTargetRefsOutput
	ToTelemetrySpecTargetRefsOutputWithContext(context.Context) TelemetrySpecTargetRefsOutput
}

type TelemetrySpecTargetRefsArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TelemetrySpecTargetRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRefs)(nil)).Elem()
}

func (i TelemetrySpecTargetRefsArgs) ToTelemetrySpecTargetRefsOutput() TelemetrySpecTargetRefsOutput {
	return i.ToTelemetrySpecTargetRefsOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefsArgs) ToTelemetrySpecTargetRefsOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefsOutput)
}

// TelemetrySpecTargetRefsArrayInput is an input type that accepts TelemetrySpecTargetRefsArray and TelemetrySpecTargetRefsArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefsArrayInput` via:
//
//	TelemetrySpecTargetRefsArray{ TelemetrySpecTargetRefsArgs{...} }
type TelemetrySpecTargetRefsArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefsArrayOutput() TelemetrySpecTargetRefsArrayOutput
	ToTelemetrySpecTargetRefsArrayOutputWithContext(context.Context) TelemetrySpecTargetRefsArrayOutput
}

type TelemetrySpecTargetRefsArray []TelemetrySpecTargetRefsInput

func (TelemetrySpecTargetRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTargetRefs)(nil)).Elem()
}

func (i TelemetrySpecTargetRefsArray) ToTelemetrySpecTargetRefsArrayOutput() TelemetrySpecTargetRefsArrayOutput {
	return i.ToTelemetrySpecTargetRefsArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefsArray) ToTelemetrySpecTargetRefsArrayOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefsArrayOutput)
}

type TelemetrySpecTargetRefsOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRefs)(nil)).Elem()
}

func (o TelemetrySpecTargetRefsOutput) ToTelemetrySpecTargetRefsOutput() TelemetrySpecTargetRefsOutput {
	return o
}

func (o TelemetrySpecTargetRefsOutput) ToTelemetrySpecTargetRefsOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsOutput {
	return o
}

// group is the group of the target resource.
func (o TelemetrySpecTargetRefsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o TelemetrySpecTargetRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o TelemetrySpecTargetRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o TelemetrySpecTargetRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTargetRefsArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTargetRefs)(nil)).Elem()
}

func (o TelemetrySpecTargetRefsArrayOutput) ToTelemetrySpecTargetRefsArrayOutput() TelemetrySpecTargetRefsArrayOutput {
	return o
}

func (o TelemetrySpecTargetRefsArrayOutput) ToTelemetrySpecTargetRefsArrayOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsArrayOutput {
	return o
}

func (o TelemetrySpecTargetRefsArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTargetRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTargetRefs {
		return vs[0].([]TelemetrySpecTargetRefs)[vs[1].(int)]
	}).(TelemetrySpecTargetRefsOutput)
}

type TelemetrySpecTargetRefsPatch struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// TelemetrySpecTargetRefsPatchInput is an input type that accepts TelemetrySpecTargetRefsPatchArgs and TelemetrySpecTargetRefsPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefsPatchInput` via:
//
//	TelemetrySpecTargetRefsPatchArgs{...}
type TelemetrySpecTargetRefsPatchInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefsPatchOutput() TelemetrySpecTargetRefsPatchOutput
	ToTelemetrySpecTargetRefsPatchOutputWithContext(context.Context) TelemetrySpecTargetRefsPatchOutput
}

type TelemetrySpecTargetRefsPatchArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TelemetrySpecTargetRefsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRefsPatch)(nil)).Elem()
}

func (i TelemetrySpecTargetRefsPatchArgs) ToTelemetrySpecTargetRefsPatchOutput() TelemetrySpecTargetRefsPatchOutput {
	return i.ToTelemetrySpecTargetRefsPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefsPatchArgs) ToTelemetrySpecTargetRefsPatchOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefsPatchOutput)
}

// TelemetrySpecTargetRefsPatchArrayInput is an input type that accepts TelemetrySpecTargetRefsPatchArray and TelemetrySpecTargetRefsPatchArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefsPatchArrayInput` via:
//
//	TelemetrySpecTargetRefsPatchArray{ TelemetrySpecTargetRefsPatchArgs{...} }
type TelemetrySpecTargetRefsPatchArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefsPatchArrayOutput() TelemetrySpecTargetRefsPatchArrayOutput
	ToTelemetrySpecTargetRefsPatchArrayOutputWithContext(context.Context) TelemetrySpecTargetRefsPatchArrayOutput
}

type TelemetrySpecTargetRefsPatchArray []TelemetrySpecTargetRefsPatchInput

func (TelemetrySpecTargetRefsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTargetRefsPatch)(nil)).Elem()
}

func (i TelemetrySpecTargetRefsPatchArray) ToTelemetrySpecTargetRefsPatchArrayOutput() TelemetrySpecTargetRefsPatchArrayOutput {
	return i.ToTelemetrySpecTargetRefsPatchArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefsPatchArray) ToTelemetrySpecTargetRefsPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefsPatchArrayOutput)
}

type TelemetrySpecTargetRefsPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRefsPatch)(nil)).Elem()
}

func (o TelemetrySpecTargetRefsPatchOutput) ToTelemetrySpecTargetRefsPatchOutput() TelemetrySpecTargetRefsPatchOutput {
	return o
}

func (o TelemetrySpecTargetRefsPatchOutput) ToTelemetrySpecTargetRefsPatchOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsPatchOutput {
	return o
}

// group is the group of the target resource.
func (o TelemetrySpecTargetRefsPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefsPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o TelemetrySpecTargetRefsPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefsPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o TelemetrySpecTargetRefsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o TelemetrySpecTargetRefsPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefsPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTargetRefsPatchArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTargetRefsPatch)(nil)).Elem()
}

func (o TelemetrySpecTargetRefsPatchArrayOutput) ToTelemetrySpecTargetRefsPatchArrayOutput() TelemetrySpecTargetRefsPatchArrayOutput {
	return o
}

func (o TelemetrySpecTargetRefsPatchArrayOutput) ToTelemetrySpecTargetRefsPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsPatchArrayOutput {
	return o
}

func (o TelemetrySpecTargetRefsPatchArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTargetRefsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTargetRefsPatch {
		return vs[0].([]TelemetrySpecTargetRefsPatch)[vs[1].(int)]
	}).(TelemetrySpecTargetRefsPatchOutput)
}

type TelemetrySpecTracing struct {
	// Optional.
	CustomTags map[string]map[string]string `pulumi:"customTags"`
	// Controls span reporting.
	DisableSpanReporting *bool                      `pulumi:"disableSpanReporting"`
	Match                *TelemetrySpecTracingMatch `pulumi:"match"`
	// Optional.
	Providers []TelemetrySpecTracingProviders `pulumi:"providers"`
	// Controls the rate at which traffic will be selected for tracing if no prior sampling decision has been made.
	RandomSamplingPercentage     *float64 `pulumi:"randomSamplingPercentage"`
	UseRequestIdForTraceSampling *bool    `pulumi:"useRequestIdForTraceSampling"`
}

// TelemetrySpecTracingInput is an input type that accepts TelemetrySpecTracingArgs and TelemetrySpecTracingOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingInput` via:
//
//	TelemetrySpecTracingArgs{...}
type TelemetrySpecTracingInput interface {
	pulumi.Input

	ToTelemetrySpecTracingOutput() TelemetrySpecTracingOutput
	ToTelemetrySpecTracingOutputWithContext(context.Context) TelemetrySpecTracingOutput
}

type TelemetrySpecTracingArgs struct {
	// Optional.
	CustomTags pulumi.StringMapMapInput `pulumi:"customTags"`
	// Controls span reporting.
	DisableSpanReporting pulumi.BoolPtrInput               `pulumi:"disableSpanReporting"`
	Match                TelemetrySpecTracingMatchPtrInput `pulumi:"match"`
	// Optional.
	Providers TelemetrySpecTracingProvidersArrayInput `pulumi:"providers"`
	// Controls the rate at which traffic will be selected for tracing if no prior sampling decision has been made.
	RandomSamplingPercentage     pulumi.Float64PtrInput `pulumi:"randomSamplingPercentage"`
	UseRequestIdForTraceSampling pulumi.BoolPtrInput    `pulumi:"useRequestIdForTraceSampling"`
}

func (TelemetrySpecTracingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracing)(nil)).Elem()
}

func (i TelemetrySpecTracingArgs) ToTelemetrySpecTracingOutput() TelemetrySpecTracingOutput {
	return i.ToTelemetrySpecTracingOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingArgs) ToTelemetrySpecTracingOutputWithContext(ctx context.Context) TelemetrySpecTracingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingOutput)
}

// TelemetrySpecTracingArrayInput is an input type that accepts TelemetrySpecTracingArray and TelemetrySpecTracingArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingArrayInput` via:
//
//	TelemetrySpecTracingArray{ TelemetrySpecTracingArgs{...} }
type TelemetrySpecTracingArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTracingArrayOutput() TelemetrySpecTracingArrayOutput
	ToTelemetrySpecTracingArrayOutputWithContext(context.Context) TelemetrySpecTracingArrayOutput
}

type TelemetrySpecTracingArray []TelemetrySpecTracingInput

func (TelemetrySpecTracingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracing)(nil)).Elem()
}

func (i TelemetrySpecTracingArray) ToTelemetrySpecTracingArrayOutput() TelemetrySpecTracingArrayOutput {
	return i.ToTelemetrySpecTracingArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingArray) ToTelemetrySpecTracingArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingArrayOutput)
}

type TelemetrySpecTracingOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracing)(nil)).Elem()
}

func (o TelemetrySpecTracingOutput) ToTelemetrySpecTracingOutput() TelemetrySpecTracingOutput {
	return o
}

func (o TelemetrySpecTracingOutput) ToTelemetrySpecTracingOutputWithContext(ctx context.Context) TelemetrySpecTracingOutput {
	return o
}

// Optional.
func (o TelemetrySpecTracingOutput) CustomTags() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) map[string]map[string]string { return v.CustomTags }).(pulumi.StringMapMapOutput)
}

// Controls span reporting.
func (o TelemetrySpecTracingOutput) DisableSpanReporting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *bool { return v.DisableSpanReporting }).(pulumi.BoolPtrOutput)
}

func (o TelemetrySpecTracingOutput) Match() TelemetrySpecTracingMatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *TelemetrySpecTracingMatch { return v.Match }).(TelemetrySpecTracingMatchPtrOutput)
}

// Optional.
func (o TelemetrySpecTracingOutput) Providers() TelemetrySpecTracingProvidersArrayOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) []TelemetrySpecTracingProviders { return v.Providers }).(TelemetrySpecTracingProvidersArrayOutput)
}

// Controls the rate at which traffic will be selected for tracing if no prior sampling decision has been made.
func (o TelemetrySpecTracingOutput) RandomSamplingPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *float64 { return v.RandomSamplingPercentage }).(pulumi.Float64PtrOutput)
}

func (o TelemetrySpecTracingOutput) UseRequestIdForTraceSampling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *bool { return v.UseRequestIdForTraceSampling }).(pulumi.BoolPtrOutput)
}

type TelemetrySpecTracingArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracing)(nil)).Elem()
}

func (o TelemetrySpecTracingArrayOutput) ToTelemetrySpecTracingArrayOutput() TelemetrySpecTracingArrayOutput {
	return o
}

func (o TelemetrySpecTracingArrayOutput) ToTelemetrySpecTracingArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingArrayOutput {
	return o
}

func (o TelemetrySpecTracingArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTracingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTracing {
		return vs[0].([]TelemetrySpecTracing)[vs[1].(int)]
	}).(TelemetrySpecTracingOutput)
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatch struct {
	// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecTracingMatchInput is an input type that accepts TelemetrySpecTracingMatchArgs and TelemetrySpecTracingMatchOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingMatchInput` via:
//
//	TelemetrySpecTracingMatchArgs{...}
type TelemetrySpecTracingMatchInput interface {
	pulumi.Input

	ToTelemetrySpecTracingMatchOutput() TelemetrySpecTracingMatchOutput
	ToTelemetrySpecTracingMatchOutputWithContext(context.Context) TelemetrySpecTracingMatchOutput
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatchArgs struct {
	// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecTracingMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingMatch)(nil)).Elem()
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchOutput() TelemetrySpecTracingMatchOutput {
	return i.ToTelemetrySpecTracingMatchOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchOutput)
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return i.ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchOutput).ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx)
}

// TelemetrySpecTracingMatchPtrInput is an input type that accepts TelemetrySpecTracingMatchArgs, TelemetrySpecTracingMatchPtr and TelemetrySpecTracingMatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingMatchPtrInput` via:
//
//	        TelemetrySpecTracingMatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecTracingMatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput
	ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Context) TelemetrySpecTracingMatchPtrOutput
}

type telemetrySpecTracingMatchPtrType TelemetrySpecTracingMatchArgs

func TelemetrySpecTracingMatchPtr(v *TelemetrySpecTracingMatchArgs) TelemetrySpecTracingMatchPtrInput {
	return (*telemetrySpecTracingMatchPtrType)(v)
}

func (*telemetrySpecTracingMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTracingMatch)(nil)).Elem()
}

func (i *telemetrySpecTracingMatchPtrType) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return i.ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecTracingMatchPtrType) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchPtrOutput)
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingMatch)(nil)).Elem()
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchOutput() TelemetrySpecTracingMatchOutput {
	return o
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchOutput {
	return o
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return o.ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecTracingMatch) *TelemetrySpecTracingMatch {
		return &v
	}).(TelemetrySpecTracingMatchPtrOutput)
}

// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecTracingMatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingMatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingMatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTracingMatch)(nil)).Elem()
}

func (o TelemetrySpecTracingMatchPtrOutput) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return o
}

func (o TelemetrySpecTracingMatchPtrOutput) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return o
}

func (o TelemetrySpecTracingMatchPtrOutput) Elem() TelemetrySpecTracingMatchOutput {
	return o.ApplyT(func(v *TelemetrySpecTracingMatch) TelemetrySpecTracingMatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecTracingMatch
		return ret
	}).(TelemetrySpecTracingMatchOutput)
}

// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecTracingMatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTracingMatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatchPatch struct {
	// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecTracingMatchPatchInput is an input type that accepts TelemetrySpecTracingMatchPatchArgs and TelemetrySpecTracingMatchPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingMatchPatchInput` via:
//
//	TelemetrySpecTracingMatchPatchArgs{...}
type TelemetrySpecTracingMatchPatchInput interface {
	pulumi.Input

	ToTelemetrySpecTracingMatchPatchOutput() TelemetrySpecTracingMatchPatchOutput
	ToTelemetrySpecTracingMatchPatchOutputWithContext(context.Context) TelemetrySpecTracingMatchPatchOutput
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatchPatchArgs struct {
	// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecTracingMatchPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingMatchPatch)(nil)).Elem()
}

func (i TelemetrySpecTracingMatchPatchArgs) ToTelemetrySpecTracingMatchPatchOutput() TelemetrySpecTracingMatchPatchOutput {
	return i.ToTelemetrySpecTracingMatchPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingMatchPatchArgs) ToTelemetrySpecTracingMatchPatchOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchPatchOutput)
}

func (i TelemetrySpecTracingMatchPatchArgs) ToTelemetrySpecTracingMatchPatchPtrOutput() TelemetrySpecTracingMatchPatchPtrOutput {
	return i.ToTelemetrySpecTracingMatchPatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingMatchPatchArgs) ToTelemetrySpecTracingMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchPatchOutput).ToTelemetrySpecTracingMatchPatchPtrOutputWithContext(ctx)
}

// TelemetrySpecTracingMatchPatchPtrInput is an input type that accepts TelemetrySpecTracingMatchPatchArgs, TelemetrySpecTracingMatchPatchPtr and TelemetrySpecTracingMatchPatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingMatchPatchPtrInput` via:
//
//	        TelemetrySpecTracingMatchPatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecTracingMatchPatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecTracingMatchPatchPtrOutput() TelemetrySpecTracingMatchPatchPtrOutput
	ToTelemetrySpecTracingMatchPatchPtrOutputWithContext(context.Context) TelemetrySpecTracingMatchPatchPtrOutput
}

type telemetrySpecTracingMatchPatchPtrType TelemetrySpecTracingMatchPatchArgs

func TelemetrySpecTracingMatchPatchPtr(v *TelemetrySpecTracingMatchPatchArgs) TelemetrySpecTracingMatchPatchPtrInput {
	return (*telemetrySpecTracingMatchPatchPtrType)(v)
}

func (*telemetrySpecTracingMatchPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTracingMatchPatch)(nil)).Elem()
}

func (i *telemetrySpecTracingMatchPatchPtrType) ToTelemetrySpecTracingMatchPatchPtrOutput() TelemetrySpecTracingMatchPatchPtrOutput {
	return i.ToTelemetrySpecTracingMatchPatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecTracingMatchPatchPtrType) ToTelemetrySpecTracingMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchPatchPtrOutput)
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatchPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingMatchPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingMatchPatch)(nil)).Elem()
}

func (o TelemetrySpecTracingMatchPatchOutput) ToTelemetrySpecTracingMatchPatchOutput() TelemetrySpecTracingMatchPatchOutput {
	return o
}

func (o TelemetrySpecTracingMatchPatchOutput) ToTelemetrySpecTracingMatchPatchOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPatchOutput {
	return o
}

func (o TelemetrySpecTracingMatchPatchOutput) ToTelemetrySpecTracingMatchPatchPtrOutput() TelemetrySpecTracingMatchPatchPtrOutput {
	return o.ToTelemetrySpecTracingMatchPatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecTracingMatchPatchOutput) ToTelemetrySpecTracingMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecTracingMatchPatch) *TelemetrySpecTracingMatchPatch {
		return &v
	}).(TelemetrySpecTracingMatchPatchPtrOutput)
}

// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecTracingMatchPatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingMatchPatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingMatchPatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingMatchPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTracingMatchPatch)(nil)).Elem()
}

func (o TelemetrySpecTracingMatchPatchPtrOutput) ToTelemetrySpecTracingMatchPatchPtrOutput() TelemetrySpecTracingMatchPatchPtrOutput {
	return o
}

func (o TelemetrySpecTracingMatchPatchPtrOutput) ToTelemetrySpecTracingMatchPatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPatchPtrOutput {
	return o
}

func (o TelemetrySpecTracingMatchPatchPtrOutput) Elem() TelemetrySpecTracingMatchPatchOutput {
	return o.ApplyT(func(v *TelemetrySpecTracingMatchPatch) TelemetrySpecTracingMatchPatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecTracingMatchPatch
		return ret
	}).(TelemetrySpecTracingMatchPatchOutput)
}

// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecTracingMatchPatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTracingMatchPatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingPatch struct {
	// Optional.
	CustomTags map[string]map[string]string `pulumi:"customTags"`
	// Controls span reporting.
	DisableSpanReporting *bool                           `pulumi:"disableSpanReporting"`
	Match                *TelemetrySpecTracingMatchPatch `pulumi:"match"`
	// Optional.
	Providers []TelemetrySpecTracingProvidersPatch `pulumi:"providers"`
	// Controls the rate at which traffic will be selected for tracing if no prior sampling decision has been made.
	RandomSamplingPercentage     *float64 `pulumi:"randomSamplingPercentage"`
	UseRequestIdForTraceSampling *bool    `pulumi:"useRequestIdForTraceSampling"`
}

// TelemetrySpecTracingPatchInput is an input type that accepts TelemetrySpecTracingPatchArgs and TelemetrySpecTracingPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingPatchInput` via:
//
//	TelemetrySpecTracingPatchArgs{...}
type TelemetrySpecTracingPatchInput interface {
	pulumi.Input

	ToTelemetrySpecTracingPatchOutput() TelemetrySpecTracingPatchOutput
	ToTelemetrySpecTracingPatchOutputWithContext(context.Context) TelemetrySpecTracingPatchOutput
}

type TelemetrySpecTracingPatchArgs struct {
	// Optional.
	CustomTags pulumi.StringMapMapInput `pulumi:"customTags"`
	// Controls span reporting.
	DisableSpanReporting pulumi.BoolPtrInput                    `pulumi:"disableSpanReporting"`
	Match                TelemetrySpecTracingMatchPatchPtrInput `pulumi:"match"`
	// Optional.
	Providers TelemetrySpecTracingProvidersPatchArrayInput `pulumi:"providers"`
	// Controls the rate at which traffic will be selected for tracing if no prior sampling decision has been made.
	RandomSamplingPercentage     pulumi.Float64PtrInput `pulumi:"randomSamplingPercentage"`
	UseRequestIdForTraceSampling pulumi.BoolPtrInput    `pulumi:"useRequestIdForTraceSampling"`
}

func (TelemetrySpecTracingPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingPatch)(nil)).Elem()
}

func (i TelemetrySpecTracingPatchArgs) ToTelemetrySpecTracingPatchOutput() TelemetrySpecTracingPatchOutput {
	return i.ToTelemetrySpecTracingPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingPatchArgs) ToTelemetrySpecTracingPatchOutputWithContext(ctx context.Context) TelemetrySpecTracingPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingPatchOutput)
}

// TelemetrySpecTracingPatchArrayInput is an input type that accepts TelemetrySpecTracingPatchArray and TelemetrySpecTracingPatchArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingPatchArrayInput` via:
//
//	TelemetrySpecTracingPatchArray{ TelemetrySpecTracingPatchArgs{...} }
type TelemetrySpecTracingPatchArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTracingPatchArrayOutput() TelemetrySpecTracingPatchArrayOutput
	ToTelemetrySpecTracingPatchArrayOutputWithContext(context.Context) TelemetrySpecTracingPatchArrayOutput
}

type TelemetrySpecTracingPatchArray []TelemetrySpecTracingPatchInput

func (TelemetrySpecTracingPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingPatch)(nil)).Elem()
}

func (i TelemetrySpecTracingPatchArray) ToTelemetrySpecTracingPatchArrayOutput() TelemetrySpecTracingPatchArrayOutput {
	return i.ToTelemetrySpecTracingPatchArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingPatchArray) ToTelemetrySpecTracingPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingPatchArrayOutput)
}

type TelemetrySpecTracingPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingPatch)(nil)).Elem()
}

func (o TelemetrySpecTracingPatchOutput) ToTelemetrySpecTracingPatchOutput() TelemetrySpecTracingPatchOutput {
	return o
}

func (o TelemetrySpecTracingPatchOutput) ToTelemetrySpecTracingPatchOutputWithContext(ctx context.Context) TelemetrySpecTracingPatchOutput {
	return o
}

// Optional.
func (o TelemetrySpecTracingPatchOutput) CustomTags() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v TelemetrySpecTracingPatch) map[string]map[string]string { return v.CustomTags }).(pulumi.StringMapMapOutput)
}

// Controls span reporting.
func (o TelemetrySpecTracingPatchOutput) DisableSpanReporting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingPatch) *bool { return v.DisableSpanReporting }).(pulumi.BoolPtrOutput)
}

func (o TelemetrySpecTracingPatchOutput) Match() TelemetrySpecTracingMatchPatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingPatch) *TelemetrySpecTracingMatchPatch { return v.Match }).(TelemetrySpecTracingMatchPatchPtrOutput)
}

// Optional.
func (o TelemetrySpecTracingPatchOutput) Providers() TelemetrySpecTracingProvidersPatchArrayOutput {
	return o.ApplyT(func(v TelemetrySpecTracingPatch) []TelemetrySpecTracingProvidersPatch { return v.Providers }).(TelemetrySpecTracingProvidersPatchArrayOutput)
}

// Controls the rate at which traffic will be selected for tracing if no prior sampling decision has been made.
func (o TelemetrySpecTracingPatchOutput) RandomSamplingPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingPatch) *float64 { return v.RandomSamplingPercentage }).(pulumi.Float64PtrOutput)
}

func (o TelemetrySpecTracingPatchOutput) UseRequestIdForTraceSampling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingPatch) *bool { return v.UseRequestIdForTraceSampling }).(pulumi.BoolPtrOutput)
}

type TelemetrySpecTracingPatchArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingPatch)(nil)).Elem()
}

func (o TelemetrySpecTracingPatchArrayOutput) ToTelemetrySpecTracingPatchArrayOutput() TelemetrySpecTracingPatchArrayOutput {
	return o
}

func (o TelemetrySpecTracingPatchArrayOutput) ToTelemetrySpecTracingPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingPatchArrayOutput {
	return o
}

func (o TelemetrySpecTracingPatchArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTracingPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTracingPatch {
		return vs[0].([]TelemetrySpecTracingPatch)[vs[1].(int)]
	}).(TelemetrySpecTracingPatchOutput)
}

type TelemetrySpecTracingProviders struct {
	// Required.
	Name *string `pulumi:"name"`
}

// TelemetrySpecTracingProvidersInput is an input type that accepts TelemetrySpecTracingProvidersArgs and TelemetrySpecTracingProvidersOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingProvidersInput` via:
//
//	TelemetrySpecTracingProvidersArgs{...}
type TelemetrySpecTracingProvidersInput interface {
	pulumi.Input

	ToTelemetrySpecTracingProvidersOutput() TelemetrySpecTracingProvidersOutput
	ToTelemetrySpecTracingProvidersOutputWithContext(context.Context) TelemetrySpecTracingProvidersOutput
}

type TelemetrySpecTracingProvidersArgs struct {
	// Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TelemetrySpecTracingProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingProviders)(nil)).Elem()
}

func (i TelemetrySpecTracingProvidersArgs) ToTelemetrySpecTracingProvidersOutput() TelemetrySpecTracingProvidersOutput {
	return i.ToTelemetrySpecTracingProvidersOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingProvidersArgs) ToTelemetrySpecTracingProvidersOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingProvidersOutput)
}

// TelemetrySpecTracingProvidersArrayInput is an input type that accepts TelemetrySpecTracingProvidersArray and TelemetrySpecTracingProvidersArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingProvidersArrayInput` via:
//
//	TelemetrySpecTracingProvidersArray{ TelemetrySpecTracingProvidersArgs{...} }
type TelemetrySpecTracingProvidersArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTracingProvidersArrayOutput() TelemetrySpecTracingProvidersArrayOutput
	ToTelemetrySpecTracingProvidersArrayOutputWithContext(context.Context) TelemetrySpecTracingProvidersArrayOutput
}

type TelemetrySpecTracingProvidersArray []TelemetrySpecTracingProvidersInput

func (TelemetrySpecTracingProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingProviders)(nil)).Elem()
}

func (i TelemetrySpecTracingProvidersArray) ToTelemetrySpecTracingProvidersArrayOutput() TelemetrySpecTracingProvidersArrayOutput {
	return i.ToTelemetrySpecTracingProvidersArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingProvidersArray) ToTelemetrySpecTracingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingProvidersArrayOutput)
}

type TelemetrySpecTracingProvidersOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingProviders)(nil)).Elem()
}

func (o TelemetrySpecTracingProvidersOutput) ToTelemetrySpecTracingProvidersOutput() TelemetrySpecTracingProvidersOutput {
	return o
}

func (o TelemetrySpecTracingProvidersOutput) ToTelemetrySpecTracingProvidersOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersOutput {
	return o
}

// Required.
func (o TelemetrySpecTracingProvidersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingProviders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingProvidersArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingProviders)(nil)).Elem()
}

func (o TelemetrySpecTracingProvidersArrayOutput) ToTelemetrySpecTracingProvidersArrayOutput() TelemetrySpecTracingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecTracingProvidersArrayOutput) ToTelemetrySpecTracingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecTracingProvidersArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTracingProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTracingProviders {
		return vs[0].([]TelemetrySpecTracingProviders)[vs[1].(int)]
	}).(TelemetrySpecTracingProvidersOutput)
}

type TelemetrySpecTracingProvidersPatch struct {
	// Required.
	Name *string `pulumi:"name"`
}

// TelemetrySpecTracingProvidersPatchInput is an input type that accepts TelemetrySpecTracingProvidersPatchArgs and TelemetrySpecTracingProvidersPatchOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingProvidersPatchInput` via:
//
//	TelemetrySpecTracingProvidersPatchArgs{...}
type TelemetrySpecTracingProvidersPatchInput interface {
	pulumi.Input

	ToTelemetrySpecTracingProvidersPatchOutput() TelemetrySpecTracingProvidersPatchOutput
	ToTelemetrySpecTracingProvidersPatchOutputWithContext(context.Context) TelemetrySpecTracingProvidersPatchOutput
}

type TelemetrySpecTracingProvidersPatchArgs struct {
	// Required.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (TelemetrySpecTracingProvidersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingProvidersPatch)(nil)).Elem()
}

func (i TelemetrySpecTracingProvidersPatchArgs) ToTelemetrySpecTracingProvidersPatchOutput() TelemetrySpecTracingProvidersPatchOutput {
	return i.ToTelemetrySpecTracingProvidersPatchOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingProvidersPatchArgs) ToTelemetrySpecTracingProvidersPatchOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingProvidersPatchOutput)
}

// TelemetrySpecTracingProvidersPatchArrayInput is an input type that accepts TelemetrySpecTracingProvidersPatchArray and TelemetrySpecTracingProvidersPatchArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingProvidersPatchArrayInput` via:
//
//	TelemetrySpecTracingProvidersPatchArray{ TelemetrySpecTracingProvidersPatchArgs{...} }
type TelemetrySpecTracingProvidersPatchArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTracingProvidersPatchArrayOutput() TelemetrySpecTracingProvidersPatchArrayOutput
	ToTelemetrySpecTracingProvidersPatchArrayOutputWithContext(context.Context) TelemetrySpecTracingProvidersPatchArrayOutput
}

type TelemetrySpecTracingProvidersPatchArray []TelemetrySpecTracingProvidersPatchInput

func (TelemetrySpecTracingProvidersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingProvidersPatch)(nil)).Elem()
}

func (i TelemetrySpecTracingProvidersPatchArray) ToTelemetrySpecTracingProvidersPatchArrayOutput() TelemetrySpecTracingProvidersPatchArrayOutput {
	return i.ToTelemetrySpecTracingProvidersPatchArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingProvidersPatchArray) ToTelemetrySpecTracingProvidersPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingProvidersPatchArrayOutput)
}

type TelemetrySpecTracingProvidersPatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingProvidersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingProvidersPatch)(nil)).Elem()
}

func (o TelemetrySpecTracingProvidersPatchOutput) ToTelemetrySpecTracingProvidersPatchOutput() TelemetrySpecTracingProvidersPatchOutput {
	return o
}

func (o TelemetrySpecTracingProvidersPatchOutput) ToTelemetrySpecTracingProvidersPatchOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersPatchOutput {
	return o
}

// Required.
func (o TelemetrySpecTracingProvidersPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingProvidersPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingProvidersPatchArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingProvidersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingProvidersPatch)(nil)).Elem()
}

func (o TelemetrySpecTracingProvidersPatchArrayOutput) ToTelemetrySpecTracingProvidersPatchArrayOutput() TelemetrySpecTracingProvidersPatchArrayOutput {
	return o
}

func (o TelemetrySpecTracingProvidersPatchArrayOutput) ToTelemetrySpecTracingProvidersPatchArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersPatchArrayOutput {
	return o
}

func (o TelemetrySpecTracingProvidersPatchArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTracingProvidersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTracingProvidersPatch {
		return vs[0].([]TelemetrySpecTracingProvidersPatch)[vs[1].(int)]
	}).(TelemetrySpecTracingProvidersPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryTypeInput)(nil)).Elem(), TelemetryTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryTypeArrayInput)(nil)).Elem(), TelemetryTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryListTypeInput)(nil)).Elem(), TelemetryListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryPatchTypeInput)(nil)).Elem(), TelemetryPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecInput)(nil)).Elem(), TelemetrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecPtrInput)(nil)).Elem(), TelemetrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingInput)(nil)).Elem(), TelemetrySpecAccessLoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingArrayInput)(nil)).Elem(), TelemetrySpecAccessLoggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingFilterInput)(nil)).Elem(), TelemetrySpecAccessLoggingFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingFilterPtrInput)(nil)).Elem(), TelemetrySpecAccessLoggingFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingFilterPatchInput)(nil)).Elem(), TelemetrySpecAccessLoggingFilterPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingFilterPatchPtrInput)(nil)).Elem(), TelemetrySpecAccessLoggingFilterPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingMatchInput)(nil)).Elem(), TelemetrySpecAccessLoggingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingMatchPtrInput)(nil)).Elem(), TelemetrySpecAccessLoggingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingMatchPatchInput)(nil)).Elem(), TelemetrySpecAccessLoggingMatchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingMatchPatchPtrInput)(nil)).Elem(), TelemetrySpecAccessLoggingMatchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingPatchInput)(nil)).Elem(), TelemetrySpecAccessLoggingPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingPatchArrayInput)(nil)).Elem(), TelemetrySpecAccessLoggingPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingProvidersInput)(nil)).Elem(), TelemetrySpecAccessLoggingProvidersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingProvidersArrayInput)(nil)).Elem(), TelemetrySpecAccessLoggingProvidersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingProvidersPatchInput)(nil)).Elem(), TelemetrySpecAccessLoggingProvidersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingProvidersPatchArrayInput)(nil)).Elem(), TelemetrySpecAccessLoggingProvidersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsInput)(nil)).Elem(), TelemetrySpecMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsArrayInput)(nil)).Elem(), TelemetrySpecMetricsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesInput)(nil)).Elem(), TelemetrySpecMetricsOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesArrayInput)(nil)).Elem(), TelemetrySpecMetricsOverridesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesMatchInput)(nil)).Elem(), TelemetrySpecMetricsOverridesMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesMatchPtrInput)(nil)).Elem(), TelemetrySpecMetricsOverridesMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesMatchPatchInput)(nil)).Elem(), TelemetrySpecMetricsOverridesMatchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesMatchPatchPtrInput)(nil)).Elem(), TelemetrySpecMetricsOverridesMatchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesPatchInput)(nil)).Elem(), TelemetrySpecMetricsOverridesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesPatchArrayInput)(nil)).Elem(), TelemetrySpecMetricsOverridesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsPatchInput)(nil)).Elem(), TelemetrySpecMetricsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsPatchArrayInput)(nil)).Elem(), TelemetrySpecMetricsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsProvidersInput)(nil)).Elem(), TelemetrySpecMetricsProvidersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsProvidersArrayInput)(nil)).Elem(), TelemetrySpecMetricsProvidersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsProvidersPatchInput)(nil)).Elem(), TelemetrySpecMetricsProvidersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsProvidersPatchArrayInput)(nil)).Elem(), TelemetrySpecMetricsProvidersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecPatchInput)(nil)).Elem(), TelemetrySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecPatchPtrInput)(nil)).Elem(), TelemetrySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecSelectorInput)(nil)).Elem(), TelemetrySpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecSelectorPtrInput)(nil)).Elem(), TelemetrySpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecSelectorPatchInput)(nil)).Elem(), TelemetrySpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecSelectorPatchPtrInput)(nil)).Elem(), TelemetrySpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefInput)(nil)).Elem(), TelemetrySpecTargetRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefPtrInput)(nil)).Elem(), TelemetrySpecTargetRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefPatchInput)(nil)).Elem(), TelemetrySpecTargetRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefPatchPtrInput)(nil)).Elem(), TelemetrySpecTargetRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefsInput)(nil)).Elem(), TelemetrySpecTargetRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefsArrayInput)(nil)).Elem(), TelemetrySpecTargetRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefsPatchInput)(nil)).Elem(), TelemetrySpecTargetRefsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefsPatchArrayInput)(nil)).Elem(), TelemetrySpecTargetRefsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingInput)(nil)).Elem(), TelemetrySpecTracingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingArrayInput)(nil)).Elem(), TelemetrySpecTracingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingMatchInput)(nil)).Elem(), TelemetrySpecTracingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingMatchPtrInput)(nil)).Elem(), TelemetrySpecTracingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingMatchPatchInput)(nil)).Elem(), TelemetrySpecTracingMatchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingMatchPatchPtrInput)(nil)).Elem(), TelemetrySpecTracingMatchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingPatchInput)(nil)).Elem(), TelemetrySpecTracingPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingPatchArrayInput)(nil)).Elem(), TelemetrySpecTracingPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingProvidersInput)(nil)).Elem(), TelemetrySpecTracingProvidersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingProvidersArrayInput)(nil)).Elem(), TelemetrySpecTracingProvidersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingProvidersPatchInput)(nil)).Elem(), TelemetrySpecTracingProvidersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingProvidersPatchArrayInput)(nil)).Elem(), TelemetrySpecTracingProvidersPatchArray{})
	pulumi.RegisterOutputType(TelemetryTypeOutput{})
	pulumi.RegisterOutputType(TelemetryTypeArrayOutput{})
	pulumi.RegisterOutputType(TelemetryListTypeOutput{})
	pulumi.RegisterOutputType(TelemetryPatchTypeOutput{})
	pulumi.RegisterOutputType(TelemetrySpecOutput{})
	pulumi.RegisterOutputType(TelemetrySpecPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingFilterOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingFilterPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingFilterPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingFilterPatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingMatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingMatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingMatchPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingMatchPatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingPatchArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingProvidersOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingProvidersArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingProvidersPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingProvidersPatchArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesMatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesMatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesMatchPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesMatchPatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesPatchArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsPatchArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsProvidersOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsProvidersArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsProvidersPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsProvidersPatchArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecSelectorOutput{})
	pulumi.RegisterOutputType(TelemetrySpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecSelectorPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefPatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefsOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefsArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefsPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefsPatchArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingMatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingMatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingMatchPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingMatchPatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingPatchArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingProvidersOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingProvidersArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingProvidersPatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingProvidersPatchArrayOutput{})
}
