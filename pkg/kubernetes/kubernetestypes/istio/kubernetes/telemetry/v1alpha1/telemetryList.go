// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TelemetryList is a list of Telemetry
type TelemetryList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of telemetries. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items TelemetryTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewTelemetryList registers a new resource with the given unique name, arguments, and options.
func NewTelemetryList(ctx *pulumi.Context,
	name string, args *TelemetryListArgs, opts ...pulumi.ResourceOption) (*TelemetryList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("telemetry.istio.io/v1alpha1")
	args.Kind = pulumi.StringPtr("TelemetryList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource TelemetryList
	err := ctx.RegisterResource("kubernetes:telemetry.istio.io/v1alpha1:TelemetryList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTelemetryList gets an existing TelemetryList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTelemetryList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TelemetryListState, opts ...pulumi.ResourceOption) (*TelemetryList, error) {
	var resource TelemetryList
	err := ctx.ReadResource("kubernetes:telemetry.istio.io/v1alpha1:TelemetryList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TelemetryList resources.
type telemetryListState struct {
}

type TelemetryListState struct {
}

func (TelemetryListState) ElementType() reflect.Type {
	return reflect.TypeOf((*telemetryListState)(nil)).Elem()
}

type telemetryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of telemetries. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []TelemetryType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a TelemetryList resource.
type TelemetryListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of telemetries. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items TelemetryTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (TelemetryListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*telemetryListArgs)(nil)).Elem()
}

type TelemetryListInput interface {
	pulumi.Input

	ToTelemetryListOutput() TelemetryListOutput
	ToTelemetryListOutputWithContext(ctx context.Context) TelemetryListOutput
}

func (*TelemetryList) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetryList)(nil)).Elem()
}

func (i *TelemetryList) ToTelemetryListOutput() TelemetryListOutput {
	return i.ToTelemetryListOutputWithContext(context.Background())
}

func (i *TelemetryList) ToTelemetryListOutputWithContext(ctx context.Context) TelemetryListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryListOutput)
}

// TelemetryListArrayInput is an input type that accepts TelemetryListArray and TelemetryListArrayOutput values.
// You can construct a concrete instance of `TelemetryListArrayInput` via:
//
//	TelemetryListArray{ TelemetryListArgs{...} }
type TelemetryListArrayInput interface {
	pulumi.Input

	ToTelemetryListArrayOutput() TelemetryListArrayOutput
	ToTelemetryListArrayOutputWithContext(context.Context) TelemetryListArrayOutput
}

type TelemetryListArray []TelemetryListInput

func (TelemetryListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TelemetryList)(nil)).Elem()
}

func (i TelemetryListArray) ToTelemetryListArrayOutput() TelemetryListArrayOutput {
	return i.ToTelemetryListArrayOutputWithContext(context.Background())
}

func (i TelemetryListArray) ToTelemetryListArrayOutputWithContext(ctx context.Context) TelemetryListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryListArrayOutput)
}

// TelemetryListMapInput is an input type that accepts TelemetryListMap and TelemetryListMapOutput values.
// You can construct a concrete instance of `TelemetryListMapInput` via:
//
//	TelemetryListMap{ "key": TelemetryListArgs{...} }
type TelemetryListMapInput interface {
	pulumi.Input

	ToTelemetryListMapOutput() TelemetryListMapOutput
	ToTelemetryListMapOutputWithContext(context.Context) TelemetryListMapOutput
}

type TelemetryListMap map[string]TelemetryListInput

func (TelemetryListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TelemetryList)(nil)).Elem()
}

func (i TelemetryListMap) ToTelemetryListMapOutput() TelemetryListMapOutput {
	return i.ToTelemetryListMapOutputWithContext(context.Background())
}

func (i TelemetryListMap) ToTelemetryListMapOutputWithContext(ctx context.Context) TelemetryListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetryListMapOutput)
}

type TelemetryListOutput struct{ *pulumi.OutputState }

func (TelemetryListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetryList)(nil)).Elem()
}

func (o TelemetryListOutput) ToTelemetryListOutput() TelemetryListOutput {
	return o
}

func (o TelemetryListOutput) ToTelemetryListOutputWithContext(ctx context.Context) TelemetryListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o TelemetryListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *TelemetryList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of telemetries. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o TelemetryListOutput) Items() TelemetryTypeArrayOutput {
	return o.ApplyT(func(v *TelemetryList) TelemetryTypeArrayOutput { return v.Items }).(TelemetryTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TelemetryListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *TelemetryList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o TelemetryListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *TelemetryList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type TelemetryListArrayOutput struct{ *pulumi.OutputState }

func (TelemetryListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TelemetryList)(nil)).Elem()
}

func (o TelemetryListArrayOutput) ToTelemetryListArrayOutput() TelemetryListArrayOutput {
	return o
}

func (o TelemetryListArrayOutput) ToTelemetryListArrayOutputWithContext(ctx context.Context) TelemetryListArrayOutput {
	return o
}

func (o TelemetryListArrayOutput) Index(i pulumi.IntInput) TelemetryListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TelemetryList {
		return vs[0].([]*TelemetryList)[vs[1].(int)]
	}).(TelemetryListOutput)
}

type TelemetryListMapOutput struct{ *pulumi.OutputState }

func (TelemetryListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TelemetryList)(nil)).Elem()
}

func (o TelemetryListMapOutput) ToTelemetryListMapOutput() TelemetryListMapOutput {
	return o
}

func (o TelemetryListMapOutput) ToTelemetryListMapOutputWithContext(ctx context.Context) TelemetryListMapOutput {
	return o
}

func (o TelemetryListMapOutput) MapIndex(k pulumi.StringInput) TelemetryListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TelemetryList {
		return vs[0].(map[string]*TelemetryList)[vs[1].(string)]
	}).(TelemetryListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryListInput)(nil)).Elem(), &TelemetryList{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryListArrayInput)(nil)).Elem(), TelemetryListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetryListMapInput)(nil)).Elem(), TelemetryListMap{})
	pulumi.RegisterOutputType(TelemetryListOutput{})
	pulumi.RegisterOutputType(TelemetryListArrayOutput{})
	pulumi.RegisterOutputType(TelemetryListMapOutput{})
}
